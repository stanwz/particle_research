/**
 * @license
 VERSION: 1.20.3
 DATE: 2017-10-02
 UPDATES AND DOCS AT: http://greensock.com

 @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
 This work is subject to the terms at http://greensock.com/standard-license or for
 Club GreenSock members, the software agreement that was issued with your membership.

 @author: Jack Doyle, jack@greensock.com
 {
                "name": "Cookies",
                "property": "cookies",
                "tags": ["storage"],
                "authors": ["tauren"]
              }
 ! {
                "name": "Web Audio API",
                "property": "webaudio",
                "caniuse": "audio-api",
                "polyfills": ["xaudiojs", "dynamicaudiojs", "audiolibjs"],
                "tags": ["audio", "media"],
                "builderAliases": ["audio_webaudio_api"],
                "authors": ["Addy Osmani"],
                "notes": [{
                  "name": "W3 Specification",
                  "href": "https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html"
                }]
              }
 ! {
            "name": "Touch Events",
            "property": "touchevents",
            "caniuse" : "touch",
            "tags": ["media", "attribute"],
            "notes": [{
              "name": "Touch Events spec",
              "href": "https://www.w3.org/TR/2013/WD-touch-events-20130124/"
            }],
            "warnings": [
              "Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device"
            ],
            "knownBugs": [
              "False-positive on some configurations of Nokia N900",
              "False-positive on some BlackBerry 6.0 builds â€“ https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695"
            ]
          }
 ! {
                "name": "CSS Background Clip Text",
                "property": "backgroundcliptext",
                "authors": ["ausi"],
                "tags": ["css"],
                "notes": [
                  {
                    "name": "CSS Tricks Article",
                    "href": "https://css-tricks.com/image-under-text/"
                  },
                  {
                    "name": "MDN Docs",
                    "href": "https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip"
                  },
                  {
                    "name": "Related Github Issue",
                    "href": "https://github.com/Modernizr/Modernizr/issues/199"
                  }
                ]
              }
 ! Detectizr v2.2.0
 http://barisaydinoglu.github.com/Detectizr/

 Written by Baris Aydinoglu (http://baris.aydinoglu.info) - Copyright 2012
 Released under the MIT license

 Date: 2015-09-28T21:37Z
 npm.im/object-fit-images 3.2.3  verge 1.10.2+201705300050
 http://npm.im/verge
 MIT Ryan Van Etten
 Hammer.JS - v2.0.7 - 2016-04-22
 http://hammerjs.github.io/

 Copyright (c) 2016 Jorik Tangelder;
 Licensed under the MIT license  imagesLoaded v4.1.4
 JavaScript is all like "You images are done yet or what?"
 MIT License
 */
'use strict';
(function setUp() {
    /** @type {string} */
    var ua = navigator.userAgent.toLowerCase();
    /** @type {!RegExp} */
    var currencyRegExp = /(chrome|firefox)/;
    if (currencyRegExp.test(ua.toLowerCase())) {
        /** @type {string} */
        var decodeTimeSum = ["padding: 20px 5px 16px", "background-color: #171718", "color: #bc994e"].join(";");
        if (ua.indexOf("chrome") > -1) {
            /** @type {string} */
            decodeTimeSum = decodeTimeSum + ";";
            /** @type {string} */
            decodeTimeSum = decodeTimeSum + ["padding: 20px 5px 16px 40px", "background-image: url(http://epic.net/img/signature/epic-logo.png)", "background-position: 10px 9px", "background-repeat: no-repeat", "background-size: 26px 30px"].join(";");
        }
        /** @type {string} */
        var callback_topic = ["padding: 20px 5px 16px", "background-color: #bc994e", "color: #ffffff"].join(";");
        /** @type {string} */
        var my_pow = ["background-color: transparent"].join(";");
        /** @type {string} */
        var conv_reverse_sort = "\n\n %c Crafted with \u2665\ufe0e by EPIC %c https://www.epic.net %c \n\n\n";
        console.log(conv_reverse_sort, decodeTimeSum, callback_topic, my_pow);
    } else {
        if (window.console) {
            console.log("Crafted with love by EPIC - https://www.epic.net");
        }
    }
})();
!function (modules) {
    /**
     * @param {number} moduleId
     * @return {?}
     */
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
        }
        var module = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
        };
        return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = true, module.exports;
    }

    var installedModules = {};
    /** @type {!Array} */
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    /**
     * @param {!Object} type
     * @param {string} name
     * @param {!Function} arg
     * @return {undefined}
     */
    __webpack_require__.d = function (type, name, arg) {
        if (!__webpack_require__.o(type, name)) {
            Object.defineProperty(type, name, {
                configurable: false,
                enumerable: true,
                get: arg
            });
        }
    };
    /**
     * @param {!Object} x
     * @return {?}
     */
    __webpack_require__.n = function (x) {
        /** @type {function(): ?} */
        var n = x && x.__esModule ? function () {
            return x.default;
        } : function () {
            return x;
        };
        return __webpack_require__.d(n, "a", n), n;
    };
    /**
     * @param {(Object|string)} e
     * @param {!Object} input
     * @return {?}
     */
    __webpack_require__.o = function (e, input) {
        return Object.prototype.hasOwnProperty.call(e, input);
    };
    /** @type {string} */
    __webpack_require__.p = "/dist";
    __webpack_require__(__webpack_require__.s = 10);
}([
    function (canCreateDiscussions, exports, __webpack_require__) {
        /**
         * @param {!AudioNode} instance
         * @param {!Function} Constructor
         * @return {undefined}
         */
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        /**
         * @param {string} self
         * @param {string} call
         * @return {?}
         */
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return !call || "object" != typeof call && "function" != typeof call ? self : call;
        }

        /**
         * @param {!Object} subClass
         * @param {!Object} superClass
         * @return {undefined}
         */
        function _inherits(subClass, superClass) {
            if ("function" != typeof superClass && null !== superClass) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            /** @type {!Object} */
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(subClass, superClass);
                } else {
                    /** @type {!Object} */
                    subClass.__proto__ = superClass;
                }
            }
        }

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        /**
         * @param {!Object} object
         * @param {string} name
         * @param {?} options
         * @return {?}
         */
        var store = function get(object, name, options) {
            if (null === object) {
                object = Function.prototype;
            }
            /** @type {(ObjectPropertyDescriptor<?>|undefined)} */
            var output = Object.getOwnPropertyDescriptor(object, name);
            if (void 0 === output) {
                /** @type {(Object|null)} */
                var string = Object.getPrototypeOf(object);
                return null === string ? void 0 : get(string, name, options);
            }
            if ("value" in output) {
                return output.value;
            }
            /** @type {(function(): ?|undefined)} */
            var params = output.get;
            if (void 0 !== params) {
                return params.call(options);
            }
        };
        var _deepAssign = __webpack_require__(17);
        var _deepAssign2 = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(_deepAssign);
        var Module = function (_EventEmitter) {
            /**
             * @return {?}
             */
            function Agent() {
                return _classCallCheck(this, Agent), _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).apply(this, arguments));
            }

            return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                key: "emit",
                value: function () {
                    var _get2;
                    /** @type {number} */
                    var length = arguments.length;
                    /** @type {!Array} */
                    var args = Array(length);
                    /** @type {number} */
                    var i = 0;
                    for (; i < length; i++) {
                        args[i] = arguments[i];
                    }
                    var operator1 = args[0];
                    args.slice(1);
                    if (this.logBlacklist) {
                        this.logBlacklist.indexOf(operator1);
                    }
                    (_get2 = store(Agent.prototype.__proto__ || Object.getPrototypeOf(Agent.prototype), "emit", this)).call.apply(_get2, [this].concat(args));
                }
            }]), Agent;
        }(_deepAssign2.default);
        var module = new Module;
        /** @type {!Array} */
        module.logBlacklist = [];
        /** @type {string} */
        module.RESIZE = "resize";
        module.logBlacklist.push(module.RESIZE);
        /** @type {string} */
        module.SCROLL = "scroll";
        module.logBlacklist.push(module.SCROLL);
        /** @type {string} */
        module.RAF = "raf";
        module.logBlacklist.push(module.RAF);
        /** @type {string} */
        module.PANEL_NEXT = "panelNext";
        /** @type {string} */
        module.PANEL_PREV = "panelPrev";
        /** @type {string} */
        module.PANEL_CHANGE = "panelChange";
        /** @type {string} */
        module.PANEL_END = "panelEnd";
        /** @type {string} */
        module.HOME_READY = "homeReady";
        /** @type {string} */
        module.WORLD_READY = "worldReady";
        /** @type {string} */
        module.MOUSE_MOVE = "mouseMove";
        module.logBlacklist.push(module.MOUSE_MOVE);
        /** @type {string} */
        module.DEVICE_MOVE = "deviceMove";
        module.logBlacklist.push(module.DEVICE_MOVE);
        /** @type {string} */
        module.CAMERA_UPDATE = "cameraUpdate";
        exports.default = module;
    },
    function (canCreateDiscussions, self, __webpack_require__) {
        /**
         * @param {!Array} array
         * @return {?}
         */
        function find(array) {
            if (Array.isArray(array)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var ret = Array(array.length);
                for (; i < array.length; i++) {
                    ret[i] = array[i];
                }
                return ret;
            }
            return Array.from(array);
        }

        /**
         * @param {?} expr
         * @param {!Object} context
         * @return {?}
         */
        function query(expr, context) {
            return (context || document).querySelector(expr);
        }

        /**
         * @param {?} selector
         * @param {!Object} element
         * @return {?}
         */
        function $(selector, element) {
            return (element || document).querySelectorAll(selector);
        }

        /**
         * @param {!Node} obj
         * @param {?} node
         * @return {?}
         */
        function parent(obj, node) {
            if (obj.parentNode && "function" == typeof obj.parentNode.matches) {
                return obj.parentNode.matches(node) ? obj.parentNode : parent(obj.parentNode, node);
            }
        }

        /**
         * @param {!Element} offsetParent
         * @return {?}
         */
        function show(offsetParent) {
            return {
                top: offsetParent.getBoundingClientRect().top + document.body.scrollTop,
                left: offsetParent.getBoundingClientRect().left + document.body.scrollLeft
            };
        }

        /**
         * @param {!HTMLElement} el
         * @return {?}
         */
        function getTotalWidthOrHeight(el) {
            var cw = el.offsetWidth;
            /** @type {(CSSStyleDeclaration|null)} */
            var cs = getComputedStyle(el);
            return cw = cw + (parseInt(cs.marginLeft, 10) + parseInt(cs.marginRight, 10));
        }

        /**
         * @param {!HTMLElement} ul
         * @return {?}
         */
        function height(ul) {
            var height = ul.offsetHeight;
            /** @type {(CSSStyleDeclaration|null)} */
            var cs = getComputedStyle(ul);
            return height = height + (parseInt(cs.marginTop, 10) + parseInt(cs.marginBottom, 10));
        }

        /**
         * @param {?} a
         * @param {!Node} n
         * @return {undefined}
         */
        function u(a, n) {
            n.parentNode.insertBefore(a, n.nextSibling);
        }

        /**
         * @param {!Node} e
         * @param {!Object} d
         * @return {undefined}
         */
        function l(e, d) {
            e.parentNode.insertBefore(d, e);
            d.appendChild(e);
        }

        /**
         * @param {!Node} t
         * @return {?}
         */
        function p(t) {
            return [].concat(find(t.parentNode.children)).filter(function (s) {
                return s !== t;
            });
        }

        /**
         * @param {!Node} ctx
         * @return {?}
         */
        function build(ctx) {
            /** @type {!Array} */
            var ret = [];
            var e = ctx.nextElementSibling;
            for (; e;) {
                ret.push(e);
                e = e.nextElementSibling;
            }
            return ret;
        }

        /**
         * @param {!Object} object
         * @param {string} i
         * @param {string} fn
         * @return {undefined}
         */
        function done(object, i, fn) {
            var v = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {
                capture: false
            };
            var options = true === _deepAssign2.default.passiveEvents ? v : v.capture;
            object.addEventListener(i, fn, options);
        }

        /**
         * @param {!Element} d
         * @param {string} e
         * @param {!Function} date
         * @return {undefined}
         */
        function m(d, e, date) {
            d.removeEventListener(e, date);
        }

        /**
         * @param {undefined} input
         * @param {?} document
         * @param {string} undefined
         * @param {!Function} opts
         * @return {undefined}
         */
        function init(input, document, undefined, opts) {
            /**
             * @param {!Object} el
             * @return {undefined}
             */
            function dispatchEvent(el) {
                var a = el.target;
                var elements = $(document, input);
                if (Array.prototype.indexOf.call(elements, a) >= 0) {
                    opts.call(a, el);
                }
            }

            done(input, undefined, dispatchEvent, "blur" === undefined || "focus" === undefined);
        }

        /**
         * @param {string} value
         * @param {string} e
         * @return {?}
         */
        function draw(value, e) {
            return void 0 === value.forEach ? Object.keys(value).forEach(function (h) {
                e(value[h], h);
            }) : value.forEach(e), value;
        }

        /**
         * @param {!Function} a
         * @param {!Function} f
         * @return {?}
         */
        function map(a, f) {
            return void 0 === a.map ? Object.keys(a).map(function (i) {
                return f(a[i], i);
            }) : a.map(f);
        }

        Object.defineProperty(self, "__esModule", {
            value: true
        });
        self.map = self.forEach = self.$delegate = self.$off = self.$on = self.$nextSiblings = self.$siblings = self.$wrap = self.$insertAfter = self.$outerHeight = self.$outerWidth = self.$offset = self.$parent = self.qsa = self.qs = void 0;
        var _deepAssign = __webpack_require__(20);
        var _deepAssign2 = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(_deepAssign);
        /** @type {function(?, !Object): ?} */
        self.qs = query;
        /** @type {function(?, !Object): ?} */
        self.qsa = $;
        /** @type {function(!Node, ?): ?} */
        self.$parent = parent;
        /** @type {function(!Element): ?} */
        self.$offset = show;
        /** @type {function(!HTMLElement): ?} */
        self.$outerWidth = getTotalWidthOrHeight;
        /** @type {function(!HTMLElement): ?} */
        self.$outerHeight = height;
        /** @type {function(?, !Node): undefined} */
        self.$insertAfter = u;
        /** @type {function(!Node, !Object): undefined} */
        self.$wrap = l;
        /** @type {function(!Node): ?} */
        self.$siblings = p;
        /** @type {function(!Node): ?} */
        self.$nextSiblings = build;
        /** @type {function(!Object, string, string): undefined} */
        self.$on = done;
        /** @type {function(!Element, string, !Function): undefined} */
        self.$off = m;
        /** @type {function(undefined, ?, string, !Function): undefined} */
        self.$delegate = init;
        /** @type {function(string, string): ?} */
        self.forEach = draw;
        /** @type {function(!Function, !Function): ?} */
        self.map = map;
    },
    function (module, items, moment) {
        (function (useroptions) {
            var evaluatedParams;
            var r;
            var options = void 0 !== module && module.exports && void 0 !== useroptions ? useroptions : this || window;
            (options._gsQueue || (options._gsQueue = [])).push(function () {
                options._gsDefine("TweenMax", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (Animation, type, e) {
                    /**
                     * @param {!Object} a
                     * @return {?}
                     */
                    var selector = function (a) {
                        var i;
                        /** @type {!Array} */
                        var r = [];
                        var n = a.length;
                        /** @type {number} */
                        i = 0;
                        for (; i !== n; r.push(a[i++])) {
                        }
                        return r;
                    };
                    /**
                     * @param {!Object} vars
                     * @param {!Array} targets
                     * @param {number} i
                     * @return {undefined}
                     */
                    var _applyCycle = function (vars, targets, i) {
                        var field;
                        var val;
                        var cycle = vars.cycle;
                        for (field in cycle) {
                            val = cycle[field];
                            vars[field] = "function" == typeof val ? val(i, targets[i]) : val[i % val.length];
                        }
                        delete vars.cycle;
                    };
                    /**
                     * @param {!Object} type
                     * @param {string} name
                     * @param {!Function} target
                     * @return {undefined}
                     */
                    var TweenLite = function (type, name, target) {
                        e.call(this, type, name, target);
                        /** @type {number} */
                        this._cycle = 0;
                        /** @type {boolean} */
                        this._yoyo = true === this.vars.yoyo || !!this.vars.yoyoEase;
                        this._repeat = this.vars.repeat || 0;
                        this._repeatDelay = this.vars.repeatDelay || 0;
                        if (this._repeat) {
                            this._uncache(true);
                        }
                        this.render = TweenLite.prototype.render;
                    };
                    var TweenLiteInternals = e._internals;
                    var _isSelector = TweenLiteInternals.isSelector;
                    var _isArray = TweenLiteInternals.isArray;
                    var p = TweenLite.prototype = e.to({}, .1, {});
                    /** @type {!Array} */
                    var i = [];
                    /** @type {string} */
                    TweenLite.version = "1.20.3";
                    /** @type {function(!Object, string, !Function): undefined} */
                    p.constructor = TweenLite;
                    /** @type {boolean} */
                    p.kill()._gc = false;
                    TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = e.killTweensOf;
                    TweenLite.getTweensOf = e.getTweensOf;
                    TweenLite.lagSmoothing = e.lagSmoothing;
                    TweenLite.ticker = e.ticker;
                    TweenLite.render = e.render;
                    /**
                     * @return {?}
                     */
                    p.invalidate = function () {
                        return this._yoyo = true === this.vars.yoyo || !!this.vars.yoyoEase, this._repeat = this.vars.repeat || 0, this._repeatDelay = this.vars.repeatDelay || 0, this._yoyoEase = null, this._uncache(true), e.prototype.invalidate.call(this);
                    };
                    /**
                     * @param {!Array} vars
                     * @param {boolean} resetDuration
                     * @return {?}
                     */
                    p.updateTo = function (vars, resetDuration) {
                        var i;
                        var ratio = this.ratio;
                        var o = this.vars.immediateRender || vars.immediateRender;
                        if (resetDuration && this._startTime < this._timeline._time) {
                            this._startTime = this._timeline._time;
                            this._uncache(false);
                            if (this._gc) {
                                this._enabled(true, false);
                            } else {
                                this._timeline.insert(this, this._startTime - this._delay);
                            }
                        }
                        for (i in vars) {
                            this.vars[i] = vars[i];
                        }
                        if (this._initted || o) {
                            if (resetDuration) {
                                /** @type {boolean} */
                                this._initted = false;
                                if (o) {
                                    this.render(0, true, true);
                                }
                            } else {
                                if (this._gc && this._enabled(true, false), this._notifyPluginsOfEnabled && this._firstPT && e._onPluginEvent("_onDisable", this), this._time / this._duration > .998) {
                                    var time = this._totalTime;
                                    this.render(0, true, false);
                                    /** @type {boolean} */
                                    this._initted = false;
                                    this.render(time, true, false);
                                } else {
                                    if (this._initted = false, this._init(), this._time > 0 || o) {
                                        var now;
                                        /** @type {number} */
                                        var scaleY = 1 / (1 - ratio);
                                        var pt = this._firstPT;
                                        for (; pt;) {
                                            now = pt.s + pt.c;
                                            pt.c *= scaleY;
                                            /** @type {number} */
                                            pt.s = now - pt.c;
                                            pt = pt._next;
                                        }
                                    }
                                }
                            }
                        }
                        return this;
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {?}
                     */
                    p.render = function (time, suppressEvents, force) {
                        if (!this._initted) {
                            if (0 === this._duration && this.vars.repeat) {
                                this.invalidate();
                            }
                        }
                        var isComplete;
                        var callback;
                        var pt;
                        var cycleDuration;
                        var r;
                        var v;
                        var l;
                        var rawPrevTime;
                        var ease;
                        var totalDur = this._dirty ? this.totalDuration() : this._totalDuration;
                        var prevTime = this._time;
                        var prevTotalTime = this._totalTime;
                        var prevCycle = this._cycle;
                        var dur = this._duration;
                        var prevRawPrevTime = this._rawPrevTime;
                        if (time >= totalDur - 1e-7 && time >= 0 ? (this._totalTime = totalDur, this._cycle = this._repeat, this._yoyo && 0 != (1 & this._cycle) ? (this._time = 0, this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0) : (this._time = dur, this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1), this._reversed || (isComplete = true, callback = "onComplete", force = force || this._timeline.autoRemoveChildren), 0 === dur && (this._initted || !this.vars.lazy || force) && (this._startTime ===
                            this._timeline._duration && (time = 0), (prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || 1e-10 === prevRawPrevTime && "isPause" !== this.data) && prevRawPrevTime !== time && (force = true, prevRawPrevTime > 1e-10 && (callback = "onReverseComplete")), this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10)) : time < 1e-7 ? (this._totalTime = this._time = this._cycle = 0, this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0, (0 !==
                                prevTotalTime || 0 === dur && prevRawPrevTime > 0) && (callback = "onReverseComplete", isComplete = this._reversed), time < 0 && (this._active = false, 0 === dur && (this._initted || !this.vars.lazy || force) && (prevRawPrevTime >= 0 && (force = true), this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10)), this._initted || (force = true)) : (this._totalTime = this._time = time, 0 !== this._repeat && (cycleDuration = dur + this._repeatDelay,
                                this._cycle = this._totalTime / cycleDuration >> 0, 0 !== this._cycle && this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time && this._cycle--, this._time = this._totalTime - this._cycle * cycleDuration, this._yoyo && 0 != (1 & this._cycle) && (this._time = dur - this._time, (ease = this._yoyoEase || this.vars.yoyoEase) && (this._yoyoEase || (true !== ease || this._initted ? this._yoyoEase = ease = true === ease ? this._ease : ease instanceof Ease ? ease : Ease.map[ease] :
                                (ease = this.vars.ease, this._yoyoEase = ease = ease ? ease instanceof Ease ? ease : "function" == typeof ease ? new Ease(ease, this.vars.easeParams) : Ease.map[ease] || e.defaultEase : e.defaultEase)), this.ratio = ease ? 1 - ease.getRatio((dur - this._time) / dur) : 0)), this._time > dur ? this._time = dur : this._time < 0 && (this._time = 0)), this._easeType && !ease ? (r = this._time / dur, v = this._easeType, l = this._easePower, (1 === v || 3 === v && r >= .5) && (r = 1 - r), 3 ===
                            v && (r = r * 2), 1 === l ? r = r * r : 2 === l ? r = r * (r * r) : 3 === l ? r = r * (r * r * r) : 4 === l && (r = r * (r * r * r * r)), 1 === v ? this.ratio = 1 - r : 2 === v ? this.ratio = r : this._time / dur < .5 ? this.ratio = r / 2 : this.ratio = 1 - r / 2) : ease || (this.ratio = this._ease.getRatio(this._time / dur))), prevTime === this._time && !force && prevCycle === this._cycle) {
                            return void(prevTotalTime !== this._totalTime && this._onUpdate && (suppressEvents || this._callback("onUpdate")));
                        }
                        if (!this._initted) {
                            if (this._init(), !this._initted || this._gc) {
                                return;
                            }
                            if (!force && this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration)) {
                                return this._time = prevTime, this._totalTime = prevTotalTime, this._rawPrevTime = prevRawPrevTime, this._cycle = prevCycle, TweenLiteInternals.lazyTweens.push(this), void(this._lazy = [time, suppressEvents]);
                            }
                            if (!this._time || isComplete || ease) {
                                if (isComplete && this._ease._calcEnd && !ease) {
                                    this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1);
                                }
                            } else {
                                this.ratio = this._ease.getRatio(this._time / dur);
                            }
                        }
                        if (false !== this._lazy) {
                            /** @type {boolean} */
                            this._lazy = false;
                        }
                        if (!this._active) {
                            if (!this._paused && this._time !== prevTime && time >= 0) {
                                /** @type {boolean} */
                                this._active = true;
                            }
                        }
                        if (0 === prevTotalTime) {
                            if (2 === this._initted && time > 0) {
                                this._init();
                            }
                            if (this._startAt) {
                                if (time >= 0) {
                                    this._startAt.render(time, true, force);
                                } else {
                                    if (!callback) {
                                        /** @type {string} */
                                        callback = "_dummyGS";
                                    }
                                }
                            }
                            if (this.vars.onStart) {
                                if (!(0 === this._totalTime && 0 !== dur || suppressEvents)) {
                                    this._callback("onStart");
                                }
                            }
                        }
                        pt = this._firstPT;
                        for (; pt;) {
                            if (pt.f) {
                                pt.t[pt.p](pt.c * this.ratio + pt.s);
                            } else {
                                pt.t[pt.p] = pt.c * this.ratio + pt.s;
                            }
                            pt = pt._next;
                        }
                        if (this._onUpdate) {
                            if (time < 0 && this._startAt && this._startTime) {
                                this._startAt.render(time, true, force);
                            }
                            if (!suppressEvents) {
                                if (this._totalTime !== prevTotalTime || callback) {
                                    this._callback("onUpdate");
                                }
                            }
                        }
                        if (this._cycle !== prevCycle) {
                            if (!(suppressEvents || this._gc)) {
                                if (this.vars.onRepeat) {
                                    this._callback("onRepeat");
                                }
                            }
                        }
                        if (callback) {
                            if (!(this._gc && !force)) {
                                if (time < 0 && this._startAt && !this._onUpdate && this._startTime) {
                                    this._startAt.render(time, true, force);
                                }
                                if (isComplete) {
                                    if (this._timeline.autoRemoveChildren) {
                                        this._enabled(false, false);
                                    }
                                    /** @type {boolean} */
                                    this._active = false;
                                }
                                if (!suppressEvents && this.vars[callback]) {
                                    this._callback(callback);
                                }
                                if (0 === dur && 1e-10 === this._rawPrevTime && 1e-10 !== rawPrevTime) {
                                    /** @type {number} */
                                    this._rawPrevTime = 0;
                                }
                            }
                        }
                    };
                    /**
                     * @param {!Object} target
                     * @param {number} duration
                     * @param {!Object} vars
                     * @return {?}
                     */
                    TweenLite.to = function (target, duration, vars) {
                        return new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {!Function} duration
                     * @param {!Function} vars
                     * @return {?}
                     */
                    TweenLite.from = function (target, duration, vars) {
                        return vars.runBackwards = true, vars.immediateRender = 0 != vars.immediateRender, new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {number} duration
                     * @param {number} time
                     * @param {!Object} v
                     * @return {?}
                     */
                    TweenLite.fromTo = function (target, duration, time, v) {
                        return v.startAt = time, v.immediateRender = 0 != v.immediateRender && 0 != time.immediateRender, new TweenLite(target, duration, v);
                    };
                    /** @type {function(!Array, !Object, !Object, number, !Function, !Object, string): ?} */
                    TweenLite.staggerTo = TweenLite.allTo = function (target, duration, data, a, s, err, type) {
                        a = a || 0;
                        var cellsLength;
                        var copy;
                        var i;
                        var p;
                        /** @type {number} */
                        var sym32String = 0;
                        /** @type {!Array} */
                        var conf_shortcuts_icon = [];
                        /**
                         * @return {undefined}
                         */
                        var _complete = function () {
                            if (data.onComplete) {
                                data.onComplete.apply(data.onCompleteScope || this, arguments);
                            }
                            s.apply(type || data.callbackScope || this, err || i);
                        };
                        var e = data.cycle;
                        var t = data.startAt && data.startAt.cycle;
                        if (!_isArray(target)) {
                            if ("string" == typeof target) {
                                target = e.selector(target) || target;
                            }
                            if (_isSelector(target)) {
                                target = selector(target);
                            }
                        }
                        target = target || [];
                        if (a < 0) {
                            target = selector(target);
                            target.reverse();
                            /** @type {number} */
                            a = a * -1;
                        }
                        /** @type {number} */
                        cellsLength = target.length - 1;
                        /** @type {number} */
                        i = 0;
                        for (; i <= cellsLength; i++) {
                            copy = {};
                            for (p in data) {
                                copy[p] = data[p];
                            }
                            if (e && (_applyCycle(copy, target, i), null != copy.duration && (duration = copy.duration, delete copy.duration)), t) {
                                t = copy.startAt = {};
                                for (p in data.startAt) {
                                    t[p] = data.startAt[p];
                                }
                                _applyCycle(copy.startAt, target, i);
                            }
                            copy.delay = sym32String + (copy.delay || 0);
                            if (i === cellsLength && s) {
                                /** @type {function(): undefined} */
                                copy.onComplete = _complete;
                            }
                            conf_shortcuts_icon[i] = new TweenLite(target[i], duration, copy);
                            sym32String = sym32String + a;
                        }
                        return conf_shortcuts_icon;
                    };
                    /** @type {function(!Array, undefined, !Object, undefined, undefined, undefined, string): ?} */
                    TweenLite.staggerFrom = TweenLite.allFrom = function (targets, duration, vars, scope, id, deep, callback) {
                        return vars.runBackwards = true, vars.immediateRender = 0 != vars.immediateRender, TweenLite.staggerTo(targets, duration, vars, scope, id, deep, callback);
                    };
                    /** @type {function(!Array, undefined, number, !Object, undefined, undefined, undefined, string): ?} */
                    TweenLite.staggerFromTo = TweenLite.allFromTo = function (targets, duration, fromVars, vars, scope, position, onCompleteAll, onCompleteAllParams) {
                        return vars.startAt = fromVars, vars.immediateRender = 0 != vars.immediateRender && 0 != fromVars.immediateRender, TweenLite.staggerTo(targets, duration, vars, scope, position, onCompleteAll, onCompleteAllParams);
                    };
                    /**
                     * @param {number} delay
                     * @param {string} callback
                     * @param {!Object} params
                     * @param {string} scope
                     * @param {?} useFrames
                     * @return {?}
                     */
                    TweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {
                        return new TweenLite(callback, 0, {
                            delay: delay,
                            onComplete: callback,
                            onCompleteParams: params,
                            callbackScope: scope,
                            onReverseComplete: callback,
                            onReverseCompleteParams: params,
                            immediateRender: false,
                            useFrames: useFrames,
                            overwrite: 0
                        });
                    };
                    /**
                     * @param {!Object} type
                     * @param {string} name
                     * @return {?}
                     */
                    TweenLite.set = function (type, name) {
                        return new TweenLite(type, 0, name);
                    };
                    /**
                     * @param {!Object} target
                     * @return {?}
                     */
                    TweenLite.isTweening = function (target) {
                        return e.getTweensOf(target, true).length > 0;
                    };
                    /**
                     * @param {?} self
                     * @param {string} name
                     * @return {?}
                     */
                    var f = function (self, name) {
                        /** @type {!Array} */
                        var result = [];
                        /** @type {number} */
                        var i = 0;
                        var t = self._first;
                        for (; t;) {
                            if (t instanceof e) {
                                result[i++] = t;
                            } else {
                                if (name) {
                                    result[i++] = t;
                                }
                                /** @type {!Array<?>} */
                                result = result.concat(f(t, name));
                                /** @type {number} */
                                i = result.length;
                            }
                            t = t._next;
                        }
                        return result;
                    };
                    /** @type {function(string): ?} */
                    var get = TweenLite.getAllTweens = function (b) {
                        return f(Animation._rootTimeline, b).concat(f(Animation._rootFramesTimeline, b));
                    };
                    /**
                     * @param {?} system
                     * @param {string} signalSource
                     * @param {string} signalName
                     * @param {string} callback
                     * @return {undefined}
                     */
                    TweenLite.killAll = function (system, signalSource, signalName, callback) {
                        if (null == signalSource) {
                            /** @type {boolean} */
                            signalSource = true;
                        }
                        if (null == signalName) {
                            /** @type {boolean} */
                            signalName = true;
                        }
                        var o;
                        var tween;
                        var i;
                        var queue = get(0 != callback);
                        var length = queue.length;
                        var currentValid = signalSource && signalName && callback;
                        /** @type {number} */
                        i = 0;
                        for (; i < length; i++) {
                            tween = queue[i];
                            if (currentValid || tween instanceof type || (o = tween.target === tween.vars.onComplete) && signalName || signalSource && !o) {
                                if (system) {
                                    tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
                                } else {
                                    tween._enabled(false, false);
                                }
                            }
                        }
                    };
                    /**
                     * @param {!Object} target
                     * @param {?} value
                     * @return {undefined}
                     */
                    TweenLite.killChildTweensOf = function (target, value) {
                        if (null != target) {
                            var tweens;
                            var eventTarget;
                            var p;
                            var i;
                            var n;
                            var _tweenLookup = TweenLiteInternals.tweenLookup;
                            if ("string" == typeof target && (target = e.selector(target) || target), _isSelector(target) && (target = selector(target)), _isArray(target)) {
                                i = target.length;
                                for (; --i > -1;) {
                                    TweenLite.killChildTweensOf(target[i], value);
                                }
                            } else {
                                /** @type {!Array} */
                                tweens = [];
                                for (p in _tweenLookup) {
                                    eventTarget = _tweenLookup[p].target.parentNode;
                                    for (; eventTarget;) {
                                        if (eventTarget === target) {
                                            /** @type {!Array<?>} */
                                            tweens = tweens.concat(_tweenLookup[p].tweens);
                                        }
                                        eventTarget = eventTarget.parentNode;
                                    }
                                }
                                /** @type {number} */
                                n = tweens.length;
                                /** @type {number} */
                                i = 0;
                                for (; i < n; i++) {
                                    if (value) {
                                        tweens[i].totalTime(tweens[i].totalDuration());
                                    }
                                    tweens[i]._enabled(false, false);
                                }
                            }
                        }
                    };
                    /**
                     * @param {boolean} value
                     * @param {boolean} method
                     * @param {boolean} options
                     * @param {boolean} id
                     * @return {undefined}
                     */
                    var parse = function (value, method, options, id) {
                        /** @type {boolean} */
                        method = false !== method;
                        /** @type {boolean} */
                        options = false !== options;
                        /** @type {boolean} */
                        id = false !== id;
                        var oldOptions;
                        var obj;
                        var p = get(id);
                        /** @type {boolean} */
                        var isBrowser = method && options && id;
                        var m = p.length;
                        for (; --m > -1;) {
                            obj = p[m];
                            if (isBrowser || obj instanceof type || (oldOptions = obj.target === obj.vars.onComplete) && options || method && !oldOptions) {
                                obj.paused(value);
                            }
                        }
                    };
                    return TweenLite.pauseAll = function (callback, context, values) {
                        parse(true, callback, context, values);
                    }, TweenLite.resumeAll = function (debug, options, values) {
                        parse(false, debug, options, values);
                    }, TweenLite.globalTimeScale = function (zoom) {
                        var self = Animation._rootTimeline;
                        var time = e.ticker.time;
                        return arguments.length ? (zoom = zoom || 1e-10, self._startTime = time - (time - self._startTime) * self._timeScale / zoom, self = Animation._rootFramesTimeline, time = e.ticker.frame, self._startTime = time - (time - self._startTime) * self._timeScale / zoom, self._timeScale = Animation._rootTimeline._timeScale = zoom, zoom) : self._timeScale;
                    }, p.progress = function (value, suppressEvents) {
                        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 != (1 & this._cycle) ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents) : this._time / this.duration();
                    }, p.totalProgress = function (value, suppressEvents) {
                        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this._totalTime / this.totalDuration();
                    }, p.time = function (value, name) {
                        return arguments.length ? (this._dirty && this.totalDuration(), value > this._duration && (value = this._duration), this._yoyo && 0 != (1 & this._cycle) ? value = this._duration - value + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (value = value + this._cycle * (this._duration + this._repeatDelay)), this.totalTime(value, name)) : this._time;
                    }, p.duration = function (value) {
                        return arguments.length ? Animation.prototype.duration.call(this, value) : this._duration;
                    }, p.totalDuration = function (value) {
                        return arguments.length ? -1 === this._repeat ? this : this.duration((value - this._repeat * this._repeatDelay) / (this._repeat + 1)) : (this._dirty && (this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat, this._dirty = false), this._totalDuration);
                    }, p.repeat = function (value) {
                        return arguments.length ? (this._repeat = value, this._uncache(true)) : this._repeat;
                    }, p.repeatDelay = function (value) {
                        return arguments.length ? (this._repeatDelay = value, this._uncache(true)) : this._repeatDelay;
                    }, p.yoyo = function (value) {
                        return arguments.length ? (this._yoyo = value, this) : this._yoyo;
                    }, TweenLite;
                }, true);
                options._gsDefine("TimelineLite", ["core.Animation", "core.SimpleTimeline", "TweenLite"], function (Animation, SimpleTimeline, TweenLite) {
                    /**
                     * @param {!Object} type
                     * @return {undefined}
                     */
                    var TimelineLite = function (type) {
                        SimpleTimeline.call(this, type);
                        this._labels = {};
                        /** @type {boolean} */
                        this.autoRemoveChildren = true === this.vars.autoRemoveChildren;
                        /** @type {boolean} */
                        this.smoothChildTiming = true === this.vars.smoothChildTiming;
                        /** @type {boolean} */
                        this._sortChildren = true;
                        this._onUpdate = this.vars.onUpdate;
                        var val;
                        var p;
                        var v = this.vars;
                        for (p in v) {
                            val = v[p];
                            if (_isArray(val) && -1 !== val.join("").indexOf("{self}")) {
                                v[p] = this._swapSelfInParams(val);
                            }
                        }
                        if (_isArray(v.tweens)) {
                            this.add(v.tweens, 0, v.align, v.stagger);
                        }
                    };
                    var TweenLiteInternals = TweenLite._internals;
                    var _internals = TimelineLite._internals = {};
                    var _isSelector = TweenLiteInternals.isSelector;
                    var _isArray = TweenLiteInternals.isArray;
                    var _lazyTweens = TweenLiteInternals.lazyTweens;
                    var _lazyRender = TweenLiteInternals.lazyRender;
                    var _globals = options._gsDefine.globals;
                    /**
                     * @param {!Object} opts
                     * @return {?}
                     */
                    var _copy = function (opts) {
                        var p;
                        var o = {};
                        for (p in opts) {
                            o[p] = opts[p];
                        }
                        return o;
                    };
                    /**
                     * @param {!Object} vars
                     * @param {!Array} targets
                     * @param {number} i
                     * @return {undefined}
                     */
                    var _applyCycle = function (vars, targets, i) {
                        var field;
                        var val;
                        var cycle = vars.cycle;
                        for (field in cycle) {
                            val = cycle[field];
                            vars[field] = "function" == typeof val ? val(i, targets[i]) : val[i % val.length];
                        }
                        delete vars.cycle;
                    };
                    /** @type {function(): undefined} */
                    var _pauseCallback = _internals.pauseCallback = function () {
                    };
                    /**
                     * @param {!Array} a
                     * @return {?}
                     */
                    var _slice = function (a) {
                        var i;
                        /** @type {!Array} */
                        var b = [];
                        var n = a.length;
                        /** @type {number} */
                        i = 0;
                        for (; i !== n; b.push(a[i++])) {
                        }
                        return b;
                    };
                    var p = TimelineLite.prototype = new SimpleTimeline;
                    return TimelineLite.version = "1.20.3", p.constructor = TimelineLite, p.kill()._gc = p._forcingPlayhead = p._hasPause = false, p.to = function (target, duration, vars, position) {
                        var Engine = vars.repeat && _globals.TweenMax || TweenLite;
                        return duration ? this.add(new Engine(target, duration, vars), position) : this.set(target, vars, position);
                    }, p.from = function (val, duration, vars, position) {
                        return this.add((vars.repeat && _globals.TweenMax || TweenLite).from(val, duration, vars), position);
                    }, p.fromTo = function (target, duration, value, obj, position) {
                        var Engine = obj.repeat && _globals.TweenMax || TweenLite;
                        return duration ? this.add(Engine.fromTo(target, duration, value, obj), position) : this.set(target, obj, position);
                    }, p.staggerTo = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        var copy;
                        var i;
                        var tl = new TimelineLite({
                            onComplete: onCompleteAll,
                            onCompleteParams: onCompleteAllParams,
                            callbackScope: onCompleteAllScope,
                            smoothChildTiming: this.smoothChildTiming
                        });
                        var cycle = vars.cycle;
                        if ("string" == typeof targets) {
                            targets = TweenLite.selector(targets) || targets;
                        }
                        targets = targets || [];
                        if (_isSelector(targets)) {
                            targets = _slice(targets);
                        }
                        stagger = stagger || 0;
                        if (stagger < 0) {
                            targets = _slice(targets);
                            targets.reverse();
                            /** @type {number} */
                            stagger = stagger * -1;
                        }
                        /** @type {number} */
                        i = 0;
                        for (; i < targets.length; i++) {
                            copy = _copy(vars);
                            if (copy.startAt) {
                                copy.startAt = _copy(copy.startAt);
                                if (copy.startAt.cycle) {
                                    _applyCycle(copy.startAt, targets, i);
                                }
                            }
                            if (cycle) {
                                _applyCycle(copy, targets, i);
                                if (null != copy.duration) {
                                    duration = copy.duration;
                                    delete copy.duration;
                                }
                            }
                            tl.to(targets[i], duration, copy, i * stagger);
                        }
                        return this.add(tl, position);
                    }, p.staggerFrom = function (targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        return vars.immediateRender = 0 != vars.immediateRender, vars.runBackwards = true, this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    }, p.staggerFromTo = function (targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                        return toVars.startAt = fromVars, toVars.immediateRender = 0 != toVars.immediateRender && 0 != fromVars.immediateRender, this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
                    }, p.call = function (value, obj, name, target) {
                        return this.add(TweenLite.delayedCall(0, value, obj, name), target);
                    }, p.set = function (type, name, position) {
                        return position = this._parseTimeOrLabel(position, 0, true), null == name.immediateRender && (name.immediateRender = position === this._time && !this._paused), this.add(new TweenLite(type, 0, name), position);
                    }, TimelineLite.exportRoot = function (vars, ignoreDelayedCalls) {
                        vars = vars || {};
                        if (null == vars.smoothChildTiming) {
                            /** @type {boolean} */
                            vars.smoothChildTiming = true;
                        }
                        var r;
                        var offset;
                        var tween;
                        var next;
                        var tl = new TimelineLite(vars);
                        var root = tl._timeline;
                        if (null == ignoreDelayedCalls) {
                            /** @type {boolean} */
                            ignoreDelayedCalls = true;
                        }
                        root._remove(tl, true);
                        /** @type {number} */
                        tl._startTime = 0;
                        tl._rawPrevTime = tl._time = tl._totalTime = root._time;
                        tween = root._first;
                        for (; tween;) {
                            next = tween._next;
                            if (!(ignoreDelayedCalls && tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                                /** @type {number} */
                                offset = tween._startTime - tween._delay;
                                if (offset < 0) {
                                    /** @type {number} */
                                    r = 1;
                                }
                                tl.add(tween, offset);
                            }
                            tween = next;
                        }
                        return root.add(tl, 0), r && tl.totalDuration(), tl;
                    }, p.add = function (value, position, type, mode) {
                        var i;
                        var vLen;
                        var j;
                        var child;
                        var tl;
                        var beforeRawTime;
                        if ("number" != typeof position && (position = this._parseTimeOrLabel(position, 0, true, value)), !(value instanceof Animation)) {
                            if (value instanceof Array || value && value.push && _isArray(value)) {
                                type = type || "normal";
                                mode = mode || 0;
                                i = position;
                                vLen = value.length;
                                /** @type {number} */
                                j = 0;
                                for (; j < vLen; j++) {
                                    if (_isArray(child = value[j])) {
                                        child = new TimelineLite({
                                            tweens: child
                                        });
                                    }
                                    this.add(child, i);
                                    if ("string" != typeof child && "function" != typeof child) {
                                        if ("sequence" === type) {
                                            i = child._startTime + child.totalDuration() / child._timeScale;
                                        } else {
                                            if ("start" === type) {
                                                child._startTime -= child.delay();
                                            }
                                        }
                                    }
                                    i = i + mode;
                                }
                                return this._uncache(true);
                            }
                            if ("string" == typeof value) {
                                return this.addLabel(value, position);
                            }
                            if ("function" != typeof value) {
                                throw "Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.";
                            }
                            value = TweenLite.delayedCall(0, value);
                        }
                        if (SimpleTimeline.prototype.add.call(this, value, position), value._time && value.render((this.rawTime() - value._startTime) * value._timeScale, false, false), (this._gc || this._time === this._duration) && !this._paused && this._duration < this.duration()) {
                            tl = this;
                            /** @type {boolean} */
                            beforeRawTime = tl.rawTime() > value._startTime;
                            for (; tl._timeline;) {
                                if (beforeRawTime && tl._timeline.smoothChildTiming) {
                                    tl.totalTime(tl._totalTime, true);
                                } else {
                                    if (tl._gc) {
                                        tl._enabled(true, false);
                                    }
                                }
                                tl = tl._timeline;
                            }
                        }
                        return this;
                    }, p.remove = function (value) {
                        if (value instanceof Animation) {
                            this._remove(value, false);
                            var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline;
                            return value._startTime = (value._paused ? value._pauseTime : tl._time) - (value._reversed ? value.totalDuration() - value._totalTime : value._totalTime) / value._timeScale, this;
                        }
                        if (value instanceof Array || value && value.push && _isArray(value)) {
                            var i = value.length;
                            for (; --i > -1;) {
                                this.remove(value[i]);
                            }
                            return this;
                        }
                        return "string" == typeof value ? this.removeLabel(value) : this.kill(null, value);
                    }, p._remove = function (name, last) {
                        return SimpleTimeline.prototype._remove.call(this, name, last), this._last ? this._time > this.duration() && (this._time = this._duration, this._totalTime = this._totalDuration) : this._time = this._totalTime = this._duration = this._totalDuration = 0, this;
                    }, p.append = function (value, offsetOrLabel) {
                        return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
                    }, p.insert = p.insertMultiple = function (align, stagger, position, cb) {
                        return this.add(align, stagger || 0, position, cb);
                    }, p.appendMultiple = function (tweens, offsetOrLabel, align, stagger) {
                        return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
                    }, p.addLabel = function (label, position) {
                        return this._labels[label] = this._parseTimeOrLabel(position), this;
                    }, p.addPause = function (position, callback, params, scope) {
                        var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
                        return t.vars.onComplete = t.vars.onReverseComplete = callback, t.data = "isPause", this._hasPause = true, this.add(t, position);
                    }, p.removeLabel = function (key) {
                        return delete this._labels[key], this;
                    }, p.getLabelTime = function (label) {
                        return null != this._labels[label] ? this._labels[label] : -1;
                    }, p._parseTimeOrLabel = function (timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
                        var str;
                        var i;
                        if (ignore instanceof Animation && ignore.timeline === this) {
                            this.remove(ignore);
                        } else {
                            if (ignore && (ignore instanceof Array || ignore.push && _isArray(ignore))) {
                                i = ignore.length;
                                for (; --i > -1;) {
                                    if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
                                        this.remove(ignore[i]);
                                    }
                                }
                            }
                        }
                        if (str = "number" != typeof timeOrLabel || offsetOrLabel ? this.duration() > 99999999999 ? this.recent().endTime(false) : this._duration : 0, "string" == typeof offsetOrLabel) {
                            return this._parseTimeOrLabel(offsetOrLabel, appendIfAbsent && "number" == typeof timeOrLabel && null == this._labels[offsetOrLabel] ? timeOrLabel - str : 0, appendIfAbsent);
                        }
                        if (offsetOrLabel = offsetOrLabel || 0, "string" != typeof timeOrLabel || !isNaN(timeOrLabel) && null == this._labels[timeOrLabel]) {
                            if (null == timeOrLabel) {
                                timeOrLabel = str;
                            }
                        } else {
                            if (-1 === (i = timeOrLabel.indexOf("="))) {
                                return null == this._labels[timeOrLabel] ? appendIfAbsent ? this._labels[timeOrLabel] = str + offsetOrLabel : offsetOrLabel : this._labels[timeOrLabel] + offsetOrLabel;
                            }
                            /** @type {number} */
                            offsetOrLabel = parseInt(timeOrLabel.charAt(i - 1) + "1", 10) * Number(timeOrLabel.substr(i + 1));
                            timeOrLabel = i > 1 ? this._parseTimeOrLabel(timeOrLabel.substr(0, i - 1), 0, appendIfAbsent) : str;
                        }
                        return Number(timeOrLabel) + offsetOrLabel;
                    }, p.seek = function (position, suppressEvents) {
                        return this.totalTime("number" == typeof position ? position : this._parseTimeOrLabel(position), false !== suppressEvents);
                    }, p.stop = function () {
                        return this.paused(true);
                    }, p.gotoAndPlay = function (position, suppressEvents) {
                        return this.play(position, suppressEvents);
                    }, p.gotoAndStop = function (position, suppressEvents) {
                        return this.pause(position, suppressEvents);
                    }, p.render = function (time, suppressEvents, force) {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        var tween;
                        var result;
                        var next;
                        var callback;
                        var val;
                        var pauseTween;
                        var curTime;
                        var prevTime = this._time;
                        var totalDur = this._dirty ? this.totalDuration() : this._totalDuration;
                        var value = this._startTime;
                        var formattedValue = this._timeScale;
                        var prevPaused = this._paused;
                        if (prevTime !== this._time && (time = time + (this._time - prevTime)), time >= totalDur - 1e-7 && time >= 0) {
                            this._totalTime = this._time = totalDur;
                            if (!(this._reversed || this._hasPausedChild())) {
                                /** @type {boolean} */
                                result = true;
                                /** @type {string} */
                                callback = "onComplete";
                                /** @type {boolean} */
                                val = !!this._timeline.autoRemoveChildren;
                                if (0 === this._duration && (time <= 0 && time >= -1e-7 || this._rawPrevTime < 0 || 1e-10 === this._rawPrevTime) && this._rawPrevTime !== time && this._first) {
                                    /** @type {boolean} */
                                    val = true;
                                    if (this._rawPrevTime > 1e-10) {
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    }
                                }
                            }
                            this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : 1e-10;
                            time = totalDur + 1e-4;
                        } else {
                            if (time < 1e-7) {
                                if (this._totalTime = this._time = 0, (0 !== prevTime || 0 === this._duration && 1e-10 !== this._rawPrevTime && (this._rawPrevTime > 0 || time < 0 && this._rawPrevTime >= 0)) && (callback = "onReverseComplete", result = this._reversed), time < 0) {
                                    /** @type {boolean} */
                                    this._active = false;
                                    if (this._timeline.autoRemoveChildren && this._reversed) {
                                        /** @type {boolean} */
                                        val = result = true;
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    } else {
                                        if (this._rawPrevTime >= 0 && this._first) {
                                            /** @type {boolean} */
                                            val = true;
                                        }
                                    }
                                    /** @type {number} */
                                    this._rawPrevTime = time;
                                } else {
                                    if (this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : 1e-10, 0 === time && result) {
                                        tween = this._first;
                                        for (; tween && 0 === tween._startTime;) {
                                            if (!tween._duration) {
                                                /** @type {boolean} */
                                                result = false;
                                            }
                                            tween = tween._next;
                                        }
                                    }
                                    /** @type {number} */
                                    time = 0;
                                    if (!this._initted) {
                                        /** @type {boolean} */
                                        val = true;
                                    }
                                }
                            } else {
                                if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                                    if (time >= prevTime) {
                                        tween = this._first;
                                        for (; tween && tween._startTime <= time && !pauseTween;) {
                                            if (!(tween._duration || "isPause" !== tween.data || tween.ratio || 0 === tween._startTime && 0 === this._rawPrevTime)) {
                                                pauseTween = tween;
                                            }
                                            tween = tween._next;
                                        }
                                    } else {
                                        tween = this._last;
                                        for (; tween && tween._startTime >= time && !pauseTween;) {
                                            if (!tween._duration) {
                                                if ("isPause" === tween.data && tween._rawPrevTime > 0) {
                                                    pauseTween = tween;
                                                }
                                            }
                                            tween = tween._prev;
                                        }
                                    }
                                    if (pauseTween) {
                                        this._time = time = pauseTween._startTime;
                                        this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
                                    }
                                }
                                this._totalTime = this._time = this._rawPrevTime = time;
                            }
                        }
                        if (this._time !== prevTime && this._first || force || val || pauseTween) {
                            if (this._initted || (this._initted = true), this._active || !this._paused && this._time !== prevTime && time > 0 && (this._active = true), 0 === prevTime && this.vars.onStart && (0 === this._time && this._duration || suppressEvents || this._callback("onStart")), (curTime = this._time) >= prevTime) {
                                tween = this._first;
                                for (; tween && (next = tween._next, curTime === this._time && (!this._paused || prevPaused));) {
                                    if (tween._active || tween._startTime <= curTime && !tween._paused && !tween._gc) {
                                        if (pauseTween === tween) {
                                            this.pause();
                                        }
                                        if (tween._reversed) {
                                            tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                        } else {
                                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                        }
                                    }
                                    tween = next;
                                }
                            } else {
                                tween = this._last;
                                for (; tween && (next = tween._prev, curTime === this._time && (!this._paused || prevPaused));) {
                                    if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                                        if (pauseTween === tween) {
                                            pauseTween = tween._prev;
                                            for (; pauseTween && pauseTween.endTime() > this._time;) {
                                                pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                                                pauseTween = pauseTween._prev;
                                            }
                                            /** @type {null} */
                                            pauseTween = null;
                                            this.pause();
                                        }
                                        if (tween._reversed) {
                                            tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                        } else {
                                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                        }
                                    }
                                    tween = next;
                                }
                            }
                            if (this._onUpdate) {
                                if (!suppressEvents) {
                                    if (_lazyTweens.length) {
                                        _lazyRender();
                                    }
                                    this._callback("onUpdate");
                                }
                            }
                            if (callback) {
                                if (!(this._gc || value !== this._startTime && formattedValue === this._timeScale)) {
                                    if (0 === this._time || totalDur >= this.totalDuration()) {
                                        if (result) {
                                            if (_lazyTweens.length) {
                                                _lazyRender();
                                            }
                                            if (this._timeline.autoRemoveChildren) {
                                                this._enabled(false, false);
                                            }
                                            /** @type {boolean} */
                                            this._active = false;
                                        }
                                        if (!suppressEvents && this.vars[callback]) {
                                            this._callback(callback);
                                        }
                                    }
                                }
                            }
                        }
                    }, p._hasPausedChild = function () {
                        var tween = this._first;
                        for (; tween;) {
                            if (tween._paused || tween instanceof TimelineLite && tween._hasPausedChild()) {
                                return true;
                            }
                            tween = tween._next;
                        }
                        return false;
                    }, p.getChildren = function (nested, tweens, timelines, ignoreBeforeTime) {
                        ignoreBeforeTime = ignoreBeforeTime || -9999999999;
                        /** @type {!Array} */
                        var a = [];
                        var tween = this._first;
                        /** @type {number} */
                        var cnt = 0;
                        for (; tween;) {
                            if (!(tween._startTime < ignoreBeforeTime)) {
                                if (tween instanceof TweenLite) {
                                    if (false !== tweens) {
                                        a[cnt++] = tween;
                                    }
                                } else {
                                    if (false !== timelines) {
                                        a[cnt++] = tween;
                                    }
                                    if (false !== nested) {
                                        /** @type {!Array<?>} */
                                        a = a.concat(tween.getChildren(true, tweens, timelines));
                                        /** @type {number} */
                                        cnt = a.length;
                                    }
                                }
                            }
                            tween = tween._next;
                        }
                        return a;
                    }, p.getTweensOf = function (target, onlyActive) {
                        var tweens;
                        var i;
                        var disabled = this._gc;
                        /** @type {!Array} */
                        var a = [];
                        /** @type {number} */
                        var cnt = 0;
                        if (disabled) {
                            this._enabled(true, true);
                        }
                        tweens = TweenLite.getTweensOf(target);
                        i = tweens.length;
                        for (; --i > -1;) {
                            if (tweens[i].timeline === this || onlyActive && this._contains(tweens[i])) {
                                a[cnt++] = tweens[i];
                            }
                        }
                        return disabled && this._enabled(false, true), a;
                    }, p.recent = function () {
                        return this._recent;
                    }, p._contains = function (tween) {
                        var tl = tween.timeline;
                        for (; tl;) {
                            if (tl === this) {
                                return true;
                            }
                            tl = tl.timeline;
                        }
                        return false;
                    }, p.shiftChildren = function (amount, adjustLabels, ignoreBeforeTime) {
                        ignoreBeforeTime = ignoreBeforeTime || 0;
                        var p;
                        var tween = this._first;
                        var labels = this._labels;
                        for (; tween;) {
                            if (tween._startTime >= ignoreBeforeTime) {
                                tween._startTime += amount;
                            }
                            tween = tween._next;
                        }
                        if (adjustLabels) {
                            for (p in labels) {
                                if (labels[p] >= ignoreBeforeTime) {
                                    labels[p] += amount;
                                }
                            }
                        }
                        return this._uncache(true);
                    }, p._kill = function (vars, target) {
                        if (!vars && !target) {
                            return this._enabled(false, false);
                        }
                        var tweens = target ? this.getTweensOf(target) : this.getChildren(true, true, false);
                        var i = tweens.length;
                        /** @type {boolean} */
                        var changed = false;
                        for (; --i > -1;) {
                            if (tweens[i]._kill(vars, target)) {
                                /** @type {boolean} */
                                changed = true;
                            }
                        }
                        return changed;
                    }, p.clear = function (nbToClear) {
                        var tweens = this.getChildren(false, true, true);
                        var i = tweens.length;
                        /** @type {number} */
                        this._time = this._totalTime = 0;
                        for (; --i > -1;) {
                            tweens[i]._enabled(false, false);
                        }
                        return false !== nbToClear && (this._labels = {}), this._uncache(true);
                    }, p.invalidate = function () {
                        var tween = this._first;
                        for (; tween;) {
                            tween.invalidate();
                            tween = tween._next;
                        }
                        return Animation.prototype.invalidate.call(this);
                    }, p._enabled = function (enabled, node) {
                        if (enabled === this._gc) {
                            var tween = this._first;
                            for (; tween;) {
                                tween._enabled(enabled, true);
                                tween = tween._next;
                            }
                        }
                        return SimpleTimeline.prototype._enabled.call(this, enabled, node);
                    }, p.totalTime = function (tree, scope, forceUpdate) {
                        /** @type {boolean} */
                        this._forcingPlayhead = true;
                        var cssobj = Animation.prototype.totalTime.apply(this, arguments);
                        return this._forcingPlayhead = false, cssobj;
                    }, p.duration = function (value) {
                        return arguments.length ? (0 !== this.duration() && 0 !== value && this.timeScale(this._duration / value), this) : (this._dirty && this.totalDuration(), this._duration);
                    }, p.totalDuration = function (value) {
                        if (!arguments.length) {
                            if (this._dirty) {
                                var next;
                                var endSide;
                                /** @type {number} */
                                var max = 0;
                                var tween = this._last;
                                /** @type {number} */
                                var prevStart = 999999999999;
                                for (; tween;) {
                                    next = tween._prev;
                                    if (tween._dirty) {
                                        tween.totalDuration();
                                    }
                                    if (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) {
                                        /** @type {number} */
                                        this._calculatingDuration = 1;
                                        this.add(tween, tween._startTime - tween._delay);
                                        /** @type {number} */
                                        this._calculatingDuration = 0;
                                    } else {
                                        prevStart = tween._startTime;
                                    }
                                    if (tween._startTime < 0 && !tween._paused) {
                                        /** @type {number} */
                                        max = max - tween._startTime;
                                        if (this._timeline.smoothChildTiming) {
                                            this._startTime += tween._startTime / this._timeScale;
                                            this._time -= tween._startTime;
                                            this._totalTime -= tween._startTime;
                                            this._rawPrevTime -= tween._startTime;
                                        }
                                        this.shiftChildren(-tween._startTime, false, -9999999999);
                                        /** @type {number} */
                                        prevStart = 0;
                                    }
                                    endSide = tween._startTime + tween._totalDuration / tween._timeScale;
                                    if (endSide > max) {
                                        max = endSide;
                                    }
                                    tween = next;
                                }
                                this._duration = this._totalDuration = max;
                                /** @type {boolean} */
                                this._dirty = false;
                            }
                            return this._totalDuration;
                        }
                        return value && this.totalDuration() ? this.timeScale(this._totalDuration / value) : this;
                    }, p.paused = function (data) {
                        if (!data) {
                            var tween = this._first;
                            var time = this._time;
                            for (; tween;) {
                                if (tween._startTime === time && "isPause" === tween.data) {
                                    /** @type {number} */
                                    tween._rawPrevTime = 0;
                                }
                                tween = tween._next;
                            }
                        }
                        return Animation.prototype.paused.apply(this, arguments);
                    }, p.usesFrames = function () {
                        var tl = this._timeline;
                        for (; tl._timeline;) {
                            tl = tl._timeline;
                        }
                        return tl === Animation._rootFramesTimeline;
                    }, p.rawTime = function (wrapRepeats) {
                        return wrapRepeats && (this._paused || this._repeat && this.time() > 0 && this.totalProgress() < 1) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
                    }, TimelineLite;
                }, true);
                options._gsDefine("TimelineMax", ["TimelineLite", "TweenLite", "easing.Ease"], function (TimelineLite, TweenLite, i) {
                    /**
                     * @param {!Object} type
                     * @return {undefined}
                     */
                    var TimelineMax = function (type) {
                        TimelineLite.call(this, type);
                        this._repeat = this.vars.repeat || 0;
                        this._repeatDelay = this.vars.repeatDelay || 0;
                        /** @type {number} */
                        this._cycle = 0;
                        /** @type {boolean} */
                        this._yoyo = true === this.vars.yoyo;
                        /** @type {boolean} */
                        this._dirty = true;
                    };
                    var TweenLiteInternals = TweenLite._internals;
                    var _lazyTweens = TweenLiteInternals.lazyTweens;
                    var _lazyRender = TweenLiteInternals.lazyRender;
                    var _globals = options._gsDefine.globals;
                    var b = new i(null, null, 1, 0);
                    var p = TimelineMax.prototype = new TimelineLite;
                    return p.constructor = TimelineMax, p.kill()._gc = false, TimelineMax.version = "1.20.3", p.invalidate = function () {
                        return this._yoyo = true === this.vars.yoyo, this._repeat = this.vars.repeat || 0, this._repeatDelay = this.vars.repeatDelay || 0, this._uncache(true), TimelineLite.prototype.invalidate.call(this);
                    }, p.addCallback = function (callback, position, params, scope) {
                        return this.add(TweenLite.delayedCall(0, callback, params, scope), position);
                    }, p.removeCallback = function (callback, timeOrLabel) {
                        if (callback) {
                            if (null == timeOrLabel) {
                                this._kill(null, callback);
                            } else {
                                var a = this.getTweensOf(callback, false);
                                var i = a.length;
                                var time = this._parseTimeOrLabel(timeOrLabel);
                                for (; --i > -1;) {
                                    if (a[i]._startTime === time) {
                                        a[i]._enabled(false, false);
                                    }
                                }
                            }
                        }
                        return this;
                    }, p.removePause = function (position) {
                        return this.removeCallback(TimelineLite._internals.pauseCallback, position);
                    }, p.tweenTo = function (position, vars) {
                        vars = vars || {};
                        var duration;
                        var i;
                        var t;
                        var copy = {
                            ease: b,
                            useFrames: this.usesFrames(),
                            immediateRender: false
                        };
                        var Engine = vars.repeat && _globals.TweenMax || TweenLite;
                        for (i in vars) {
                            copy[i] = vars[i];
                        }
                        return copy.time = this._parseTimeOrLabel(position), duration = Math.abs(Number(copy.time) - this._time) / this._timeScale || .001, t = new Engine(this, duration, copy), copy.onStart = function () {
                            t.target.paused(true);
                            if (t.vars.time !== t.target.time() && duration === t.duration()) {
                                t.duration(Math.abs(t.vars.time - t.target.time()) / t.target._timeScale);
                            }
                            if (vars.onStart) {
                                vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []);
                            }
                        }, t;
                    }, p.tweenFromTo = function (fromPosition, toPosition, vars) {
                        vars = vars || {};
                        fromPosition = this._parseTimeOrLabel(fromPosition);
                        vars.startAt = {
                            onComplete: this.seek,
                            onCompleteParams: [fromPosition],
                            callbackScope: this
                        };
                        /** @type {boolean} */
                        vars.immediateRender = false !== vars.immediateRender;
                        var t = this.tweenTo(toPosition, vars);
                        return t.duration(Math.abs(t.vars.time - fromPosition) / this._timeScale || .001);
                    }, p.render = function (time, suppressEvents, force) {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        var tween;
                        var result;
                        var next;
                        var callback;
                        var val;
                        var cycleDuration;
                        var pauseTween;
                        var position;
                        var prevTime = this._time;
                        var totalDur = this._dirty ? this.totalDuration() : this._totalDuration;
                        var dur = this._duration;
                        var prevTotalTime = this._totalTime;
                        var value = this._startTime;
                        var formattedValue = this._timeScale;
                        var prevRawPrevTime = this._rawPrevTime;
                        var prevPaused = this._paused;
                        var prevCycle = this._cycle;
                        if (prevTime !== this._time && (time = time + (this._time - prevTime)), time >= totalDur - 1e-7 && time >= 0) {
                            if (!this._locked) {
                                this._totalTime = totalDur;
                                this._cycle = this._repeat;
                            }
                            if (!(this._reversed || this._hasPausedChild())) {
                                /** @type {boolean} */
                                result = true;
                                /** @type {string} */
                                callback = "onComplete";
                                /** @type {boolean} */
                                val = !!this._timeline.autoRemoveChildren;
                                if (0 === this._duration && (time <= 0 && time >= -1e-7 || prevRawPrevTime < 0 || 1e-10 === prevRawPrevTime) && prevRawPrevTime !== time && this._first) {
                                    /** @type {boolean} */
                                    val = true;
                                    if (prevRawPrevTime > 1e-10) {
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    }
                                }
                            }
                            this._rawPrevTime = this._duration || !suppressEvents || time || this._rawPrevTime === time ? time : 1e-10;
                            if (this._yoyo && 0 != (1 & this._cycle)) {
                                /** @type {number} */
                                this._time = time = 0;
                            } else {
                                this._time = dur;
                                time = dur + 1e-4;
                            }
                        } else {
                            if (time < 1e-7) {
                                if (this._locked || (this._totalTime = this._cycle = 0), this._time = 0, (0 !== prevTime || 0 === dur && 1e-10 !== prevRawPrevTime && (prevRawPrevTime > 0 || time < 0 && prevRawPrevTime >= 0) && !this._locked) && (callback = "onReverseComplete", result = this._reversed), time < 0) {
                                    /** @type {boolean} */
                                    this._active = false;
                                    if (this._timeline.autoRemoveChildren && this._reversed) {
                                        /** @type {boolean} */
                                        val = result = true;
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    } else {
                                        if (prevRawPrevTime >= 0 && this._first) {
                                            /** @type {boolean} */
                                            val = true;
                                        }
                                    }
                                    /** @type {number} */
                                    this._rawPrevTime = time;
                                } else {
                                    if (this._rawPrevTime = dur || !suppressEvents || time || this._rawPrevTime === time ? time : 1e-10, 0 === time && result) {
                                        tween = this._first;
                                        for (; tween && 0 === tween._startTime;) {
                                            if (!tween._duration) {
                                                /** @type {boolean} */
                                                result = false;
                                            }
                                            tween = tween._next;
                                        }
                                    }
                                    /** @type {number} */
                                    time = 0;
                                    if (!this._initted) {
                                        /** @type {boolean} */
                                        val = true;
                                    }
                                }
                            } else {
                                if (0 === dur && prevRawPrevTime < 0 && (val = true), this._time = this._rawPrevTime = time, this._locked || (this._totalTime = time, 0 !== this._repeat && (cycleDuration = dur + this._repeatDelay, this._cycle = this._totalTime / cycleDuration >> 0, 0 !== this._cycle && this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time && this._cycle--, this._time = this._totalTime - this._cycle * cycleDuration, this._yoyo && 0 != (1 & this._cycle) && (this._time = dur - this._time),
                                        this._time > dur ? (this._time = dur, time = dur + 1e-4) : this._time < 0 ? this._time = time = 0 : time = this._time)), this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                                    if ((time = this._time) >= prevTime || this._repeat && prevCycle !== this._cycle) {
                                        tween = this._first;
                                        for (; tween && tween._startTime <= time && !pauseTween;) {
                                            if (!(tween._duration || "isPause" !== tween.data || tween.ratio || 0 === tween._startTime && 0 === this._rawPrevTime)) {
                                                pauseTween = tween;
                                            }
                                            tween = tween._next;
                                        }
                                    } else {
                                        tween = this._last;
                                        for (; tween && tween._startTime >= time && !pauseTween;) {
                                            if (!tween._duration) {
                                                if ("isPause" === tween.data && tween._rawPrevTime > 0) {
                                                    pauseTween = tween;
                                                }
                                            }
                                            tween = tween._prev;
                                        }
                                    }
                                    if (pauseTween && pauseTween._startTime < dur) {
                                        this._time = time = pauseTween._startTime;
                                        this._totalTime = time + this._cycle * (this._totalDuration + this._repeatDelay);
                                    }
                                }
                            }
                        }
                        if (this._cycle !== prevCycle && !this._locked) {
                            var backwards = this._yoyo && 0 != (1 & prevCycle);
                            /** @type {boolean} */
                            var wrap = backwards === (this._yoyo && 0 != (1 & this._cycle));
                            var recTotalTime = this._totalTime;
                            var recCycle = this._cycle;
                            var recRawPrevTime = this._rawPrevTime;
                            var recTime = this._time;
                            if (this._totalTime = prevCycle * dur, this._cycle < prevCycle ? backwards = !backwards : this._totalTime += dur, this._time = prevTime, this._rawPrevTime = 0 === dur ? prevRawPrevTime - 1e-4 : prevRawPrevTime, this._cycle = prevCycle, this._locked = true, prevTime = backwards ? 0 : dur, this.render(prevTime, suppressEvents, 0 === dur), suppressEvents || this._gc || this.vars.onRepeat && (this._cycle = recCycle, this._locked = false, this._callback("onRepeat")), prevTime !== this._time) {
                                return;
                            }
                            if (wrap && (this._cycle = prevCycle, this._locked = true, prevTime = backwards ? dur + 1e-4 : -1e-4, this.render(prevTime, true, false)), this._locked = false, this._paused && !prevPaused) {
                                return;
                            }
                            this._time = recTime;
                            this._totalTime = recTotalTime;
                            this._cycle = recCycle;
                            this._rawPrevTime = recRawPrevTime;
                        }
                        if (!(this._time !== prevTime && this._first || force || val || pauseTween)) {
                            return void(prevTotalTime !== this._totalTime && this._onUpdate && (suppressEvents || this._callback("onUpdate")));
                        }
                        if (this._initted || (this._initted = true), this._active || !this._paused && this._totalTime !== prevTotalTime && time > 0 && (this._active = true), 0 === prevTotalTime && this.vars.onStart && (0 === this._totalTime && this._totalDuration || suppressEvents || this._callback("onStart")), (position = this._time) >= prevTime) {
                            tween = this._first;
                            for (; tween && (next = tween._next, position === this._time && (!this._paused || prevPaused));) {
                                if (tween._active || tween._startTime <= this._time && !tween._paused && !tween._gc) {
                                    if (pauseTween === tween) {
                                        this.pause();
                                    }
                                    if (tween._reversed) {
                                        tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        } else {
                            tween = this._last;
                            for (; tween && (next = tween._prev, position === this._time && (!this._paused || prevPaused));) {
                                if (tween._active || tween._startTime <= prevTime && !tween._paused && !tween._gc) {
                                    if (pauseTween === tween) {
                                        pauseTween = tween._prev;
                                        for (; pauseTween && pauseTween.endTime() > this._time;) {
                                            pauseTween.render(pauseTween._reversed ? pauseTween.totalDuration() - (time - pauseTween._startTime) * pauseTween._timeScale : (time - pauseTween._startTime) * pauseTween._timeScale, suppressEvents, force);
                                            pauseTween = pauseTween._prev;
                                        }
                                        /** @type {null} */
                                        pauseTween = null;
                                        this.pause();
                                    }
                                    if (tween._reversed) {
                                        tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    } else {
                                        tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                    }
                                }
                                tween = next;
                            }
                        }
                        if (this._onUpdate) {
                            if (!suppressEvents) {
                                if (_lazyTweens.length) {
                                    _lazyRender();
                                }
                                this._callback("onUpdate");
                            }
                        }
                        if (callback) {
                            if (!(this._locked || this._gc || value !== this._startTime && formattedValue === this._timeScale)) {
                                if (0 === this._time || totalDur >= this.totalDuration()) {
                                    if (result) {
                                        if (_lazyTweens.length) {
                                            _lazyRender();
                                        }
                                        if (this._timeline.autoRemoveChildren) {
                                            this._enabled(false, false);
                                        }
                                        /** @type {boolean} */
                                        this._active = false;
                                    }
                                    if (!suppressEvents && this.vars[callback]) {
                                        this._callback(callback);
                                    }
                                }
                            }
                        }
                    }, p.getActive = function (nested, tweens, timelines) {
                        if (null == nested) {
                            /** @type {boolean} */
                            nested = true;
                        }
                        if (null == tweens) {
                            /** @type {boolean} */
                            tweens = true;
                        }
                        if (null == timelines) {
                            /** @type {boolean} */
                            timelines = false;
                        }
                        var j;
                        var tween;
                        /** @type {!Array} */
                        var a = [];
                        var all = this.getChildren(nested, tweens, timelines);
                        /** @type {number} */
                        var cnt = 0;
                        var i = all.length;
                        /** @type {number} */
                        j = 0;
                        for (; j < i; j++) {
                            tween = all[j];
                            if (tween.isActive()) {
                                a[cnt++] = tween;
                            }
                        }
                        return a;
                    }, p.getLabelAfter = function (time) {
                        if (!time) {
                            if (0 !== time) {
                                time = this._time;
                            }
                        }
                        var j;
                        var labels = this.getLabelsArray();
                        var i = labels.length;
                        /** @type {number} */
                        j = 0;
                        for (; j < i; j++) {
                            if (labels[j].time > time) {
                                return labels[j].name;
                            }
                        }
                        return null;
                    }, p.getLabelBefore = function (time) {
                        if (null == time) {
                            time = this._time;
                        }
                        var labels = this.getLabelsArray();
                        var i = labels.length;
                        for (; --i > -1;) {
                            if (labels[i].time < time) {
                                return labels[i].name;
                            }
                        }
                        return null;
                    }, p.getLabelsArray = function () {
                        var p;
                        /** @type {!Array} */
                        var a = [];
                        /** @type {number} */
                        var cnt = 0;
                        for (p in this._labels) {
                            a[cnt++] = {
                                time: this._labels[p],
                                name: p
                            };
                        }
                        return a.sort(function (keyThis, keyLast01) {
                            return keyThis.time - keyLast01.time;
                        }), a;
                    }, p.invalidate = function () {
                        return this._locked = false, TimelineLite.prototype.invalidate.call(this);
                    }, p.progress = function (value, suppressEvents) {
                        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && 0 != (1 & this._cycle) ? 1 - value : value) + this._cycle * (this._duration + this._repeatDelay), suppressEvents) : this._time / this.duration() || 0;
                    }, p.totalProgress = function (value, suppressEvents) {
                        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this._totalTime / this.totalDuration() || 0;
                    }, p.totalDuration = function (value) {
                        return arguments.length ? -1 !== this._repeat && value ? this.timeScale(this.totalDuration() / value) : this : (this._dirty && (TimelineLite.prototype.totalDuration.call(this), this._totalDuration = -1 === this._repeat ? 999999999999 : this._duration * (this._repeat + 1) + this._repeatDelay * this._repeat), this._totalDuration);
                    }, p.time = function (value, name) {
                        return arguments.length ? (this._dirty && this.totalDuration(), value > this._duration && (value = this._duration), this._yoyo && 0 != (1 & this._cycle) ? value = this._duration - value + this._cycle * (this._duration + this._repeatDelay) : 0 !== this._repeat && (value = value + this._cycle * (this._duration + this._repeatDelay)), this.totalTime(value, name)) : this._time;
                    }, p.repeat = function (value) {
                        return arguments.length ? (this._repeat = value, this._uncache(true)) : this._repeat;
                    }, p.repeatDelay = function (value) {
                        return arguments.length ? (this._repeatDelay = value, this._uncache(true)) : this._repeatDelay;
                    }, p.yoyo = function (value) {
                        return arguments.length ? (this._yoyo = value, this) : this._yoyo;
                    }, p.currentLabel = function (value) {
                        return arguments.length ? this.seek(value, true) : this.getLabelBefore(this._time + 1e-8);
                    }, TimelineMax;
                }, true);
                (function () {
                    /** @type {number} */
                    var ghostHeight = 180 / Math.PI;
                    /** @type {!Array} */
                    var params = [];
                    /** @type {!Array} */
                    var hash = [];
                    /** @type {!Array} */
                    var values = [];
                    var match = {};
                    var globals = options._gsDefine.globals;
                    /**
                     * @param {number} a
                     * @param {number} b
                     * @param {number} c
                     * @param {number} d
                     * @return {undefined}
                     */
                    var Color = function (a, b, c, d) {
                        if (c === d) {
                            /** @type {number} */
                            c = d - (d - b) / 1e6;
                        }
                        if (a === b) {
                            b = a + (c - a) / 1e6;
                        }
                        /** @type {number} */
                        this.a = a;
                        /** @type {number} */
                        this.b = b;
                        /** @type {number} */
                        this.c = c;
                        /** @type {number} */
                        this.d = d;
                        /** @type {number} */
                        this.da = d - a;
                        /** @type {number} */
                        this.ca = c - a;
                        /** @type {number} */
                        this.ba = b - a;
                    };
                    /**
                     * @param {string} value
                     * @param {string} _
                     * @param {string} text
                     * @param {string} x
                     * @return {?}
                     */
                    var callback = function (value, _, text, x) {
                        var d = {
                            a: value
                        };
                        var o = {};
                        var rgb = {};
                        var c = {
                            c: x
                        };
                        /** @type {number} */
                        var m = (value + _) / 2;
                        /** @type {number} */
                        var v = (_ + text) / 2;
                        /** @type {number} */
                        var y = (text + x) / 2;
                        /** @type {number} */
                        var t2 = (m + v) / 2;
                        /** @type {number} */
                        var t1 = (v + y) / 2;
                        /** @type {number} */
                        var t3 = (t1 - t2) / 8;
                        return d.b = m + (value - m) / 4, o.b = t2 + t3, d.c = o.a = (d.b + o.b) / 2, o.c = rgb.a = (t2 + t1) / 2, rgb.b = t1 - t3, c.b = y + (x - y) / 4, rgb.c = c.a = (rgb.b + c.b) / 2, [d, o, rgb, c];
                    };
                    /**
                     * @param {!Array} data
                     * @param {number} p
                     * @param {boolean} name
                     * @param {boolean} keys
                     * @param {?} object
                     * @return {undefined}
                     */
                    var test = function (data, p, name, keys, object) {
                        var j;
                        var a;
                        var b;
                        var d;
                        var node;
                        var w;
                        var n;
                        var l;
                        var c;
                        var arr;
                        var value;
                        var s;
                        var endValue;
                        /** @type {number} */
                        var _jlen = data.length - 1;
                        /** @type {number} */
                        var i = 0;
                        var x = data[0].a;
                        /** @type {number} */
                        j = 0;
                        for (; j < _jlen; j++) {
                            node = data[i];
                            a = node.a;
                            b = node.d;
                            d = data[i + 1].d;
                            if (object) {
                                value = params[j];
                                s = hash[j];
                                /** @type {number} */
                                endValue = (s + value) * p * .25 / (keys ? .5 : values[j] || .5);
                                /** @type {number} */
                                w = b - (b - a) * (keys ? .5 * p : 0 !== value ? endValue / value : 0);
                                n = b + (d - b) * (keys ? .5 * p : 0 !== s ? endValue / s : 0);
                                /** @type {number} */
                                l = b - (w + ((n - w) * (3 * value / (value + s) + .5) / 4 || 0));
                            } else {
                                /** @type {number} */
                                w = b - (b - a) * p * .5;
                                n = b + (d - b) * p * .5;
                                /** @type {number} */
                                l = b - (w + n) / 2;
                            }
                            /** @type {number} */
                            w = w + l;
                            /** @type {number} */
                            n = n + l;
                            /** @type {number} */
                            node.c = c = w;
                            node.b = 0 !== j ? x : x = node.a + .6 * (node.c - node.a);
                            /** @type {number} */
                            node.da = b - a;
                            /** @type {number} */
                            node.ca = c - a;
                            /** @type {number} */
                            node.ba = x - a;
                            if (name) {
                                arr = callback(a, x, c, b);
                                data.splice(i, 1, arr[0], arr[1], arr[2], arr[3]);
                                /** @type {number} */
                                i = i + 4;
                            } else {
                                i++;
                            }
                            /** @type {number} */
                            x = n;
                        }
                        node = data[i];
                        node.b = x;
                        node.c = x + .4 * (node.d - x);
                        /** @type {number} */
                        node.da = node.d - node.a;
                        /** @type {number} */
                        node.ca = node.c - node.a;
                        /** @type {number} */
                        node.ba = x - node.a;
                        if (name) {
                            arr = callback(node.a, x, node.c, node.d);
                            data.splice(i, 1, arr[0], arr[1], arr[2], arr[3]);
                        }
                    };
                    /**
                     * @param {!Object} path
                     * @param {!Object} i
                     * @param {?} name
                     * @param {!HTMLDocument} o
                     * @return {?}
                     */
                    var format = function (path, i, name, o) {
                        var numNotes;
                        var index;
                        var a;
                        var b;
                        var c;
                        var key;
                        /** @type {!Array} */
                        var colors = [];
                        if (o) {
                            /** @type {!Array<?>} */
                            path = [o].concat(path);
                            /** @type {number} */
                            index = path.length;
                            for (; --index > -1;) {
                                if ("string" == typeof(key = path[index][i]) && "=" === key.charAt(1)) {
                                    path[index][i] = o[i] + Number(key.charAt(0) + key.substr(2));
                                }
                            }
                        }
                        if ((numNotes = path.length - 2) < 0) {
                            return colors[0] = new Color(path[0][i], 0, 0, path[0][i]), colors;
                        }
                        /** @type {number} */
                        index = 0;
                        for (; index < numNotes; index++) {
                            a = path[index][i];
                            b = path[index + 1][i];
                            colors[index] = new Color(a, 0, 0, b);
                            if (name) {
                                c = path[index + 2][i];
                                params[index] = (params[index] || 0) + (b - a) * (b - a);
                                hash[index] = (hash[index] || 0) + (c - b) * (c - b);
                            }
                        }
                        return colors[index] = new Color(path[index][i], 0, 0, path[index + 1][i]), colors;
                    };
                    /**
                     * @param {!Array} obj
                     * @param {number} p
                     * @param {boolean} keys
                     * @param {boolean} f
                     * @param {string} data
                     * @param {!HTMLDocument} value
                     * @return {?}
                     */
                    var value = function (obj, p, keys, f, data, value) {
                        var j;
                        var name;
                        var result;
                        var i;
                        var ax;
                        var cell_amount;
                        var y;
                        var lastCoords;
                        var self = {};
                        /** @type {!Array} */
                        var matches = [];
                        var newCoords = value || obj[0];
                        /** @type {string} */
                        data = "string" == typeof data ? "," + data + "," : ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,";
                        if (null == p) {
                            /** @type {number} */
                            p = 1;
                        }
                        for (name in obj[0]) {
                            matches.push(name);
                        }
                        if (obj.length > 1) {
                            lastCoords = obj[obj.length - 1];
                            /** @type {boolean} */
                            y = true;
                            /** @type {number} */
                            j = matches.length;
                            for (; --j > -1;) {
                                if (name = matches[j], Math.abs(newCoords[name] - lastCoords[name]) > .05) {
                                    /** @type {boolean} */
                                    y = false;
                                    break;
                                }
                            }
                            if (y) {
                                obj = obj.concat();
                                if (value) {
                                    obj.unshift(value);
                                }
                                obj.push(obj[1]);
                                value = obj[obj.length - 3];
                            }
                        }
                        /** @type {number} */
                        params.length = hash.length = values.length = 0;
                        /** @type {number} */
                        j = matches.length;
                        for (; --j > -1;) {
                            name = matches[j];
                            /** @type {boolean} */
                            match[name] = -1 !== data.indexOf("," + name + ",");
                            self[name] = format(obj, name, match[name], value);
                        }
                        /** @type {number} */
                        j = params.length;
                        for (; --j > -1;) {
                            /** @type {number} */
                            params[j] = Math.sqrt(params[j]);
                            /** @type {number} */
                            hash[j] = Math.sqrt(hash[j]);
                        }
                        if (!f) {
                            /** @type {number} */
                            j = matches.length;
                            for (; --j > -1;) {
                                if (match[name]) {
                                    result = self[matches[j]];
                                    /** @type {number} */
                                    cell_amount = result.length - 1;
                                    /** @type {number} */
                                    i = 0;
                                    for (; i < cell_amount; i++) {
                                        /** @type {number} */
                                        ax = result[i + 1].da / hash[i] + result[i].da / params[i] || 0;
                                        values[i] = (values[i] || 0) + ax * ax;
                                    }
                                }
                            }
                            /** @type {number} */
                            j = values.length;
                            for (; --j > -1;) {
                                /** @type {number} */
                                values[j] = Math.sqrt(values[j]);
                            }
                        }
                        /** @type {number} */
                        j = matches.length;
                        /** @type {number} */
                        i = keys ? 4 : 1;
                        for (; --j > -1;) {
                            name = matches[j];
                            result = self[name];
                            test(result, p, keys, f, match[name]);
                            if (y) {
                                result.splice(0, i);
                                result.splice(result.length - i, i);
                            }
                        }
                        return self;
                    };
                    /**
                     * @param {!Object} suggestions
                     * @param {string} type
                     * @param {string} string
                     * @return {?}
                     */
                    var render = function (suggestions, type, string) {
                        type = type || "soft";
                        var source;
                        var a;
                        var b;
                        var m;
                        var result;
                        var j;
                        var i;
                        var length;
                        var value;
                        var k;
                        var period;
                        var obj = {};
                        /** @type {number} */
                        var number = "cubic" === type ? 3 : 2;
                        /** @type {boolean} */
                        var isSharpCorner = "soft" === type;
                        /** @type {!Array} */
                        var y = [];
                        if (isSharpCorner && string && (suggestions = [string].concat(suggestions)), null == suggestions || suggestions.length < number + 1) {
                            throw "invalid Bezier data";
                        }
                        for (value in suggestions[0]) {
                            y.push(value);
                        }
                        /** @type {number} */
                        j = y.length;
                        for (; --j > -1;) {
                            value = y[j];
                            /** @type {!Array} */
                            obj[value] = result = [];
                            /** @type {number} */
                            k = 0;
                            length = suggestions.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < length; i++) {
                                source = null == string ? suggestions[i][value] : "string" == typeof(period = suggestions[i][value]) && "=" === period.charAt(1) ? string[value] + Number(period.charAt(0) + period.substr(2)) : Number(period);
                                if (isSharpCorner && i > 1 && i < length - 1) {
                                    /** @type {number} */
                                    result[k++] = (source + result[k - 2]) / 2;
                                }
                                result[k++] = source;
                            }
                            /** @type {number} */
                            length = k - number + 1;
                            /** @type {number} */
                            k = 0;
                            /** @type {number} */
                            i = 0;
                            for (; i < length; i = i + number) {
                                source = result[i];
                                a = result[i + 1];
                                b = result[i + 2];
                                m = 2 === number ? 0 : result[i + 3];
                                result[k++] = period = 3 === number ? new Color(source, a, b, m) : new Color(source, (2 * a + source) / 3, (2 * a + b) / 3, b);
                            }
                            /** @type {number} */
                            result.length = k;
                        }
                        return obj;
                    };
                    /**
                     * @param {!Object} r
                     * @param {!Array} x
                     * @param {number} len
                     * @return {undefined}
                     */
                    var f = function (r, x, len) {
                        var i;
                        var s;
                        var b;
                        var H;
                        var d;
                        var c;
                        var t2;
                        var j;
                        var t3;
                        var a;
                        var tag_iter;
                        /** @type {number} */
                        var t = 1 / len;
                        var n = r.length;
                        for (; --n > -1;) {
                            a = r[n];
                            b = a.a;
                            /** @type {number} */
                            H = a.d - b;
                            /** @type {number} */
                            d = a.c - b;
                            /** @type {number} */
                            c = a.b - b;
                            /** @type {number} */
                            i = s = 0;
                            /** @type {number} */
                            j = 1;
                            for (; j <= len; j++) {
                                /** @type {number} */
                                t2 = t * j;
                                /** @type {number} */
                                t3 = 1 - t2;
                                /** @type {number} */
                                i = s - (s = (t2 * t2 * H + 3 * t3 * (t2 * d + t3 * c)) * t2);
                                /** @type {number} */
                                tag_iter = n * len + j - 1;
                                x[tag_iter] = (x[tag_iter] || 0) + i * i;
                            }
                        }
                    };
                    /**
                     * @param {!Array} t
                     * @param {number} n
                     * @return {?}
                     */
                    var d = function (t, n) {
                        /** @type {number} */
                        n = n >> 0 || 6;
                        var k;
                        var j;
                        var jlim;
                        var i;
                        /** @type {!Array} */
                        var x = [];
                        /** @type {!Array} */
                        var segments = [];
                        /** @type {number} */
                        var d = 0;
                        /** @type {number} */
                        var b = 0;
                        /** @type {number} */
                        var max = n - 1;
                        /** @type {!Array} */
                        var results = [];
                        /** @type {!Array} */
                        var row = [];
                        for (k in t) {
                            f(t[k], x, n);
                        }
                        /** @type {number} */
                        jlim = x.length;
                        /** @type {number} */
                        j = 0;
                        for (; j < jlim; j++) {
                            /** @type {number} */
                            d = d + Math.sqrt(x[j]);
                            /** @type {number} */
                            i = j % n;
                            /** @type {number} */
                            row[i] = d;
                            if (i === max) {
                                /** @type {number} */
                                b = b + d;
                                /** @type {number} */
                                i = j / n >> 0;
                                /** @type {!Array} */
                                results[i] = row;
                                /** @type {number} */
                                segments[i] = b;
                                /** @type {number} */
                                d = 0;
                                /** @type {!Array} */
                                row = [];
                            }
                        }
                        return {
                            length: b,
                            lengths: segments,
                            segments: results
                        };
                    };
                    var state = options._gsDefine.plugin({
                        propName: "bezier",
                        priority: -1,
                        version: "1.3.8",
                        API: 2,
                        global: true,
                        init: function (target, options, store) {
                            /** @type {string} */
                            this._target = target;
                            if (options instanceof Array) {
                                options = {
                                    values: options
                                };
                            }
                            this._func = {};
                            this._mod = {};
                            /** @type {!Array} */
                            this._props = [];
                            /** @type {number} */
                            this._timeRes = null == options.timeResolution ? 6 : parseInt(options.timeResolution, 10);
                            var p;
                            var isColor;
                            var k;
                            var i;
                            var noteIndex;
                            /** @type {!Array} */
                            var result = options.values || [];
                            var el = {};
                            var onlineSupportTitle = result[0];
                            var data = options.autoRotate || store.vars.orientToBezier;
                            /** @type {(Array|null)} */
                            this._autoRotate = data ? data instanceof Array ? data : [["x", "y", "rotation", true === data ? 0 : Number(data) || 0]] : null;
                            for (p in onlineSupportTitle) {
                                this._props.push(p);
                            }
                            /** @type {number} */
                            k = this._props.length;
                            for (; --k > -1;) {
                                p = this._props[k];
                                this._overwriteProps.push(p);
                                /** @type {boolean} */
                                isColor = this._func[p] = "function" == typeof target[p];
                                el[p] = isColor ? target[p.indexOf("set") || "function" != typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)]() : parseFloat(target[p]);
                                if (!noteIndex) {
                                    if (el[p] !== result[0][p]) {
                                        noteIndex = el;
                                    }
                                }
                            }
                            if (this._beziers = "cubic" !== options.type && "quadratic" !== options.type && "soft" !== options.type ? value(result, isNaN(options.curviness) ? 1 : options.curviness, false, "thruBasic" === options.type, options.correlate, noteIndex) : render(result, options.type, el), this._segCount = this._beziers[p].length, this._timeRes) {
                                var result = d(this._beziers, this._timeRes);
                                this._length = result.length;
                                this._lengths = result.lengths;
                                this._segments = result.segments;
                                /** @type {number} */
                                this._l1 = this._li = this._s1 = this._si = 0;
                                this._l2 = this._lengths[0];
                                this._curSeg = this._segments[0];
                                this._s2 = this._curSeg[0];
                                /** @type {number} */
                                this._prec = 1 / this._curSeg.length;
                            }
                            if (data = this._autoRotate) {
                                /** @type {!Array} */
                                this._initialRotations = [];
                                if (!(data[0] instanceof Array)) {
                                    /** @type {!Array} */
                                    this._autoRotate = data = [data];
                                }
                                /** @type {number} */
                                k = data.length;
                                for (; --k > -1;) {
                                    /** @type {number} */
                                    i = 0;
                                    for (; i < 3; i++) {
                                        p = data[k][i];
                                        this._func[p] = "function" == typeof target[p] && target[p.indexOf("set") || "function" != typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)];
                                    }
                                    p = data[k][2];
                                    this._initialRotations[k] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                                    this._overwriteProps.push(p);
                                }
                            }
                            return this._startRatio = store.vars.runBackwards ? 1 : 0, true;
                        },
                        set: function (n) {
                            var i;
                            var x;
                            var j;
                            var name;
                            var a;
                            var t;
                            var value;
                            var endIndex;
                            var result;
                            var array;
                            var s = this._segCount;
                            var processedOptions = this._func;
                            var context = this._target;
                            /** @type {boolean} */
                            var m = n !== this._startRatio;
                            if (this._timeRes) {
                                if (result = this._lengths, array = this._curSeg, n = n * this._length, j = this._li, n > this._l2 && j < s - 1) {
                                    /** @type {number} */
                                    endIndex = s - 1;
                                    for (; j < endIndex && (this._l2 = result[++j]) <= n;) {
                                    }
                                    this._l1 = result[j - 1];
                                    this._li = j;
                                    this._curSeg = array = this._segments[j];
                                    this._s2 = array[this._s1 = this._si = 0];
                                } else {
                                    if (n < this._l1 && j > 0) {
                                        for (; j > 0 && (this._l1 = result[--j]) >= n;) {
                                        }
                                        if (0 === j && n < this._l1) {
                                            /** @type {number} */
                                            this._l1 = 0;
                                        } else {
                                            j++;
                                        }
                                        this._l2 = result[j];
                                        this._li = j;
                                        this._curSeg = array = this._segments[j];
                                        this._s1 = array[(this._si = array.length - 1) - 1] || 0;
                                        this._s2 = array[this._si];
                                    }
                                }
                                if (i = j, n = n - this._l1, j = this._si, n > this._s2 && j < array.length - 1) {
                                    /** @type {number} */
                                    endIndex = array.length - 1;
                                    for (; j < endIndex && (this._s2 = array[++j]) <= n;) {
                                    }
                                    this._s1 = array[j - 1];
                                    this._si = j;
                                } else {
                                    if (n < this._s1 && j > 0) {
                                        for (; j > 0 && (this._s1 = array[--j]) >= n;) {
                                        }
                                        if (0 === j && n < this._s1) {
                                            /** @type {number} */
                                            this._s1 = 0;
                                        } else {
                                            j++;
                                        }
                                        this._s2 = array[j];
                                        this._si = j;
                                    }
                                }
                                /** @type {number} */
                                t = (j + (n - this._s1) / (this._s2 - this._s1)) * this._prec || 0;
                            } else {
                                /** @type {number} */
                                i = n < 0 ? 0 : n >= 1 ? s - 1 : s * n >> 0;
                                /** @type {number} */
                                t = (n - i * (1 / s)) * s;
                            }
                            /** @type {number} */
                            x = 1 - t;
                            j = this._props.length;
                            for (; --j > -1;) {
                                name = this._props[j];
                                a = this._beziers[name][i];
                                value = (t * t * a.da + 3 * x * (t * a.ca + x * a.ba)) * t + a.a;
                                if (this._mod[name]) {
                                    value = this._mod[name](value, context);
                                }
                                if (processedOptions[name]) {
                                    context[name](value);
                                } else {
                                    context[name] = value;
                                }
                            }
                            if (this._autoRotate) {
                                var b;
                                var x1;
                                var y1;
                                var x2;
                                var y2;
                                var from;
                                var pos;
                                var collisionTypes = this._autoRotate;
                                j = collisionTypes.length;
                                for (; --j > -1;) {
                                    name = collisionTypes[j][2];
                                    from = collisionTypes[j][3] || 0;
                                    /** @type {number} */
                                    pos = true === collisionTypes[j][4] ? 1 : ghostHeight;
                                    a = this._beziers[collisionTypes[j][0]];
                                    b = this._beziers[collisionTypes[j][1]];
                                    if (a && b) {
                                        a = a[i];
                                        b = b[i];
                                        x1 = a.a + (a.b - a.a) * t;
                                        x2 = a.b + (a.c - a.b) * t;
                                        x1 = x1 + (x2 - x1) * t;
                                        x2 = x2 + (a.c + (a.d - a.c) * t - x2) * t;
                                        y1 = b.a + (b.b - b.a) * t;
                                        y2 = b.b + (b.c - b.b) * t;
                                        y1 = y1 + (y2 - y1) * t;
                                        y2 = y2 + (b.c + (b.d - b.c) * t - y2) * t;
                                        value = m ? Math.atan2(y2 - y1, x2 - x1) * pos + from : this._initialRotations[j];
                                        if (this._mod[name]) {
                                            value = this._mod[name](value, context);
                                        }
                                        if (processedOptions[name]) {
                                            context[name](value);
                                        } else {
                                            context[name] = value;
                                        }
                                    }
                                }
                            }
                        }
                    });
                    var p = state.prototype;
                    /** @type {function(!Array, number, boolean, boolean, string, !HTMLDocument): ?} */
                    state.bezierThrough = value;
                    /** @type {function(string, string, string, string): ?} */
                    state.cubicToQuadratic = callback;
                    /** @type {boolean} */
                    state._autoCSS = true;
                    /**
                     * @param {number} a
                     * @param {number} c
                     * @param {number} b
                     * @return {?}
                     */
                    state.quadraticToCubic = function (a, c, b) {
                        return new Color(a, (2 * c + a) / 3, (2 * c + b) / 3, b);
                    };
                    /**
                     * @return {undefined}
                     */
                    state._cssRegister = function () {
                        var TweenLite = globals.CSSPlugin;
                        if (TweenLite) {
                            var _internals = TweenLite._internals;
                            var extend = _internals._parseToProxy;
                            var _setClassNameRatio = _internals._setPluginRatio;
                            var Cursor = _internals.CSSPropTween;
                            _internals._registerComplexSpecialProp("bezier", {
                                parser: function (t, data, p, cssp, pt, name) {
                                    if (data instanceof Array) {
                                        data = {
                                            values: data
                                        };
                                    }
                                    name = new state;
                                    var i;
                                    var k;
                                    var o;
                                    /** @type {!Array} */
                                    var items = data.values;
                                    /** @type {number} */
                                    var last = items.length - 1;
                                    /** @type {!Array} */
                                    var mask = [];
                                    var c = {};
                                    if (last < 0) {
                                        return pt;
                                    }
                                    /** @type {number} */
                                    i = 0;
                                    for (; i <= last; i++) {
                                        o = extend(t, items[i], cssp, pt, name, last !== i);
                                        mask[i] = o.end;
                                    }
                                    for (k in data) {
                                        c[k] = data[k];
                                    }
                                    return c.values = mask, pt = new Cursor(t, "bezier", 0, 0, o.pt, 2), pt.data = o, pt.plugin = name, pt.setRatio = _setClassNameRatio, 0 === c.autoRotate && (c.autoRotate = true), !c.autoRotate || c.autoRotate instanceof Array || (i = true === c.autoRotate ? 0 : Number(c.autoRotate), c.autoRotate = null != o.end.left ? [["left", "top", "rotation", i, false]] : null != o.end.x && [["x", "y", "rotation", i, false]]), c.autoRotate && (cssp._transform || cssp._enableTransforms(false),
                                        o.autoRotate = cssp._target._gsTransform, o.proxy.rotation = o.autoRotate.rotation || 0, cssp._overwriteProps.push("rotation")), name._onInitTween(o.proxy, c, cssp._tween), pt;
                                }
                            });
                        }
                    };
                    /**
                     * @param {?} obj
                     * @return {undefined}
                     */
                    p._mod = function (obj) {
                        var value;
                        var props = this._overwriteProps;
                        var i = props.length;
                        for (; --i > -1;) {
                            if ((value = obj[props[i]]) && "function" == typeof value) {
                                /** @type {!Function} */
                                this._mod[props[i]] = value;
                            }
                        }
                    };
                    /**
                     * @param {string} vars
                     * @return {?}
                     */
                    p._kill = function (vars) {
                        var q;
                        var i;
                        var p = this._props;
                        for (q in this._beziers) {
                            if (q in vars) {
                                delete this._beziers[q];
                                delete this._func[q];
                                i = p.length;
                                for (; --i > -1;) {
                                    if (p[i] === q) {
                                        p.splice(i, 1);
                                    }
                                }
                            }
                        }
                        if (p = this._autoRotate) {
                            i = p.length;
                            for (; --i > -1;) {
                                if (vars[p[i][2]]) {
                                    p.splice(i, 1);
                                }
                            }
                        }
                        return this._super._kill.call(this, vars);
                    };
                })();
                options._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin", "TweenLite"], function (TweenPlugin, TweenLite) {
                    var position;
                    var dojoGlobal;
                    var _cs;
                    var _overwriteProps;
                    /**
                     * @return {undefined}
                     */
                    var CSSPlugin = function () {
                        TweenPlugin.call(this, "css");
                        /** @type {number} */
                        this._overwriteProps.length = 0;
                        this.setRatio = CSSPlugin.prototype.setRatio;
                    };
                    var _globals = options._gsDefine.globals;
                    var data = {};
                    var p = CSSPlugin.prototype = new TweenPlugin("css");
                    /** @type {function(): undefined} */
                    p.constructor = CSSPlugin;
                    /** @type {string} */
                    CSSPlugin.version = "1.20.3";
                    /** @type {number} */
                    CSSPlugin.API = 2;
                    /** @type {number} */
                    CSSPlugin.defaultTransformPerspective = 0;
                    /** @type {string} */
                    CSSPlugin.defaultSkewType = "compensated";
                    /** @type {boolean} */
                    CSSPlugin.defaultSmoothOrigin = true;
                    /** @type {string} */
                    p = "px";
                    CSSPlugin.suffixMap = {
                        top: p,
                        right: p,
                        bottom: p,
                        left: p,
                        width: p,
                        height: p,
                        fontSize: p,
                        padding: p,
                        margin: p,
                        perspective: p,
                        lineHeight: ""
                    };
                    var _autoRound;
                    var extension;
                    var f;
                    var _transformProp;
                    var d;
                    var _ieVers;
                    var n;
                    var name;
                    /** @type {!RegExp} */
                    var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g;
                    /** @type {!RegExp} */
                    var _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g;
                    /** @type {!RegExp} */
                    var METADATA_REGEX = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi;
                    /** @type {!RegExp} */
                    var attr = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g;
                    /** @type {!RegExp} */
                    var _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g;
                    /** @type {!RegExp} */
                    var filter = /opacity *= *([^)]*)/i;
                    /** @type {!RegExp} */
                    var reValidName = /opacity:([^;]*)/i;
                    /** @type {!RegExp} */
                    var m = /alpha\(opacity *=.+?\)/i;
                    /** @type {!RegExp} */
                    var promiseToFetchDirections = /^(rgb|hsl)/;
                    /** @type {!RegExp} */
                    var dashExpr = /([A-Z])/g;
                    /** @type {!RegExp} */
                    var _camelExp = /-([a-z])/gi;
                    /** @type {!RegExp} */
                    var regPlaceholder = /(^(?:url\("|url\())|(?:("\))$|\)$)/gi;
                    /**
                     * @param {?} g
                     * @param {string} s
                     * @return {?}
                     */
                    var _camelFunc = function (g, s) {
                        return s.toUpperCase();
                    };
                    /** @type {!RegExp} */
                    var b = /(?:Left|Right|Width)/i;
                    /** @type {!RegExp} */
                    var _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi;
                    /** @type {!RegExp} */
                    var _ieSetMatrixExp = /progid:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i;
                    /** @type {!RegExp} */
                    var D = /,(?=[^\)]*(?:\(|$))/gi;
                    /** @type {!RegExp} */
                    var r = /[\s,\(]/i;
                    /** @type {number} */
                    var DEG_TO_RAD = Math.PI / 180;
                    /** @type {number} */
                    var _RAD2DEG = 180 / Math.PI;
                    var cb = {};
                    var mockElement = {
                        style: {}
                    };
                    var _doc = options.document || {
                        createElement: function () {
                            return mockElement;
                        }
                    };
                    /**
                     * @param {string} type
                     * @param {string} xmlns
                     * @return {?}
                     */
                    var createElement = function (type, xmlns) {
                        return _doc.createElementNS ? _doc.createElementNS(xmlns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
                    };
                    var e = createElement("div");
                    var img = createElement("img");
                    var _internals = CSSPlugin._internals = {
                        _specialProps: data
                    };
                    var ua = (options.navigator || {}).userAgent || "";
                    var isSymbol = function () {
                        var i = ua.indexOf("Android");
                        var e = createElement("a");
                        return f = -1 !== ua.indexOf("Safari") && -1 === ua.indexOf("Chrome") && (-1 === i || parseFloat(ua.substr(i + 8, 2)) > 3), d = f && parseFloat(ua.substr(ua.indexOf("Version/") + 8, 2)) < 6, _transformProp = -1 !== ua.indexOf("Firefox"), (/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(ua) || /Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(ua)) && (_ieVers = parseFloat(RegExp.$1)), !!e && (e.style.cssText = "top:1px;opacity:.55;", /^0.55/.test(e.style.opacity));
                    }();
                    /**
                     * @param {!Object} v
                     * @return {?}
                     */
                    var _getIEOpacity = function (v) {
                        return filter.test("string" == typeof v ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ? parseFloat(RegExp.$1) / 100 : 1;
                    };
                    /**
                     * @param {?} value
                     * @return {undefined}
                     */
                    var isNaN = function (value) {
                        options.console;
                    };
                    /** @type {string} */
                    var _prefixCSS = "";
                    /** @type {string} */
                    var _prefix = "";
                    /**
                     * @param {string} p
                     * @param {!Object} result
                     * @return {?}
                     */
                    var _checkPropPrefix = function (p, result) {
                        result = result || e;
                        var a;
                        var j;
                        var style = result.style;
                        if (void 0 !== style[p]) {
                            return p;
                        }
                        p = p.charAt(0).toUpperCase() + p.substr(1);
                        /** @type {!Array} */
                        a = ["O", "Moz", "ms", "Ms", "Webkit"];
                        /** @type {number} */
                        j = 5;
                        for (; --j > -1 && void 0 === style[a[j] + p];) {
                        }
                        return j >= 0 ? (_prefix = 3 === j ? "ms" : a[j], _prefixCSS = "-" + _prefix.toLowerCase() + "-", _prefix + p) : null;
                    };
                    var _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function () {
                    };
                    /** @type {function(!Object, string, !Object, boolean, string): ?} */
                    var _getStyle = CSSPlugin.getStyle = function (el, name, element, obj, value) {
                        var authType;
                        return isSymbol || "opacity" !== name ? (!obj && el.style[name] ? authType = el.style[name] : (element = element || _getComputedStyle(el)) ? authType = element[name] || element.getPropertyValue(name) || element.getPropertyValue(name.replace(dashExpr, "-$1").toLowerCase()) : el.currentStyle && (authType = el.currentStyle[name]), null == value || authType && "none" !== authType && "auto" !== authType && "auto auto" !== authType ? authType : value) : _getIEOpacity(el);
                    };
                    /** @type {function(!Object, string, number, string, boolean): ?} */
                    var _convertToPixels = _internals.convertToPixels = function (t, p, v, sfx, value) {
                        if ("px" === sfx || !sfx && "lineHeight" !== p) {
                            return v;
                        }
                        if ("auto" === sfx || !v) {
                            return 0;
                        }
                        var pix;
                        var obj;
                        var value;
                        /** @type {boolean} */
                        var horiz = b.test(p);
                        /** @type {!Object} */
                        var parent = t;
                        var style = e.style;
                        /** @type {boolean} */
                        var neg = v < 0;
                        /** @type {boolean} */
                        var isV = 1 === v;
                        if (neg && (v = -v), isV && (v = v * 100), "lineHeight" !== p || sfx) {
                            if ("%" === sfx && -1 !== p.indexOf("border")) {
                                /** @type {number} */
                                pix = v / 100 * (horiz ? t.clientWidth : t.clientHeight);
                            } else {
                                if (style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;", "%" !== sfx && parent.appendChild && "v" !== sfx.charAt(0) && "rem" !== sfx) {
                                    style[horiz ? "borderLeftWidth" : "borderTopWidth"] = v + sfx;
                                } else {
                                    if (parent = t.parentNode || _doc.body, -1 !== _getStyle(parent, "display").indexOf("flex") && (style.position = "absolute"), obj = parent._gsCache, value = TweenLite.ticker.frame, obj && horiz && obj.time === value) {
                                        return obj.width * v / 100;
                                    }
                                    style[horiz ? "width" : "height"] = v + sfx;
                                }
                                parent.appendChild(e);
                                /** @type {number} */
                                pix = parseFloat(e[horiz ? "offsetWidth" : "offsetHeight"]);
                                parent.removeChild(e);
                                if (horiz && "%" === sfx && false !== CSSPlugin.cacheWidths) {
                                    obj = parent._gsCache = parent._gsCache || {};
                                    obj.time = value;
                                    /** @type {number} */
                                    obj.width = pix / v * 100;
                                }
                                if (!(0 !== pix || value)) {
                                    pix = _convertToPixels(t, p, v, sfx, true);
                                }
                            }
                        } else {
                            obj = _getComputedStyle(t).lineHeight;
                            /** @type {number} */
                            t.style.lineHeight = v;
                            /** @type {number} */
                            pix = parseFloat(_getComputedStyle(t).lineHeight);
                            t.style.lineHeight = obj;
                        }
                        return isV && (pix = pix / 100), neg ? -pix : pix;
                    };
                    /** @type {function(!Object, string, !Object): ?} */
                    var _getDimension = _internals.calculateOffset = function (t, e, size) {
                        if ("absolute" !== _getStyle(t, "position", size)) {
                            return 0;
                        }
                        /** @type {string} */
                        var dim = "left" === e ? "Left" : "Top";
                        var v = _getStyle(t, "margin" + dim, size);
                        return t["offset" + dim] - (_convertToPixels(t, e, parseFloat(v), v.replace(_suffixExp, "")) || 0);
                    };
                    /**
                     * @param {!HTMLElement} t
                     * @param {!Object} cs
                     * @return {?}
                     */
                    var _getAllStyles = function (t, cs) {
                        var i;
                        var tr;
                        var value;
                        var s = {};
                        if (cs = cs || _getComputedStyle(t, null)) {
                            if (i = cs.length) {
                                for (; --i > -1;) {
                                    value = cs[i];
                                    if (!(-1 !== value.indexOf("-transform") && _transformPropCSS !== value)) {
                                        s[value.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(value);
                                    }
                                }
                            } else {
                                for (i in cs) {
                                    if (!(-1 !== i.indexOf("Transform") && prop !== i)) {
                                        s[i] = cs[i];
                                    }
                                }
                            }
                        } else {
                            if (cs = t.currentStyle || t.style) {
                                for (i in cs) {
                                    if ("string" == typeof i && void 0 === s[i]) {
                                        s[i.replace(_camelExp, _camelFunc)] = cs[i];
                                    }
                                }
                            }
                        }
                        return isSymbol || (s.opacity = _getIEOpacity(t)), tr = _getTransform(t, cs, false), s.rotation = tr.rotation, s.skewX = tr.skewX, s.scaleX = tr.scaleX, s.scaleY = tr.scaleY, s.x = tr.x, s.y = tr.y, _supports3D && (s.z = tr.z, s.rotationX = tr.rotationX, s.rotationY = tr.rotationY, s.scaleZ = tr.scaleZ), s.filters && delete s.filters, s;
                    };
                    /**
                     * @param {!Object} t
                     * @param {!Object} s1
                     * @param {!Array} s2
                     * @param {!Object} vars
                     * @param {!Array} data
                     * @return {?}
                     */
                    var _cssDif = function (t, s1, s2, vars, data) {
                        var val;
                        var p;
                        var mpt;
                        var difs = {};
                        var style = t.style;
                        for (p in s2) {
                            if ("cssText" !== p && "length" !== p && isNaN(p) && (s1[p] !== (val = s2[p]) || data && data[p]) && -1 === p.indexOf("Origin")) {
                                if (!("number" != typeof val && "string" != typeof val)) {
                                    difs[p] = "auto" !== val || "left" !== p && "top" !== p ? "" !== val && "auto" !== val && "none" !== val || "string" != typeof s1[p] || "" === s1[p].replace(attr, "") ? val : 0 : _getDimension(t, p);
                                    if (void 0 !== style[p]) {
                                        mpt = new MiniPropTween(style, p, style[p], mpt);
                                    }
                                }
                            }
                        }
                        if (vars) {
                            for (p in vars) {
                                if ("className" !== p) {
                                    difs[p] = vars[p];
                                }
                            }
                        }
                        return {
                            difs: difs,
                            firstMPT: mpt
                        };
                    };
                    var cfg = {
                        width: ["Left", "Right"],
                        height: ["Top", "Bottom"]
                    };
                    /** @type {!Array} */
                    var _margins = ["marginLeft", "marginRight", "marginTop", "marginBottom"];
                    /**
                     * @param {!Element} e
                     * @param {!Object} p
                     * @param {!Array} cs
                     * @return {?}
                     */
                    var getStyle = function (e, p, cs) {
                        if ("svg" === (e.nodeName + "").toLowerCase()) {
                            return (cs || _getComputedStyle(e))[p] || 0;
                        }
                        if (e.getCTM && match(e)) {
                            return e.getBBox()[p] || 0;
                        }
                        /** @type {number} */
                        var val = parseFloat("width" === p ? e.offsetWidth : e.offsetHeight);
                        var props = cfg[p];
                        var i = props.length;
                        cs = cs || _getComputedStyle(e, null);
                        for (; --i > -1;) {
                            /** @type {number} */
                            val = val - (parseFloat(_getStyle(e, "padding" + props[i], cs, true)) || 0);
                            /** @type {number} */
                            val = val - (parseFloat(_getStyle(e, "border" + props[i] + "Width", cs, true)) || 0);
                        }
                        return val;
                    };
                    /**
                     * @param {string} v
                     * @param {!Object} t
                     * @return {?}
                     */
                    var render = function (v, t) {
                        if ("contain" === v || "auto" === v || "auto auto" === v) {
                            return v + " ";
                        }
                        if (!(null != v && "" !== v)) {
                            /** @type {string} */
                            v = "0 0";
                        }
                        var i;
                        var keys = v.split(" ");
                        var name = -1 !== v.indexOf("left") ? "0%" : -1 !== v.indexOf("right") ? "100%" : keys[0];
                        var ch = -1 !== v.indexOf("top") ? "0%" : -1 !== v.indexOf("bottom") ? "100%" : keys[1];
                        if (keys.length > 3 && !t) {
                            keys = v.split(", ").join(",").split(",");
                            /** @type {!Array} */
                            v = [];
                            /** @type {number} */
                            i = 0;
                            for (; i < keys.length; i++) {
                                v.push(render(keys[i]));
                            }
                            return v.join(",");
                        }
                        return null == ch ? ch = "center" === name ? "50%" : "0" : "center" === ch && (ch = "50%"), ("center" === name || isNaN(parseFloat(name)) && -1 === (name + "").indexOf("=")) && (name = "50%"), v = name + " " + ch + (keys.length > 2 ? " " + keys[2] : ""), t && (t.oxp = -1 !== name.indexOf("%"), t.oyp = -1 !== ch.indexOf("%"), t.oxr = "=" === name.charAt(1), t.oyr = "=" === ch.charAt(1), t.ox = parseFloat(name.replace(attr, "")), t.oy = parseFloat(ch.replace(attr, "")), t.v = v), t || v;
                    };
                    /**
                     * @param {string} b
                     * @param {!Object} a
                     * @return {?}
                     */
                    var _parseChange = function (b, a) {
                        return "function" == typeof b && (b = b(name, n)), "string" == typeof b && "=" === b.charAt(1) ? parseInt(b.charAt(0) + "1", 10) * parseFloat(b.substr(2)) : parseFloat(b) - parseFloat(a) || 0;
                    };
                    /**
                     * @param {string} value
                     * @param {number} other
                     * @return {?}
                     */
                    var _parseVal = function (value, other) {
                        return "function" == typeof value && (value = value(name, n)), null == value ? other : "string" == typeof value && "=" === value.charAt(1) ? parseInt(value.charAt(0) + "1", 10) * parseFloat(value.substr(2)) + other : parseFloat(value) || 0;
                    };
                    /**
                     * @param {!Object} v
                     * @param {number} value
                     * @param {string} i
                     * @param {string} options
                     * @return {?}
                     */
                    var handler = function (v, value, i, options) {
                        var b;
                        var c;
                        var a;
                        var result;
                        var isArray;
                        return "function" == typeof v && (v = v(name, n)), null == v ? result = value : "number" == typeof v ? result = v : (b = 360, c = v.split("_"), isArray = "=" === v.charAt(1), a = (isArray ? parseInt(v.charAt(0) + "1", 10) * parseFloat(c[0].substr(2)) : parseFloat(c[0])) * (-1 === v.indexOf("rad") ? 1 : _RAD2DEG) - (isArray ? 0 : value), c.length && (options && (options[i] = value + a), -1 !== v.indexOf("short") && (a = a % b) !== a % (b / 2) && (a = a < 0 ? a + b : a - b), -1 !== v.indexOf("_cw") &&
                        a < 0 ? a = (a + 9999999999 * b) % b - (a / b | 0) * b : -1 !== v.indexOf("ccw") && a > 0 && (a = (a - 9999999999 * b) % b - (a / b | 0) * b)), result = value + a), result < 1e-6 && result > -1e-6 && (result = 0), result;
                    };
                    var _colorLookup = {
                        aqua: [0, 255, 255],
                        lime: [0, 255, 0],
                        silver: [192, 192, 192],
                        black: [0, 0, 0],
                        maroon: [128, 0, 0],
                        teal: [0, 128, 128],
                        blue: [0, 0, 255],
                        navy: [0, 0, 128],
                        white: [255, 255, 255],
                        fuchsia: [255, 0, 255],
                        olive: [128, 128, 0],
                        yellow: [255, 255, 0],
                        orange: [255, 165, 0],
                        gray: [128, 128, 128],
                        purple: [128, 0, 128],
                        green: [0, 128, 0],
                        red: [255, 0, 0],
                        pink: [255, 192, 203],
                        cyan: [0, 255, 255],
                        transparent: [255, 255, 255, 0]
                    };
                    /**
                     * @param {number} c
                     * @param {number} a
                     * @param {number} b
                     * @return {?}
                     */
                    var x = function (c, a, b) {
                        return c = c < 0 ? c + 1 : c > 1 ? c - 1 : c, 255 * (6 * c < 1 ? a + (b - a) * c * 6 : c < .5 ? b : 3 * c < 2 ? a + (b - a) * (2 / 3 - c) * 6 : a) + .5 | 0;
                    };
                    /** @type {function(number, string): ?} */
                    var extend = CSSPlugin.parseColor = function (v, str) {
                        var a;
                        var r;
                        var g;
                        var b;
                        var i;
                        var s;
                        var l;
                        var max;
                        var min;
                        var d;
                        var wasHSL;
                        if (v) {
                            if ("number" == typeof v) {
                                /** @type {!Array} */
                                a = [v >> 16, v >> 8 & 255, 255 & v];
                            } else {
                                if ("," === v.charAt(v.length - 1) && (v = v.substr(0, v.length - 1)), _colorLookup[v]) {
                                    a = _colorLookup[v];
                                } else {
                                    if ("#" === v.charAt(0)) {
                                        if (4 === v.length) {
                                            r = v.charAt(1);
                                            g = v.charAt(2);
                                            b = v.charAt(3);
                                            /** @type {string} */
                                            v = "#" + r + r + g + g + b + b;
                                        }
                                        /** @type {number} */
                                        v = parseInt(v.substr(1), 16);
                                        /** @type {!Array} */
                                        a = [v >> 16, v >> 8 & 255, 255 & v];
                                    } else {
                                        if ("hsl" === v.substr(0, 3)) {
                                            if (a = wasHSL = v.match(_numExp), str) {
                                                if (-1 !== v.indexOf("=")) {
                                                    return v.match(_relNumExp);
                                                }
                                            } else {
                                                /** @type {number} */
                                                i = Number(a[0]) % 360 / 360;
                                                /** @type {number} */
                                                s = Number(a[1]) / 100;
                                                /** @type {number} */
                                                l = Number(a[2]) / 100;
                                                /** @type {number} */
                                                g = l <= .5 ? l * (s + 1) : l + s - l * s;
                                                /** @type {number} */
                                                r = 2 * l - g;
                                                if (a.length > 3) {
                                                    /** @type {number} */
                                                    a[3] = Number(a[3]);
                                                }
                                                a[0] = x(i + 1 / 3, r, g);
                                                a[1] = x(i, r, g);
                                                a[2] = x(i - 1 / 3, r, g);
                                            }
                                        } else {
                                            a = v.match(_numExp) || _colorLookup.transparent;
                                        }
                                    }
                                }
                                /** @type {number} */
                                a[0] = Number(a[0]);
                                /** @type {number} */
                                a[1] = Number(a[1]);
                                /** @type {number} */
                                a[2] = Number(a[2]);
                                if (a.length > 3) {
                                    /** @type {number} */
                                    a[3] = Number(a[3]);
                                }
                            }
                        } else {
                            /** @type {!Array} */
                            a = _colorLookup.black;
                        }
                        return str && !wasHSL && (r = a[0] / 255, g = a[1] / 255, b = a[2] / 255, max = Math.max(r, g, b), min = Math.min(r, g, b), l = (max + min) / 2, max === min ? i = s = 0 : (d = max - min, s = l > .5 ? d / (2 - max - min) : d / (max + min), i = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4, i = i * 60), a[0] = i + .5 | 0, a[1] = 100 * s + .5 | 0, a[2] = 100 * l + .5 | 0), a;
                    };
                    /**
                     * @param {string} t
                     * @param {string} e
                     * @return {?}
                     */
                    var validate = function (t, e) {
                        var i;
                        var result;
                        var b;
                        var Ycoords = t.match(_colorExp) || [];
                        /** @type {number} */
                        var start = 0;
                        /** @type {string} */
                        var resval = "";
                        if (!Ycoords.length) {
                            return t;
                        }
                        /** @type {number} */
                        i = 0;
                        for (; i < Ycoords.length; i++) {
                            result = Ycoords[i];
                            b = t.substr(start, t.indexOf(result, start) - start);
                            start = start + (b.length + result.length);
                            result = extend(result, e);
                            if (3 === result.length) {
                                result.push(1);
                            }
                            /** @type {string} */
                            resval = resval + (b + (e ? "hsla(" + result[0] + "," + result[1] + "%," + result[2] + "%," + result[3] : "rgba(" + result.join(",")) + ")");
                        }
                        return resval + t.substr(start);
                    };
                    /** @type {string} */
                    var _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";
                    for (p in _colorLookup) {
                        /** @type {string} */
                        _colorExp = _colorExp + ("|" + p + "\\b");
                    }
                    /** @type {!RegExp} */
                    _colorExp = new RegExp(_colorExp + ")", "gi");
                    /**
                     * @param {string} event
                     * @return {undefined}
                     */
                    CSSPlugin.colorStringFilter = function (event) {
                        var app;
                        var combined = event[0] + " " + event[1];
                        if (_colorExp.test(combined)) {
                            /** @type {boolean} */
                            app = -1 !== combined.indexOf("hsl(") || -1 !== combined.indexOf("hsla(");
                            event[0] = validate(event[0], app);
                            event[1] = validate(event[1], app);
                        }
                        /** @type {number} */
                        _colorExp.lastIndex = 0;
                    };
                    if (!TweenLite.defaultStringFilter) {
                        /** @type {function(string): undefined} */
                        TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
                    }
                    /**
                     * @param {string} s
                     * @param {boolean} type
                     * @param {boolean} deep
                     * @param {boolean} map
                     * @return {?}
                     */
                    var get = function (s, type, deep, map) {
                        if (null == s) {
                            return function (lookupSoFar) {
                                return lookupSoFar;
                            };
                        }
                        var parse;
                        var value = type ? (s.match(_colorExp) || [""])[0] : "";
                        var obj = s.split(value).join("").match(METADATA_REGEX) || [];
                        var url = s.substr(0, s.indexOf(obj[0]));
                        /** @type {string} */
                        var status = ")" === s.charAt(s.length - 1) ? ")" : "";
                        /** @type {string} */
                        var param = -1 !== s.indexOf(" ") ? " " : ",";
                        var numVals = obj.length;
                        var d = numVals > 0 ? obj[0].replace(_numExp, "") : "";
                        return numVals ? parse = type ? function (s) {
                            var m;
                            var args;
                            var i;
                            var values;
                            if ("number" == typeof s) {
                                s = s + d;
                            } else {
                                if (map && D.test(s)) {
                                    values = s.replace(D, "|").split("|");
                                    /** @type {number} */
                                    i = 0;
                                    for (; i < values.length; i++) {
                                        values[i] = parse(values[i]);
                                    }
                                    return values.join(",");
                                }
                            }
                            if (m = (s.match(_colorExp) || [value])[0], args = s.split(m).join("").match(METADATA_REGEX) || [], i = args.length, numVals > i--) {
                                for (; ++i < numVals;) {
                                    args[i] = deep ? args[(i - 1) / 2 | 0] : obj[i];
                                }
                            }
                            return url + args.join(param) + param + m + status + (-1 !== s.indexOf("inset") ? " inset" : "");
                        } : function (s) {
                            var args;
                            var values;
                            var i;
                            if ("number" == typeof s) {
                                s = s + d;
                            } else {
                                if (map && D.test(s)) {
                                    values = s.replace(D, "|").split("|");
                                    /** @type {number} */
                                    i = 0;
                                    for (; i < values.length; i++) {
                                        values[i] = parse(values[i]);
                                    }
                                    return values.join(",");
                                }
                            }
                            if (args = s.match(METADATA_REGEX) || [], i = args.length, numVals > i--) {
                                for (; ++i < numVals;) {
                                    args[i] = deep ? args[(i - 1) / 2 | 0] : obj[i];
                                }
                            }
                            return url + args.join(param) + status;
                        } : function (lookupSoFar) {
                            return lookupSoFar;
                        };
                    };
                    /**
                     * @param {string} keys
                     * @return {?}
                     */
                    var require = function (keys) {
                        return keys = keys.split(","), function (e, fn, n, target, pt, plugin, value) {
                            var i;
                            /** @type {!Array<string>} */
                            var stops = (fn + "").split(" ");
                            value = {};
                            /** @type {number} */
                            i = 0;
                            for (; i < 4; i++) {
                                /** @type {string} */
                                value[keys[i]] = stops[i] = stops[i] || stops[(i - 1) / 2 >> 0];
                            }
                            return target.parse(e, value, pt, plugin);
                        };
                    };
                    /** @type {function(string, string, number, ?, boolean): undefined} */
                    var MiniPropTween = (_internals._setPluginRatio = function (v) {
                        this.plugin.setRatio(v);
                        var val;
                        var pt;
                        var i;
                        var s;
                        var x;
                        var d = this.data;
                        var proxy = d.proxy;
                        var mpt = d.firstMPT;
                        for (; mpt;) {
                            val = proxy[mpt.v];
                            if (mpt.r) {
                                /** @type {number} */
                                val = Math.round(val);
                            } else {
                                if (val < 1e-6 && val > -1e-6) {
                                    /** @type {number} */
                                    val = 0;
                                }
                            }
                            mpt.t[mpt.p] = val;
                            mpt = mpt._next;
                        }
                        if (d.autoRotate && (d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation), 1 === v || 0 === v) {
                            mpt = d.firstMPT;
                            /** @type {string} */
                            x = 1 === v ? "e" : "b";
                            for (; mpt;) {
                                if (pt = mpt.t, pt.type) {
                                    if (1 === pt.type) {
                                        s = pt.xs0 + pt.s + pt.xs1;
                                        /** @type {number} */
                                        i = 1;
                                        for (; i < pt.l; i++) {
                                            s = s + (pt["xn" + i] + pt["xs" + (i + 1)]);
                                        }
                                        pt[x] = s;
                                    }
                                } else {
                                    pt[x] = pt.s + pt.xs0;
                                }
                                mpt = mpt._next;
                            }
                        }
                    }, function (template, p, val, next, rSite) {
                        /** @type {string} */
                        this.t = template;
                        /** @type {string} */
                        this.p = p;
                        /** @type {number} */
                        this.v = val;
                        /** @type {boolean} */
                        this.r = rSite;
                        if (next) {
                            next._prev = this;
                            this._next = next;
                        }
                    });
                    /** @type {function(string, string, string, string, ?, string, undefined, boolean, number, ?, number): undefined} */
                    var CSSPropTween = (_internals._parseToProxy = function (t, vars, cssp, pt, plugin, shallow) {
                        var i;
                        var p;
                        var xp;
                        var mpt;
                        var firstPT;
                        /** @type {string} */
                        var bpt = pt;
                        var start = {};
                        var end = {};
                        var transform = cssp._transform;
                        var _cb = cb;
                        /** @type {null} */
                        cssp._transform = null;
                        cb = vars;
                        pt = firstPT = cssp.parse(t, vars, pt, plugin);
                        cb = _cb;
                        if (shallow) {
                            cssp._transform = transform;
                            if (bpt) {
                                /** @type {null} */
                                bpt._prev = null;
                                if (bpt._prev) {
                                    /** @type {null} */
                                    bpt._prev._next = null;
                                }
                            }
                        }
                        for (; pt && pt !== bpt;) {
                            if (pt.type <= 1 && (p = pt.p, end[p] = pt.s + pt.c, start[p] = pt.s, shallow || (mpt = new MiniPropTween(pt, "s", p, mpt, pt.r), pt.c = 0), 1 === pt.type)) {
                                i = pt.l;
                                for (; --i > 0;) {
                                    /** @type {string} */
                                    xp = "xn" + i;
                                    /** @type {string} */
                                    p = pt.p + "_" + xp;
                                    end[p] = pt.data[xp];
                                    start[p] = pt[xp];
                                    if (!shallow) {
                                        mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
                                    }
                                }
                            }
                            pt = pt._next;
                        }
                        return {
                            proxy: start,
                            end: end,
                            firstMPT: mpt,
                            pt: firstPT
                        };
                    }, _internals.CSSPropTween = function (t, p, s, c, next, type, n, r, pr, b, undefined) {
                        /** @type {string} */
                        this.t = t;
                        /** @type {string} */
                        this.p = p;
                        /** @type {string} */
                        this.s = s;
                        /** @type {string} */
                        this.c = c;
                        this.n = n || p;
                        if (!(t instanceof CSSPropTween)) {
                            _overwriteProps.push(this.n);
                        }
                        /** @type {boolean} */
                        this.r = r;
                        this.type = type || 0;
                        if (pr) {
                            /** @type {number} */
                            this.pr = pr;
                            /** @type {boolean} */
                            position = true;
                        }
                        this.b = void 0 === b ? s : b;
                        this.e = void 0 === undefined ? s + c : undefined;
                        if (next) {
                            this._next = next;
                            next._prev = this;
                        }
                    });
                    /**
                     * @param {string} t
                     * @param {string} x
                     * @param {number} b
                     * @param {number} e
                     * @param {number} pt
                     * @param {string} name
                     * @return {?}
                     */
                    var parse = function (t, x, b, e, pt, name) {
                        var d = new CSSPropTween(t, x, b, e - b, pt, -1, name);
                        return d.b = b, d.e = d.xs0 = e, d;
                    };
                    /** @type {function(string, string, string, string, !Function, string, string, number, string, !Function): ?} */
                    var _parseComplex = CSSPlugin.parseComplex = function (t, p, b, e, id, name, pt, pr, plugin, setRatio) {
                        b = b || name || "";
                        if ("function" == typeof e) {
                            e = e(name, n);
                        }
                        pt = new CSSPropTween(t, p, 0, 0, pt, setRatio ? 2 : 1, null, false, pr, b, e);
                        /** @type {string} */
                        e = e + "";
                        if (id && _colorExp.test(e + b)) {
                            /** @type {!Array} */
                            e = [b, e];
                            CSSPlugin.colorStringFilter(e);
                            b = e[0];
                            e = e[1];
                        }
                        var i;
                        var xi;
                        var ni;
                        var bv;
                        var ev;
                        var bnums;
                        var enums;
                        var bn;
                        var isRight;
                        var temp;
                        var cv;
                        var str;
                        var data;
                        var ba = b.split(", ").join(",").split(" ");
                        var ea = e.split(", ").join(",").split(" ");
                        var l = ba.length;
                        /** @type {boolean} */
                        var autoRound = false !== _autoRound;
                        if (!(-1 === e.indexOf(",") && -1 === b.indexOf(","))) {
                            if (-1 !== (e + b).indexOf("rgb") || -1 !== (e + b).indexOf("hsl")) {
                                ba = ba.join(" ").replace(D, ", ").split(" ");
                                ea = ea.join(" ").replace(D, ", ").split(" ");
                            } else {
                                ba = ba.join(" ").split(",").join(", ").split(" ");
                                ea = ea.join(" ").split(",").join(", ").split(" ");
                            }
                            l = ba.length;
                        }
                        if (l !== ea.length) {
                            ba = (name || "").split(" ");
                            l = ba.length;
                        }
                        /** @type {string} */
                        pt.plugin = plugin;
                        /** @type {!Function} */
                        pt.setRatio = setRatio;
                        /** @type {number} */
                        _colorExp.lastIndex = 0;
                        /** @type {number} */
                        i = 0;
                        for (; i < l; i++) {
                            if (bv = ba[i], ev = ea[i], (bn = parseFloat(bv)) || 0 === bn) {
                                pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), autoRound && -1 !== ev.indexOf("px"), true);
                            } else {
                                if (id && _colorExp.test(bv)) {
                                    str = ev.indexOf(")") + 1;
                                    str = ")" + (str ? ev.substr(str) : "");
                                    data = -1 !== ev.indexOf("hsl") && isSymbol;
                                    temp = ev;
                                    bv = extend(bv, data);
                                    ev = extend(ev, data);
                                    /** @type {boolean} */
                                    isRight = bv.length + ev.length > 6;
                                    if (isRight && !isSymbol && 0 === ev[3]) {
                                        pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                                        pt.e = pt.e.split(ea[i]).join("transparent");
                                    } else {
                                        if (!isSymbol) {
                                            /** @type {boolean} */
                                            isRight = false;
                                        }
                                        if (data) {
                                            pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (isRight ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true).appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false).appendXtra("", bv[2], _parseChange(ev[2], bv[2]), isRight ? "%," : "%" + str, false);
                                        } else {
                                            pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (isRight ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true).appendXtra("", bv[1], ev[1] - bv[1], ",", true).appendXtra("", bv[2], ev[2] - bv[2], isRight ? "," : str, true);
                                        }
                                        if (isRight) {
                                            bv = bv.length < 4 ? 1 : bv[3];
                                            pt.appendXtra("", bv, (ev.length < 4 ? 1 : ev[3]) - bv, str, false);
                                        }
                                    }
                                    /** @type {number} */
                                    _colorExp.lastIndex = 0;
                                } else {
                                    if (bnums = bv.match(_numExp)) {
                                        if (!(enums = ev.match(_relNumExp)) || enums.length !== bnums.length) {
                                            return pt;
                                        }
                                        /** @type {number} */
                                        ni = 0;
                                        /** @type {number} */
                                        xi = 0;
                                        for (; xi < bnums.length; xi++) {
                                            cv = bnums[xi];
                                            temp = bv.indexOf(cv, ni);
                                            pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", autoRound && "px" === bv.substr(temp + cv.length, 2), 0 === xi);
                                            ni = temp + cv.length;
                                        }
                                        pt["xs" + pt.l] += bv.substr(ni);
                                    } else {
                                        pt["xs" + pt.l] += pt.l || pt["xs" + pt.l] ? " " + ev : ev;
                                    }
                                }
                            }
                        }
                        if (-1 !== e.indexOf("=") && pt.data) {
                            str = pt.xs0 + pt.data.s;
                            /** @type {number} */
                            i = 1;
                            for (; i < pt.l; i++) {
                                str = str + (pt["xs" + i] + pt.data["xn" + i]);
                            }
                            pt.e = str + pt["xs" + i];
                        }
                        return pt.l || (pt.type = -1, pt.xs0 = pt.e), pt.xfirst || pt;
                    };
                    /** @type {number} */
                    var i = 9;
                    p = CSSPropTween.prototype;
                    /** @type {number} */
                    p.l = p.pr = 0;
                    for (; --i > 0;) {
                        /** @type {number} */
                        p["xn" + i] = 0;
                        /** @type {string} */
                        p["xs" + i] = "";
                    }
                    /** @type {string} */
                    p.xs0 = "";
                    /** @type {null} */
                    p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;
                    /**
                     * @param {string} pfx
                     * @param {string} s
                     * @param {boolean} c
                     * @param {string} sfx
                     * @param {boolean} r
                     * @param {!Object} pad
                     * @return {?}
                     */
                    p.appendXtra = function (pfx, s, c, sfx, r, pad) {
                        var pt = this;
                        var l = pt.l;
                        return pt["xs" + l] += pad && (l || pt["xs" + l]) ? " " + pfx : pfx || "", c || 0 === l || pt.plugin ? (pt.l++, pt.type = pt.setRatio ? 2 : 1, pt["xs" + pt.l] = sfx || "", l > 0 ? (pt.data["xn" + l] = s + c, pt.rxp["xn" + l] = r, pt["xn" + l] = s, pt.plugin || (pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr), pt.xfirst.xs0 = 0), pt) : (pt.data = {
                            s: s + c
                        }, pt.rxp = {}, pt.s = s, pt.c = c, pt.r = r, pt)) : (pt["xs" + l] += s + (sfx || ""), pt);
                    };
                    /**
                     * @param {string} p
                     * @param {!Object} options
                     * @return {undefined}
                     */
                    var SpecialProp = function (p, options) {
                        options = options || {};
                        this.p = options.prefix ? _checkPropPrefix(p) || p : p;
                        data[p] = data[this.p] = this;
                        this.format = options.formatter || get(options.defaultValue, options.color, options.collapsible, options.multi);
                        if (options.parser) {
                            this.parse = options.parser;
                        }
                        this.clrs = options.color;
                        this.multi = options.multi;
                        this.keyword = options.keyword;
                        this.dflt = options.defaultValue;
                        this.pr = options.priority || 0;
                    };
                    /** @type {function(string, !Object, !Object): undefined} */
                    var _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function (p, options, parser) {
                        if ("object" != typeof options) {
                            options = {
                                parser: parser
                            };
                        }
                        var i;
                        var a = p.split(",");
                        var transparent = options.defaultValue;
                        parser = parser || [transparent];
                        /** @type {number} */
                        i = 0;
                        for (; i < a.length; i++) {
                            options.prefix = 0 === i && options.prefix;
                            options.defaultValue = parser[i] || transparent;
                            new SpecialProp(a[i], options);
                        }
                    };
                    /** @type {function(string): undefined} */
                    var isDrawn = _internals._registerPluginProp = function (p) {
                        if (!data[p]) {
                            /** @type {string} */
                            var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                            _registerComplexSpecialProp(p, {
                                parser: function (fn, value, p, plugin, node, name, vars) {
                                    var pluginClass = _globals.com.greensock.plugins[pluginName];
                                    return pluginClass ? (pluginClass._cssRegister(), data[p].parse(fn, value, p, plugin, node, name, vars)) : (isNaN(), node);
                                }
                            });
                        }
                    };
                    p = SpecialProp.prototype;
                    /**
                     * @param {string} t
                     * @param {string} b
                     * @param {string} e
                     * @param {!Object} p
                     * @param {!Object} plugin
                     * @param {!Function} setRatio
                     * @return {?}
                     */
                    p.parseComplex = function (t, b, e, p, plugin, setRatio) {
                        var a;
                        var query;
                        var array;
                        var Del;
                        var state;
                        var index;
                        var d = this.keyword;
                        if (this.multi && (D.test(e) || D.test(b) ? (query = b.replace(D, "|").split("|"), array = e.replace(D, "|").split("|")) : d && (query = [b], array = [e])), array) {
                            Del = array.length > query.length ? array.length : query.length;
                            /** @type {number} */
                            a = 0;
                            for (; a < Del; a++) {
                                b = query[a] = query[a] || this.dflt;
                                e = array[a] = array[a] || this.dflt;
                                if (d) {
                                    state = b.indexOf(d);
                                    index = e.indexOf(d);
                                    if (state !== index) {
                                        if (-1 === index) {
                                            query[a] = query[a].split(d).join("");
                                        } else {
                                            if (-1 === state) {
                                                query[a] += " " + d;
                                            }
                                        }
                                    }
                                }
                            }
                            b = query.join(", ");
                            e = array.join(", ");
                        }
                        return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, p, this.pr, plugin, setRatio);
                    };
                    /**
                     * @param {!Object} t
                     * @param {boolean} e
                     * @param {!Object} name
                     * @param {?} str
                     * @param {!Object} pt
                     * @param {!Object} plugin
                     * @param {!Object} defaults
                     * @return {?}
                     */
                    p.parse = function (t, e, name, str, pt, plugin, defaults) {
                        return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
                    };
                    /**
                     * @param {string} name
                     * @param {?} onInitTween
                     * @param {number} priority
                     * @return {undefined}
                     */
                    CSSPlugin.registerSpecialProp = function (name, onInitTween, priority) {
                        _registerComplexSpecialProp(name, {
                            parser: function (t, e, p, cssp, pt, name, url) {
                                var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                                return rv.plugin = name, rv.setRatio = onInitTween(t, e, cssp._tween, p), rv;
                            },
                            priority: priority
                        });
                    };
                    /** @type {boolean} */
                    CSSPlugin.useSVGTransformAttr = true;
                    var target;
                    /** @type {!Array<string>} */
                    var toLoad = "scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(",");
                    var prop = _checkPropPrefix("transform");
                    var _transformPropCSS = _prefixCSS + "transform";
                    var end = _checkPropPrefix("transformOrigin");
                    /** @type {boolean} */
                    var _supports3D = null !== _checkPropPrefix("perspective");
                    /** @type {function(): undefined} */
                    var AudioContext = _internals.Transform = function () {
                        /** @type {number} */
                        this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                        this.force3D = !(false === CSSPlugin.defaultForce3D || !_supports3D) && (CSSPlugin.defaultForce3D || "auto");
                    };
                    var SVGElement = options.SVGElement;
                    /**
                     * @param {string} type
                     * @param {!Object} base
                     * @param {!Array} properties
                     * @return {?}
                     */
                    var create = function (type, base, properties) {
                        var key;
                        var node = _doc.createElementNS("http://www.w3.org/2000/svg", type);
                        /** @type {!RegExp} */
                        var regAttr = /([a-z])([A-Z])/g;
                        for (key in properties) {
                            node.setAttributeNS(null, key.replace(regAttr, "$1-$2").toLowerCase(), properties[key]);
                        }
                        return base.appendChild(node), node;
                    };
                    var parent = _doc.documentElement || {};
                    var cmp = function () {
                        var path;
                        var element;
                        var w;
                        var n = _ieVers || /Android/i.test(ua) && !options.chrome;
                        return _doc.createElementNS && !n && (path = create("svg", parent), element = create("rect", path, {
                            width: 100,
                            height: 50,
                            x: 100
                        }), w = element.getBoundingClientRect().width, element.style[end] = "50% 50%", element.style[prop] = "scaleX(0.5)", n = w === element.getBoundingClientRect().width && !(_transformProp && _supports3D), parent.removeChild(path)), n;
                    }();
                    /**
                     * @param {!Object} target
                     * @param {string} text
                     * @param {!Object} obj
                     * @param {string} n
                     * @param {boolean} updated
                     * @param {boolean} data
                     * @return {undefined}
                     */
                    var update = function (target, text, obj, n, updated, data) {
                        var result;
                        var t;
                        var r;
                        var y;
                        var x;
                        var uv3u;
                        var bbox;
                        var uv3v;
                        var uv2v;
                        var v3y;
                        var v2y;
                        var grid;
                        var h;
                        var w;
                        var item = target._gsTransform;
                        var v = init(target, true);
                        if (item) {
                            h = item.xOrigin;
                            w = item.yOrigin;
                        }
                        if (!n || (result = n.split(" ")).length < 2) {
                            bbox = target.getBBox();
                            if (0 === bbox.x && 0 === bbox.y && bbox.width + bbox.height === 0) {
                                bbox = {
                                    x: parseFloat(target.hasAttribute("x") ? target.getAttribute("x") : target.hasAttribute("cx") ? target.getAttribute("cx") : 0) || 0,
                                    y: parseFloat(target.hasAttribute("y") ? target.getAttribute("y") : target.hasAttribute("cy") ? target.getAttribute("cy") : 0) || 0,
                                    width: 0,
                                    height: 0
                                };
                            }
                            text = render(text).split(" ");
                            /** @type {!Array} */
                            result = [(-1 !== text[0].indexOf("%") ? parseFloat(text[0]) / 100 * bbox.width : parseFloat(text[0])) + bbox.x, (-1 !== text[1].indexOf("%") ? parseFloat(text[1]) / 100 * bbox.height : parseFloat(text[1])) + bbox.y];
                        }
                        /** @type {number} */
                        obj.xOrigin = y = parseFloat(result[0]);
                        /** @type {number} */
                        obj.yOrigin = x = parseFloat(result[1]);
                        if (n && v !== undefined) {
                            uv3u = v[0];
                            bbox = v[1];
                            uv3v = v[2];
                            uv2v = v[3];
                            v3y = v[4];
                            v2y = v[5];
                            if (grid = uv3u * uv2v - bbox * uv3v) {
                                /** @type {number} */
                                t = y * (uv2v / grid) + x * (-uv3v / grid) + (uv3v * v2y - uv2v * v3y) / grid;
                                /** @type {number} */
                                r = y * (-bbox / grid) + x * (uv3u / grid) - (uv3u * v2y - bbox * v3y) / grid;
                                /** @type {number} */
                                y = obj.xOrigin = result[0] = t;
                                /** @type {number} */
                                x = obj.yOrigin = result[1] = r;
                            }
                        }
                        if (item) {
                            if (data) {
                                obj.xOffset = item.xOffset;
                                obj.yOffset = item.yOffset;
                                /** @type {!Object} */
                                item = obj;
                            }
                            if (updated || false !== updated && false !== CSSPlugin.defaultSmoothOrigin) {
                                /** @type {number} */
                                t = y - h;
                                /** @type {number} */
                                r = x - w;
                                item.xOffset += t * v[0] + r * v[2] - t;
                                item.yOffset += t * v[1] + r * v[3] - r;
                            } else {
                                /** @type {number} */
                                item.xOffset = item.yOffset = 0;
                            }
                        }
                        if (!data) {
                            target.setAttribute("data-svg-origin", result.join(" "));
                        }
                    };
                    /**
                     * @param {?} e
                     * @return {?}
                     */
                    var _getSVGOffsets = function (e) {
                        var bbox;
                        var g = createElement("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg");
                        var div = this.parentNode;
                        var text = this.nextSibling;
                        var before = this.style.cssText;
                        if (parent.appendChild(g), g.appendChild(this), this.style.display = "block", e) {
                            try {
                                bbox = this.getBBox();
                                this._originalGetBBox = this.getBBox;
                                /** @type {function(?): ?} */
                                this.getBBox = _getSVGOffsets;
                            } catch (t) {
                            }
                        } else {
                            if (this._originalGetBBox) {
                                bbox = this._originalGetBBox();
                            }
                        }
                        return text ? div.insertBefore(this, text) : div.appendChild(this), parent.removeChild(g), this.style.cssText = before, bbox;
                    };
                    /**
                     * @param {!Object} element
                     * @return {?}
                     */
                    var skipChecks = function (element) {
                        try {
                            return element.getBBox();
                        } catch (e) {
                            return _getSVGOffsets.call(element, true);
                        }
                    };
                    /**
                     * @param {!Element} element
                     * @return {?}
                     */
                    var match = function (element) {
                        return !(!SVGElement || !element.getCTM || element.parentNode && !element.ownerSVGElement || !skipChecks(element));
                    };
                    /** @type {!Array} */
                    var undefined = [1, 0, 0, 1, 0, 0];
                    /**
                     * @param {!Element} element
                     * @param {boolean} options
                     * @return {?}
                     */
                    var init = function (element, options) {
                        var type;
                        var s;
                        var m;
                        var value;
                        var res;
                        var range;
                        var b = element._gsTransform || new AudioContext;
                        var style = element.style;
                        if (prop ? s = _getStyle(element, _transformPropCSS, null, true) : element.currentStyle && (s = element.currentStyle.filter.match(_ieGetMatrixExp), s = s && 4 === s.length ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), b.x || 0, b.y || 0].join(",") : ""), type = !s || "none" === s || "matrix(1, 0, 0, 1, 0, 0)" === s, !prop || !(range = !_getComputedStyle(element) || "none" === _getComputedStyle(element).display) && element.parentNode || (range && (value =
                                style.display, style.display = "block"), element.parentNode || (res = 1, parent.appendChild(element)), s = _getStyle(element, _transformPropCSS, null, true), type = !s || "none" === s || "matrix(1, 0, 0, 1, 0, 0)" === s, value ? style.display = value : range && $(style, "display"), res && parent.removeChild(element)), (b.svg || element.getCTM && match(element)) && (type && -1 !== (style[prop] + "").indexOf("matrix") && (s = style[prop], type = 0), m = element.getAttribute("transform"),
                            type && m && (-1 !== m.indexOf("matrix") ? (s = m, type = 0) : -1 !== m.indexOf("translate") && (s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")", type = 0))), type) {
                            return undefined;
                        }
                        m = (s || "").match(_numExp) || [];
                        i = m.length;
                        for (; --i > -1;) {
                            /** @type {number} */
                            value = Number(m[i]);
                            /** @type {number} */
                            m[i] = (res = value - (value = value | 0)) ? (1e5 * res + (res < 0 ? -.5 : .5) | 0) / 1e5 + value : value;
                        }
                        return options && m.length > 6 ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
                    };
                    /** @type {function(!Element, !Object, !Object, boolean): ?} */
                    var _getTransform = _internals.getTransform = function (element, name, endpoint, body) {
                        if (element._gsTransform && endpoint && !body) {
                            return element._gsTransform;
                        }
                        var m;
                        var i;
                        var scaleX;
                        var scaleY;
                        var rotation;
                        var skewX;
                        var tm = endpoint ? element._gsTransform || new AudioContext : new AudioContext;
                        /** @type {boolean} */
                        var f = tm.scaleX < 0;
                        var zOrigin = _supports3D ? parseFloat(_getStyle(element, end, name, false, "0 0 0").split(" ")[2]) || tm.zOrigin || 0 : 0;
                        /** @type {number} */
                        var perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                        if (tm.svg = !(!element.getCTM || !match(element)), tm.svg && (update(element, _getStyle(element, end, name, false, "50% 50%") + "", tm, element.getAttribute("data-svg-origin")), target = CSSPlugin.useSVGTransformAttr || cmp), (m = init(element)) !== undefined) {
                            if (16 === m.length) {
                                var temp;
                                var tmp;
                                var max;
                                var cos;
                                var sin;
                                var dy = m[0];
                                var dx = m[1];
                                var x = m[2];
                                var a41 = m[3];
                                var b = m[4];
                                var a = m[5];
                                var c = m[6];
                                var a42 = m[7];
                                var w = m[8];
                                var h = m[9];
                                var d = m[10];
                                var a14 = m[12];
                                var a24 = m[13];
                                var a34 = m[14];
                                var a43 = m[11];
                                /** @type {number} */
                                var r = Math.atan2(c, d);
                                if (tm.zOrigin) {
                                    /** @type {number} */
                                    a34 = -tm.zOrigin;
                                    /** @type {number} */
                                    a14 = w * a34 - m[12];
                                    /** @type {number} */
                                    a24 = h * a34 - m[13];
                                    /** @type {number} */
                                    a34 = d * a34 + tm.zOrigin - m[14];
                                }
                                /** @type {number} */
                                tm.rotationX = r * _RAD2DEG;
                                if (r) {
                                    /** @type {number} */
                                    cos = Math.cos(-r);
                                    /** @type {number} */
                                    sin = Math.sin(-r);
                                    /** @type {number} */
                                    temp = b * cos + w * sin;
                                    /** @type {number} */
                                    tmp = a * cos + h * sin;
                                    /** @type {number} */
                                    max = c * cos + d * sin;
                                    /** @type {number} */
                                    w = b * -sin + w * cos;
                                    /** @type {number} */
                                    h = a * -sin + h * cos;
                                    /** @type {number} */
                                    d = c * -sin + d * cos;
                                    /** @type {number} */
                                    a43 = a42 * -sin + a43 * cos;
                                    /** @type {number} */
                                    b = temp;
                                    /** @type {number} */
                                    a = tmp;
                                    /** @type {number} */
                                    c = max;
                                }
                                /** @type {number} */
                                r = Math.atan2(-x, d);
                                /** @type {number} */
                                tm.rotationY = r * _RAD2DEG;
                                if (r) {
                                    /** @type {number} */
                                    cos = Math.cos(-r);
                                    /** @type {number} */
                                    sin = Math.sin(-r);
                                    /** @type {number} */
                                    temp = dy * cos - w * sin;
                                    /** @type {number} */
                                    tmp = dx * cos - h * sin;
                                    /** @type {number} */
                                    max = x * cos - d * sin;
                                    /** @type {number} */
                                    h = dx * sin + h * cos;
                                    /** @type {number} */
                                    d = x * sin + d * cos;
                                    /** @type {number} */
                                    a43 = a41 * sin + a43 * cos;
                                    /** @type {number} */
                                    dy = temp;
                                    /** @type {number} */
                                    dx = tmp;
                                    /** @type {number} */
                                    x = max;
                                }
                                /** @type {number} */
                                r = Math.atan2(dx, dy);
                                /** @type {number} */
                                tm.rotation = r * _RAD2DEG;
                                if (r) {
                                    /** @type {number} */
                                    cos = Math.cos(r);
                                    /** @type {number} */
                                    sin = Math.sin(r);
                                    /** @type {number} */
                                    temp = dy * cos + dx * sin;
                                    /** @type {number} */
                                    tmp = b * cos + a * sin;
                                    /** @type {number} */
                                    max = w * cos + h * sin;
                                    /** @type {number} */
                                    dx = dx * cos - dy * sin;
                                    /** @type {number} */
                                    a = a * cos - b * sin;
                                    /** @type {number} */
                                    h = h * cos - w * sin;
                                    /** @type {number} */
                                    dy = temp;
                                    /** @type {number} */
                                    b = tmp;
                                    /** @type {number} */
                                    w = max;
                                }
                                if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) {
                                    /** @type {number} */
                                    tm.rotationX = tm.rotation = 0;
                                    /** @type {number} */
                                    tm.rotationY = 180 - tm.rotationY;
                                }
                                /** @type {number} */
                                r = Math.atan2(b, a);
                                /** @type {number} */
                                tm.scaleX = (1e5 * Math.sqrt(dy * dy + dx * dx + x * x) + .5 | 0) / 1e5;
                                /** @type {number} */
                                tm.scaleY = (1e5 * Math.sqrt(a * a + c * c) + .5 | 0) / 1e5;
                                /** @type {number} */
                                tm.scaleZ = (1e5 * Math.sqrt(w * w + h * h + d * d) + .5 | 0) / 1e5;
                                /** @type {number} */
                                dy = dy / tm.scaleX;
                                /** @type {number} */
                                b = b / tm.scaleY;
                                /** @type {number} */
                                dx = dx / tm.scaleX;
                                /** @type {number} */
                                a = a / tm.scaleY;
                                if (Math.abs(r) > 2e-5) {
                                    /** @type {number} */
                                    tm.skewX = r * _RAD2DEG;
                                    /** @type {number} */
                                    b = 0;
                                    if ("simple" !== tm.skewType) {
                                        tm.scaleY *= 1 / Math.cos(r);
                                    }
                                } else {
                                    /** @type {number} */
                                    tm.skewX = 0;
                                }
                                /** @type {number} */
                                tm.perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
                                tm.x = a14;
                                tm.y = a24;
                                tm.z = a34;
                                if (tm.svg) {
                                    tm.x -= tm.xOrigin - (tm.xOrigin * dy - tm.yOrigin * b);
                                    tm.y -= tm.yOrigin - (tm.yOrigin * dx - tm.xOrigin * a);
                                }
                            } else {
                                if (!_supports3D || body || !m.length || tm.x !== m[4] || tm.y !== m[5] || !tm.rotationX && !tm.rotationY) {
                                    /** @type {boolean} */
                                    var vertical = m.length >= 6;
                                    var dy = vertical ? m[0] : 1;
                                    var dx = m[1] || 0;
                                    var c = m[2] || 0;
                                    var d = vertical ? m[3] : 1;
                                    tm.x = m[4] || 0;
                                    tm.y = m[5] || 0;
                                    /** @type {number} */
                                    scaleX = Math.sqrt(dy * dy + dx * dx);
                                    /** @type {number} */
                                    scaleY = Math.sqrt(d * d + c * c);
                                    rotation = dy || dx ? Math.atan2(dx, dy) * _RAD2DEG : tm.rotation || 0;
                                    skewX = c || d ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                                    /** @type {number} */
                                    tm.scaleX = scaleX;
                                    /** @type {number} */
                                    tm.scaleY = scaleY;
                                    tm.rotation = rotation;
                                    tm.skewX = skewX;
                                    if (_supports3D) {
                                        /** @type {number} */
                                        tm.rotationX = tm.rotationY = tm.z = 0;
                                        /** @type {number} */
                                        tm.perspective = perspective;
                                        /** @type {number} */
                                        tm.scaleZ = 1;
                                    }
                                    if (tm.svg) {
                                        tm.x -= tm.xOrigin - (tm.xOrigin * dy + tm.yOrigin * c);
                                        tm.y -= tm.yOrigin - (tm.xOrigin * dx + tm.yOrigin * d);
                                    }
                                }
                            }
                            if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                                if (f) {
                                    tm.scaleX *= -1;
                                    tm.skewX += tm.rotation <= 0 ? 180 : -180;
                                    tm.rotation += tm.rotation <= 0 ? 180 : -180;
                                } else {
                                    tm.scaleY *= -1;
                                    tm.skewX += tm.skewX <= 0 ? 180 : -180;
                                }
                            }
                            tm.zOrigin = zOrigin;
                            for (i in tm) {
                                if (tm[i] < 2e-5 && tm[i] > -2e-5) {
                                    /** @type {number} */
                                    tm[i] = 0;
                                }
                            }
                        }
                        return endpoint && (element._gsTransform = tm, tm.svg && (target && element.style[prop] ? TweenLite.delayedCall(.001, function () {
                            $(element.style, prop);
                        }) : !target && element.getAttribute("transform") && TweenLite.delayedCall(.001, function () {
                            element.removeAttribute("transform");
                        }))), tm;
                    };
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    var _setIETransformRatio = function (v) {
                        var filters;
                        var val;
                        var t = this.data;
                        /** @type {number} */
                        var ang = -t.rotation * DEG_TO_RAD;
                        /** @type {number} */
                        var skew = ang + t.skewX * DEG_TO_RAD;
                        /** @type {number} */
                        var a = (Math.cos(ang) * t.scaleX * 1e5 | 0) / 1e5;
                        /** @type {number} */
                        var b = (Math.sin(ang) * t.scaleX * 1e5 | 0) / 1e5;
                        /** @type {number} */
                        var c = (Math.sin(skew) * -t.scaleY * 1e5 | 0) / 1e5;
                        /** @type {number} */
                        var d = (Math.cos(skew) * t.scaleY * 1e5 | 0) / 1e5;
                        var style = this.t.style;
                        var cs = this.t.currentStyle;
                        if (cs) {
                            /** @type {number} */
                            val = b;
                            /** @type {number} */
                            b = -c;
                            /** @type {number} */
                            c = -val;
                            filters = cs.filter;
                            /** @type {string} */
                            style.filter = "";
                            var dx;
                            var dy;
                            var w = this.t.offsetWidth;
                            var h = this.t.offsetHeight;
                            /** @type {boolean} */
                            var toSelection = "absolute" !== cs.position;
                            /** @type {string} */
                            var m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d;
                            var ox = t.x + w * t.xPercent / 100;
                            var oy = t.y + h * t.yPercent / 100;
                            if (null != t.ox && (dx = (t.oxp ? w * t.ox * .01 : t.ox) - w / 2, dy = (t.oyp ? h * t.oy * .01 : t.oy) - h / 2, ox = ox + (dx - (dx * a + dy * b)), oy = oy + (dy - (dx * c + dy * d))), toSelection ? (dx = w / 2, dy = h / 2, m = m + (", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")")) : m = m + ", sizingMethod='auto expand')", -1 !== filters.indexOf("DXImageTransform.Microsoft.Matrix(") ? style.filter = filters.replace(_ieSetMatrixExp, m) : style.filter =
                                    m + " " + filters, 0 !== v && 1 !== v || 1 === a && 0 === b && 0 === c && 1 === d && (toSelection && -1 === m.indexOf("Dx=0, Dy=0") || filter.test(filters) && 100 !== parseFloat(RegExp.$1) || -1 === filters.indexOf(filters.indexOf("Alpha")) && style.removeAttribute("filter")), !toSelection) {
                                var marg;
                                var prop;
                                var dif;
                                /** @type {number} */
                                var mult = _ieVers < 8 ? 1 : -1;
                                dx = t.ieOffsetX || 0;
                                dy = t.ieOffsetY || 0;
                                /** @type {number} */
                                t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                                /** @type {number} */
                                t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                                /** @type {number} */
                                i = 0;
                                for (; i < 4; i++) {
                                    prop = _margins[i];
                                    marg = cs[prop];
                                    val = -1 !== marg.indexOf("px") ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                                    /** @type {number} */
                                    dif = val !== t[prop] ? i < 2 ? -t.ieOffsetX : -t.ieOffsetY : i < 2 ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                                    /** @type {string} */
                                    style[prop] = (t[prop] = Math.round(val - dif * (0 === i || 2 === i ? 1 : mult))) + "px";
                                }
                            }
                        }
                    };
                    /** @type {function(number): ?} */
                    var _set3DTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function (modstatus) {
                        var r;
                        var value;
                        var j;
                        var height;
                        var y;
                        var x;
                        var z;
                        var sum;
                        var number;
                        var n;
                        var a;
                        var sy;
                        var w;
                        var offset;
                        var min;
                        var width;
                        var scale;
                        var astNode;
                        var color;
                        var s;
                        var _;
                        var lon2;
                        var c;
                        var options = this.data;
                        var cs = this.t.style;
                        var angle = options.rotation;
                        var offsetX = options.rotationX;
                        var offsetY = options.rotationY;
                        var i = options.scaleX;
                        var size = options.scaleY;
                        var length = options.scaleZ;
                        var key = options.x;
                        var val = options.y;
                        var d = options.z;
                        var source = options.svg;
                        var perspective = options.perspective;
                        var propagate = options.force3D;
                        var delta = options.skewY;
                        var position = options.skewX;
                        if (delta && (position = position + delta, angle = angle + delta), ((1 === modstatus || 0 === modstatus) && "auto" === propagate && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime) || !propagate) && !d && !perspective && !offsetY && !offsetX && 1 === length || target && source || !_supports3D) {
                            return void(angle || position || source ? (angle = angle * DEG_TO_RAD, lon2 = position * DEG_TO_RAD, c = 1e5, value = Math.cos(angle) * i, y = Math.sin(angle) * i, j = Math.sin(angle - lon2) * -size, x = Math.cos(angle - lon2) * size, lon2 && "simple" === options.skewType && (r = Math.tan(lon2 - delta * DEG_TO_RAD), r = Math.sqrt(1 + r * r), j = j * r, x = x * r, delta && (r = Math.tan(delta * DEG_TO_RAD), r = Math.sqrt(1 + r * r), value = value * r, y = y * r)), source && (key = key +
                                (options.xOrigin - (options.xOrigin * value + options.yOrigin * j) + options.xOffset), val = val + (options.yOrigin - (options.xOrigin * y + options.yOrigin * x) + options.yOffset), target && (options.xPercent || options.yPercent) && (min = this.t.getBBox(), key = key + .01 * options.xPercent * min.width, val = val + .01 * options.yPercent * min.height), min = 1e-6, key < min && key > -min && (key = 0), val < min && val > -min && (val = 0)), color = (value * c | 0) / c + "," + (y * c |
                                0) / c + "," + (j * c | 0) / c + "," + (x * c | 0) / c + "," + key + "," + val + ")", source && target ? this.t.setAttribute("transform", "matrix(" + color) : cs[prop] = (options.xPercent || options.yPercent ? "translate(" + options.xPercent + "%," + options.yPercent + "%) matrix(" : "matrix(") + color) : cs[prop] = (options.xPercent || options.yPercent ? "translate(" + options.xPercent + "%," + options.yPercent + "%) matrix(" : "matrix(") + i + ",0,0," + size + "," + key + "," + val +
                                ")");
                        }
                        if (_transformProp && (min = 1e-4, i < min && i > -min && (i = length = 2e-5), size < min && size > -min && (size = length = 2e-5), !perspective || options.z || options.rotationX || options.rotationY || (perspective = 0)), angle || position) {
                            /** @type {number} */
                            angle = angle * DEG_TO_RAD;
                            /** @type {number} */
                            width = value = Math.cos(angle);
                            /** @type {number} */
                            scale = y = Math.sin(angle);
                            if (position) {
                                /** @type {number} */
                                angle = angle - position * DEG_TO_RAD;
                                /** @type {number} */
                                width = Math.cos(angle);
                                /** @type {number} */
                                scale = Math.sin(angle);
                                if ("simple" === options.skewType) {
                                    /** @type {number} */
                                    r = Math.tan((position - delta) * DEG_TO_RAD);
                                    /** @type {number} */
                                    r = Math.sqrt(1 + r * r);
                                    /** @type {number} */
                                    width = width * r;
                                    /** @type {number} */
                                    scale = scale * r;
                                    if (options.skewY) {
                                        /** @type {number} */
                                        r = Math.tan(delta * DEG_TO_RAD);
                                        /** @type {number} */
                                        r = Math.sqrt(1 + r * r);
                                        /** @type {number} */
                                        value = value * r;
                                        /** @type {number} */
                                        y = y * r;
                                    }
                                }
                            }
                            /** @type {number} */
                            j = -scale;
                            /** @type {number} */
                            x = width;
                        } else {
                            if (!(offsetY || offsetX || 1 !== length || perspective || source)) {
                                return void(cs[prop] = (options.xPercent || options.yPercent ? "translate(" + options.xPercent + "%," + options.yPercent + "%) translate3d(" : "translate3d(") + key + "px," + val + "px," + d + "px)" + (1 !== i || 1 !== size ? " scale(" + i + "," + size + ")" : ""));
                            }
                            /** @type {number} */
                            value = x = 1;
                            /** @type {number} */
                            j = y = 0;
                        }
                        /** @type {number} */
                        n = 1;
                        /** @type {number} */
                        height = z = sum = number = a = sy = 0;
                        /** @type {number} */
                        w = perspective ? -1 / perspective : 0;
                        offset = options.zOrigin;
                        /** @type {number} */
                        min = 1e-6;
                        /** @type {string} */
                        s = ",";
                        /** @type {string} */
                        _ = "0";
                        /** @type {number} */
                        angle = offsetY * DEG_TO_RAD;
                        if (angle) {
                            /** @type {number} */
                            width = Math.cos(angle);
                            /** @type {number} */
                            scale = Math.sin(angle);
                            /** @type {number} */
                            sum = -scale;
                            /** @type {number} */
                            a = w * -scale;
                            /** @type {number} */
                            height = value * scale;
                            /** @type {number} */
                            z = y * scale;
                            /** @type {number} */
                            n = width;
                            /** @type {number} */
                            w = w * width;
                            /** @type {number} */
                            value = value * width;
                            /** @type {number} */
                            y = y * width;
                        }
                        /** @type {number} */
                        angle = offsetX * DEG_TO_RAD;
                        if (angle) {
                            /** @type {number} */
                            width = Math.cos(angle);
                            /** @type {number} */
                            scale = Math.sin(angle);
                            /** @type {number} */
                            r = j * width + height * scale;
                            /** @type {number} */
                            astNode = x * width + z * scale;
                            /** @type {number} */
                            number = n * scale;
                            /** @type {number} */
                            sy = w * scale;
                            /** @type {number} */
                            height = j * -scale + height * width;
                            /** @type {number} */
                            z = x * -scale + z * width;
                            /** @type {number} */
                            n = n * width;
                            /** @type {number} */
                            w = w * width;
                            /** @type {number} */
                            j = r;
                            /** @type {number} */
                            x = astNode;
                        }
                        if (1 !== length) {
                            /** @type {number} */
                            height = height * length;
                            /** @type {number} */
                            z = z * length;
                            /** @type {number} */
                            n = n * length;
                            /** @type {number} */
                            w = w * length;
                        }
                        if (1 !== size) {
                            /** @type {number} */
                            j = j * size;
                            /** @type {number} */
                            x = x * size;
                            /** @type {number} */
                            number = number * size;
                            /** @type {number} */
                            sy = sy * size;
                        }
                        if (1 !== i) {
                            /** @type {number} */
                            value = value * i;
                            /** @type {number} */
                            y = y * i;
                            /** @type {number} */
                            sum = sum * i;
                            /** @type {number} */
                            a = a * i;
                        }
                        if (offset || source) {
                            if (offset) {
                                key = key + height * -offset;
                                val = val + z * -offset;
                                d = d + (n * -offset + offset);
                            }
                            if (source) {
                                key = key + (options.xOrigin - (options.xOrigin * value + options.yOrigin * j) + options.xOffset);
                                val = val + (options.yOrigin - (options.xOrigin * y + options.yOrigin * x) + options.yOffset);
                            }
                            if (key < min && key > -min) {
                                /** @type {string} */
                                key = _;
                            }
                            if (val < min && val > -min) {
                                /** @type {string} */
                                val = _;
                            }
                            if (d < min && d > -min) {
                                /** @type {number} */
                                d = 0;
                            }
                        }
                        /** @type {string} */
                        color = options.xPercent || options.yPercent ? "translate(" + options.xPercent + "%," + options.yPercent + "%) matrix3d(" : "matrix3d(";
                        /** @type {string} */
                        color = color + ((value < min && value > -min ? _ : value) + s + (y < min && y > -min ? _ : y) + s + (sum < min && sum > -min ? _ : sum));
                        /** @type {string} */
                        color = color + (s + (a < min && a > -min ? _ : a) + s + (j < min && j > -min ? _ : j) + s + (x < min && x > -min ? _ : x));
                        if (offsetX || offsetY || 1 !== length) {
                            /** @type {string} */
                            color = color + (s + (number < min && number > -min ? _ : number) + s + (sy < min && sy > -min ? _ : sy) + s + (height < min && height > -min ? _ : height));
                            /** @type {string} */
                            color = color + (s + (z < min && z > -min ? _ : z) + s + (n < min && n > -min ? _ : n) + s + (w < min && w > -min ? _ : w) + s);
                        } else {
                            /** @type {string} */
                            color = color + ",0,0,0,0,1,0,";
                        }
                        /** @type {string} */
                        color = color + (key + s + val + s + d + s + (perspective ? 1 + -d / perspective : 1) + ")");
                        /** @type {string} */
                        cs[prop] = color;
                    };
                    p = AudioContext.prototype;
                    /** @type {number} */
                    p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
                    /** @type {number} */
                    p.scaleX = p.scaleY = p.scaleZ = 1;
                    _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {
                        parser: function (e, id, type, obj, pt, plugin, data) {
                            if (obj._lastParsedTransform === data) {
                                return pt;
                            }
                            /** @type {!Object} */
                            obj._lastParsedTransform = data;
                            var template;
                            /** @type {(!Function|number)} */
                            var fn = data.scale && "function" == typeof data.scale ? data.scale : 0;
                            if ("function" == typeof data[type]) {
                                template = data[type];
                                /** @type {!Object} */
                                data[type] = id;
                            }
                            if (fn) {
                                data.scale = fn(name, e);
                            }
                            var m2;
                            var s;
                            var has3D;
                            var c;
                            var val;
                            var x;
                            var y;
                            var m;
                            var p;
                            var dir = e._gsTransform;
                            var style = e.style;
                            /** @type {number} */
                            var i = toLoad.length;
                            /** @type {!Object} */
                            var v = data;
                            var options = {};
                            var t = _getTransform(e, _cs, true, v.parseTransform);
                            var value = v.transform && ("function" == typeof v.transform ? v.transform(name, n) : v.transform);
                            if (t.skewType = v.skewType || t.skewType || CSSPlugin.defaultSkewType, obj._transform = t, value && "string" == typeof value && prop) {
                                s = e.style;
                                s[prop] = value;
                                /** @type {string} */
                                s.display = "block";
                                /** @type {string} */
                                s.position = "absolute";
                                _doc.body.appendChild(e);
                                m2 = _getTransform(e, null, false);
                                if ("simple" === t.skewType) {
                                    m2.scaleY *= Math.cos(m2.skewX * DEG_TO_RAD);
                                }
                                if (t.svg) {
                                    x = t.xOrigin;
                                    y = t.yOrigin;
                                    m2.x -= t.xOffset;
                                    m2.y -= t.yOffset;
                                    if (v.transformOrigin || v.svgOrigin) {
                                        value = {};
                                        update(e, render(v.transformOrigin), value, v.svgOrigin, v.smoothOrigin, true);
                                        x = value.xOrigin;
                                        y = value.yOrigin;
                                        m2.x -= value.xOffset - t.xOffset;
                                        m2.y -= value.yOffset - t.yOffset;
                                    }
                                    if (x || y) {
                                        m = init(e, true);
                                        m2.x -= x - (x * m[0] + y * m[2]);
                                        m2.y -= y - (x * m[1] + y * m[3]);
                                    }
                                }
                                _doc.body.removeChild(e);
                                if (!m2.perspective) {
                                    m2.perspective = t.perspective;
                                }
                                if (null != v.xPercent) {
                                    m2.xPercent = _parseVal(v.xPercent, t.xPercent);
                                }
                                if (null != v.yPercent) {
                                    m2.yPercent = _parseVal(v.yPercent, t.yPercent);
                                }
                            } else {
                                if ("object" == typeof v) {
                                    if (m2 = {
                                            scaleX: _parseVal(null != v.scaleX ? v.scaleX : v.scale, t.scaleX),
                                            scaleY: _parseVal(null != v.scaleY ? v.scaleY : v.scale, t.scaleY),
                                            scaleZ: _parseVal(v.scaleZ, t.scaleZ),
                                            x: _parseVal(v.x, t.x),
                                            y: _parseVal(v.y, t.y),
                                            z: _parseVal(v.z, t.z),
                                            xPercent: _parseVal(v.xPercent, t.xPercent),
                                            yPercent: _parseVal(v.yPercent, t.yPercent),
                                            perspective: _parseVal(v.transformPerspective, t.perspective)
                                        }, null != (val = v.directionalRotation)) {
                                        if ("object" == typeof val) {
                                            for (s in val) {
                                                v[s] = val[s];
                                            }
                                        } else {
                                            v.rotation = val;
                                        }
                                    }
                                    if ("string" == typeof v.x && -1 !== v.x.indexOf("%")) {
                                        /** @type {number} */
                                        m2.x = 0;
                                        m2.xPercent = _parseVal(v.x, t.xPercent);
                                    }
                                    if ("string" == typeof v.y && -1 !== v.y.indexOf("%")) {
                                        /** @type {number} */
                                        m2.y = 0;
                                        m2.yPercent = _parseVal(v.y, t.yPercent);
                                    }
                                    m2.rotation = handler("rotation" in v ? v.rotation : "shortRotation" in v ? v.shortRotation + "_short" : "rotationZ" in v ? v.rotationZ : t.rotation, t.rotation, "rotation", options);
                                    if (_supports3D) {
                                        m2.rotationX = handler("rotationX" in v ? v.rotationX : "shortRotationX" in v ? v.shortRotationX + "_short" : t.rotationX || 0, t.rotationX, "rotationX", options);
                                        m2.rotationY = handler("rotationY" in v ? v.rotationY : "shortRotationY" in v ? v.shortRotationY + "_short" : t.rotationY || 0, t.rotationY, "rotationY", options);
                                    }
                                    m2.skewX = handler(v.skewX, t.skewX);
                                    m2.skewY = handler(v.skewY, t.skewY);
                                }
                            }
                            if (_supports3D && null != v.force3D) {
                                t.force3D = v.force3D;
                                /** @type {boolean} */
                                c = true;
                            }
                            has3D = t.force3D || t.z || t.rotationX || t.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective;
                            if (!(has3D || null == v.scale)) {
                                /** @type {number} */
                                m2.scaleZ = 1;
                            }
                            for (; --i > -1;) {
                                /** @type {string} */
                                p = toLoad[i];
                                if ((value = m2[p] - t[p]) > 1e-6 || value < -1e-6 || null != v[p] || null != cb[p]) {
                                    /** @type {boolean} */
                                    c = true;
                                    pt = new CSSPropTween(t, p, t[p], value, pt);
                                    if (p in options) {
                                        pt.e = options[p];
                                    }
                                    /** @type {number} */
                                    pt.xs0 = 0;
                                    /** @type {string} */
                                    pt.plugin = plugin;
                                    obj._overwriteProps.push(pt.n);
                                }
                            }
                            return value = v.transformOrigin, t.svg && (value || v.svgOrigin) && (x = t.xOffset, y = t.yOffset, update(e, render(value), m2, v.svgOrigin, v.smoothOrigin), pt = parse(t, "xOrigin", (dir ? t : m2).xOrigin, m2.xOrigin, pt, "transformOrigin"), pt = parse(t, "yOrigin", (dir ? t : m2).yOrigin, m2.yOrigin, pt, "transformOrigin"), x === t.xOffset && y === t.yOffset || (pt = parse(t, "xOffset", dir ? x : t.xOffset, t.xOffset, pt, "transformOrigin"), pt = parse(t, "yOffset", dir ? y : t.yOffset,
                                t.yOffset, pt, "transformOrigin")), value = "0px 0px"), (value || _supports3D && has3D && t.zOrigin) && (prop ? (c = true, p = end, value = (value || _getStyle(e, p, _cs, false, "50% 50%")) + "", pt = new CSSPropTween(style, p, 0, 0, pt, -1, "transformOrigin"), pt.b = style[p], pt.plugin = plugin, _supports3D ? (s = t.zOrigin, value = value.split(" "), t.zOrigin = (value.length > 2 && (0 === s || "0px" !== value[2]) ? parseFloat(value[2]) : s) || 0, pt.xs0 = pt.e = value[0] + " " + (value[1] ||
                                "50%") + " 0px", pt = new CSSPropTween(t, "zOrigin", 0, 0, pt, -1, pt.n), pt.b = s, pt.xs0 = pt.e = t.zOrigin) : pt.xs0 = pt.e = value) : render(value + "", t)), c && (obj._transformType = t.svg && target || !has3D && 3 !== this._transformType ? 2 : 3), template && (data[type] = template), fn && (data.scale = fn), pt;
                        },
                        prefix: true
                    });
                    _registerComplexSpecialProp("boxShadow", {
                        defaultValue: "0px 0px 0px 0px #999",
                        prefix: true,
                        color: true,
                        multi: true,
                        keyword: "inset"
                    });
                    _registerComplexSpecialProp("borderRadius", {
                        defaultValue: "0px",
                        parser: function (t, data, p, name, pt, type) {
                            data = this.format(data);
                            var ea1;
                            var i;
                            var es2;
                            var bs2;
                            var bs;
                            var es;
                            var bn;
                            var en;
                            var w;
                            var h;
                            var esfx;
                            var bsfx;
                            var x;
                            var hn;
                            var vn;
                            var em;
                            /** @type {!Array} */
                            var props = ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"];
                            var style = t.style;
                            /** @type {number} */
                            w = parseFloat(t.offsetWidth);
                            /** @type {number} */
                            h = parseFloat(t.offsetHeight);
                            ea1 = data.split(" ");
                            /** @type {number} */
                            i = 0;
                            for (; i < props.length; i++) {
                                if (this.p.indexOf("border")) {
                                    props[i] = _checkPropPrefix(props[i]);
                                }
                                bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                                if (-1 !== bs.indexOf(" ")) {
                                    bs2 = bs.split(" ");
                                    bs = bs2[0];
                                    bs2 = bs2[1];
                                }
                                es = es2 = ea1[i];
                                /** @type {number} */
                                bn = parseFloat(bs);
                                bsfx = bs.substr((bn + "").length);
                                /** @type {boolean} */
                                x = "=" === es.charAt(1);
                                if (x) {
                                    /** @type {number} */
                                    en = parseInt(es.charAt(0) + "1", 10);
                                    es = es.substr(2);
                                    /** @type {number} */
                                    en = en * parseFloat(es);
                                    esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                                } else {
                                    /** @type {number} */
                                    en = parseFloat(es);
                                    esfx = es.substr((en + "").length);
                                }
                                if ("" === esfx) {
                                    esfx = dojoGlobal[p] || bsfx;
                                }
                                if (esfx !== bsfx) {
                                    hn = _convertToPixels(t, "borderLeft", bn, bsfx);
                                    vn = _convertToPixels(t, "borderTop", bn, bsfx);
                                    if ("%" === esfx) {
                                        /** @type {string} */
                                        bs = hn / w * 100 + "%";
                                        /** @type {string} */
                                        bs2 = vn / h * 100 + "%";
                                    } else {
                                        if ("em" === esfx) {
                                            em = _convertToPixels(t, "borderLeft", 1, "em");
                                            /** @type {string} */
                                            bs = hn / em + "em";
                                            /** @type {string} */
                                            bs2 = vn / em + "em";
                                        } else {
                                            /** @type {string} */
                                            bs = hn + "px";
                                            /** @type {string} */
                                            bs2 = vn + "px";
                                        }
                                    }
                                    if (x) {
                                        es = parseFloat(bs) + en + esfx;
                                        es2 = parseFloat(bs2) + en + esfx;
                                    }
                                }
                                pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
                            }
                            return pt;
                        },
                        prefix: true,
                        formatter: get("0px 0px 0px 0px", false, true)
                    });
                    _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {
                        defaultValue: "0px",
                        parser: function (t, data, p, info, pos, fn) {
                            return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(data), false, "0px", pos);
                        },
                        prefix: true,
                        formatter: get("0px 0px", false, true)
                    });
                    _registerComplexSpecialProp("backgroundPosition", {
                        defaultValue: "0 0",
                        parser: function (t, data, s, name, p, module) {
                            var ba;
                            var ip_segments;
                            var i;
                            var pct;
                            var overlap;
                            var url;
                            /** @type {string} */
                            var bp = "background-position";
                            var cs = _cs || _getComputedStyle(t, null);
                            var bs = this.format((cs ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0");
                            var value = this.format(data);
                            if (-1 !== bs.indexOf("%") != (-1 !== value.indexOf("%")) && value.split(",").length < 2 && (url = _getStyle(t, "backgroundImage").replace(regPlaceholder, "")) && "none" !== url) {
                                ba = bs.split(" ");
                                ip_segments = value.split(" ");
                                img.setAttribute("src", url);
                                /** @type {number} */
                                i = 2;
                                for (; --i > -1;) {
                                    bs = ba[i];
                                    if ((pct = -1 !== bs.indexOf("%")) !== (-1 !== ip_segments[i].indexOf("%"))) {
                                        /** @type {number} */
                                        overlap = 0 === i ? t.offsetWidth - img.width : t.offsetHeight - img.height;
                                        /** @type {string} */
                                        ba[i] = pct ? parseFloat(bs) / 100 * overlap + "px" : parseFloat(bs) / overlap * 100 + "%";
                                    }
                                }
                                bs = ba.join(" ");
                            }
                            return this.parseComplex(t.style, bs, value, p, module);
                        },
                        formatter: render
                    });
                    _registerComplexSpecialProp("backgroundSize", {
                        defaultValue: "0 0",
                        formatter: function (text) {
                            return text = text + "", render(-1 === text.indexOf(" ") ? text + " " + text : text);
                        }
                    });
                    _registerComplexSpecialProp("perspective", {
                        defaultValue: "0px",
                        prefix: true
                    });
                    _registerComplexSpecialProp("perspectiveOrigin", {
                        defaultValue: "50% 50%",
                        prefix: true
                    });
                    _registerComplexSpecialProp("transformStyle", {
                        prefix: true
                    });
                    _registerComplexSpecialProp("backfaceVisibility", {
                        prefix: true
                    });
                    _registerComplexSpecialProp("userSelect", {
                        prefix: true
                    });
                    _registerComplexSpecialProp("margin", {
                        parser: require("marginTop,marginRight,marginBottom,marginLeft")
                    });
                    _registerComplexSpecialProp("padding", {
                        parser: require("paddingTop,paddingRight,paddingBottom,paddingLeft")
                    });
                    _registerComplexSpecialProp("clip", {
                        defaultValue: "rect(0px,0px,0px,0px)",
                        parser: function (t, e, s, name, p, module) {
                            var n;
                            var currentStyle;
                            var effect;
                            return _ieVers < 9 ? (currentStyle = t.currentStyle, effect = _ieVers < 8 ? " " : ",", n = "rect(" + currentStyle.clipTop + effect + currentStyle.clipRight + effect + currentStyle.clipBottom + effect + currentStyle.clipLeft + ")", e = this.format(e).split(",").join(effect)) : (n = this.format(_getStyle(t, this.p, _cs, false, this.dflt)), e = this.format(e)), this.parseComplex(t.style, n, e, p, module);
                        }
                    });
                    _registerComplexSpecialProp("textShadow", {
                        defaultValue: "0px 0px 0px #999",
                        color: true,
                        multi: true
                    });
                    _registerComplexSpecialProp("autoRound,strictUnits", {
                        parser: function (obj, id, type, name, str) {
                            return str;
                        }
                    });
                    _registerComplexSpecialProp("border", {
                        defaultValue: "0px solid #000",
                        parser: function (t, data, name, type, s, obj) {
                            var b = _getStyle(t, "borderTopWidth", _cs, false, "0px");
                            var cookieDataArray = this.format(data).split(" ");
                            var h = cookieDataArray[0].replace(_suffixExp, "");
                            return "px" !== h && (b = parseFloat(b) / _convertToPixels(t, "borderTopWidth", 1, h) + h), this.parseComplex(t.style, this.format(b + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), cookieDataArray.join(" "), s, obj);
                        },
                        color: true,
                        formatter: function (s) {
                            var a = s.split(" ");
                            return a[0] + " " + (a[1] || "solid") + " " + (s.match(_colorExp) || ["#000"])[0];
                        }
                    });
                    _registerComplexSpecialProp("borderWidth", {
                        parser: require("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")
                    });
                    _registerComplexSpecialProp("float,cssFloat,styleFloat", {
                        parser: function (element, x, p, name, str, fn) {
                            var sty = element.style;
                            /** @type {string} */
                            var floatAttr = "cssFloat" in sty ? "cssFloat" : "styleFloat";
                            return new CSSPropTween(sty, floatAttr, 0, 0, str, -1, p, false, 0, sty[floatAttr], x);
                        }
                    });
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    var _setIEOpacityRatio = function (v) {
                        var e;
                        var $scope = this.t;
                        var path = $scope.filter || _getStyle(this.data, "filter") || "";
                        /** @type {number} */
                        var ext = this.s + this.c * v | 0;
                        if (100 === ext) {
                            if (-1 === path.indexOf("atrix(") && -1 === path.indexOf("radient(") && -1 === path.indexOf("oader(")) {
                                $scope.removeAttribute("filter");
                                /** @type {boolean} */
                                e = !_getStyle(this.data, "filter");
                            } else {
                                $scope.filter = path.replace(m, "");
                                /** @type {boolean} */
                                e = true;
                            }
                        }
                        if (!e) {
                            if (this.xn1) {
                                $scope.filter = path = path || "alpha(opacity=" + ext + ")";
                            }
                            if (-1 === path.indexOf("pacity")) {
                                if (!(0 === ext && this.xn1)) {
                                    /** @type {string} */
                                    $scope.filter = path + " alpha(opacity=" + ext + ")";
                                }
                            } else {
                                $scope.filter = path.replace(filter, "opacity=" + ext);
                            }
                        }
                    };
                    _registerComplexSpecialProp("opacity,alpha,autoAlpha", {
                        defaultValue: "1",
                        parser: function (el, v, p, s, pt, name) {
                            /** @type {number} */
                            var b = parseFloat(_getStyle(el, "opacity", _cs, false, "1"));
                            var style = el.style;
                            /** @type {boolean} */
                            var dir2 = "autoAlpha" === p;
                            return "string" == typeof v && "=" === v.charAt(1) && (v = ("-" === v.charAt(0) ? -1 : 1) * parseFloat(v.substr(2)) + b), dir2 && 1 === b && "hidden" === _getStyle(el, "visibility", _cs) && 0 !== v && (b = 0), isSymbol ? pt = new CSSPropTween(style, "opacity", b, v - b, pt) : (pt = new CSSPropTween(style, "opacity", 100 * b, 100 * (v - b), pt), pt.xn1 = dir2 ? 1 : 0, style.zoom = 1, pt.type = 2, pt.b = "alpha(opacity=" + pt.s + ")", pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")", pt.data =
                                el, pt.plugin = name, pt.setRatio = _setIEOpacityRatio), dir2 && (pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, 0 !== b ? "inherit" : "hidden", 0 === v ? "hidden" : "inherit"), pt.xs0 = "inherit", s._overwriteProps.push(pt.n), s._overwriteProps.push(p)), pt;
                        }
                    });
                    /**
                     * @param {!Object} el
                     * @param {string} name
                     * @return {undefined}
                     */
                    var $ = function (el, name) {
                        if (name) {
                            if (el.removeProperty) {
                                if (!("ms" !== name.substr(0, 2) && "webkit" !== name.substr(0, 6))) {
                                    /** @type {string} */
                                    name = "-" + name;
                                }
                                el.removeProperty(name.replace(dashExpr, "-$1").toLowerCase());
                            } else {
                                el.removeAttribute(name);
                            }
                        }
                    };
                    /**
                     * @param {number} dir
                     * @return {undefined}
                     */
                    var next = function (dir) {
                        if (this.t._gsClassPT = this, 1 === dir || 0 === dir) {
                            this.t.setAttribute("class", 0 === dir ? this.b : this.e);
                            var p = this.data;
                            var s = this.t.style;
                            for (; p;) {
                                if (p.v) {
                                    s[p.p] = p.v;
                                } else {
                                    $(s, p.p);
                                }
                                p = p._next;
                            }
                            if (1 === dir && this.t._gsClassPT === this) {
                                /** @type {null} */
                                this.t._gsClassPT = null;
                            }
                        } else {
                            if (this.t.getAttribute("class") !== this.e) {
                                this.t.setAttribute("class", this.e);
                            }
                        }
                    };
                    _registerComplexSpecialProp("className", {
                        parser: function (t, e, p, cssp, pt, plugin, vars) {
                            var difData;
                            var bs;
                            var elem;
                            var tmp;
                            var item;
                            var value = t.getAttribute("class") || "";
                            var oldCssText = t.style.cssText;
                            if (pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2), pt.setRatio = next, pt.pr = -11, position = true, pt.b = value, bs = _getAllStyles(t, _cs), elem = t._gsClassPT) {
                                tmp = {};
                                item = elem.data;
                                for (; item;) {
                                    /** @type {number} */
                                    tmp[item.p] = 1;
                                    item = item._next;
                                }
                                elem.setRatio(1);
                            }
                            return t._gsClassPT = pt, pt.e = "=" !== e.charAt(1) ? e : value.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ("+" === e.charAt(0) ? " " + e.substr(2) : ""), t.setAttribute("class", pt.e), difData = _cssDif(t, bs, _getAllStyles(t), vars, tmp), t.setAttribute("class", value), pt.data = difData.firstMPT, t.style.cssText = oldCssText, pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin);
                        }
                    });
                    /**
                     * @param {number} x
                     * @return {undefined}
                     */
                    var fn = function (x) {
                        if ((1 === x || 0 === x) && this.data._totalTime === this.data._totalDuration && "isFromStart" !== this.data.data) {
                            var plugins;
                            var i;
                            var n;
                            var r;
                            var t;
                            var style = this.t.style;
                            var undefined = data.transform.parse;
                            if ("all" === this.e) {
                                /** @type {string} */
                                style.cssText = "";
                                /** @type {boolean} */
                                r = true;
                            } else {
                                plugins = this.e.split(" ").join("").split(",");
                                n = plugins.length;
                                for (; --n > -1;) {
                                    i = plugins[n];
                                    if (data[i]) {
                                        if (data[i].parse === undefined) {
                                            /** @type {boolean} */
                                            r = true;
                                        } else {
                                            i = "transformOrigin" === i ? end : data[i].p;
                                        }
                                    }
                                    $(style, i);
                                }
                            }
                            if (r) {
                                $(style, prop);
                                if (t = this.t._gsTransform) {
                                    if (t.svg) {
                                        this.t.removeAttribute("data-svg-origin");
                                        this.t.removeAttribute("transform");
                                    }
                                    delete this.t._gsTransform;
                                }
                            }
                        }
                    };
                    _registerComplexSpecialProp("clearProps", {
                        parser: function (t, str, p, s, pt) {
                            return pt = new CSSPropTween(t, p, 0, 0, pt, 2), pt.setRatio = fn, pt.e = str, pt.pr = -10, pt.data = s._tween, position = true, pt;
                        }
                    });
                    /** @type {!Array<string>} */
                    p = "bezier,throwProps,physicsProps,physics2D".split(",");
                    /** @type {number} */
                    i = p.length;
                    for (; i--;) {
                        isDrawn(p[i]);
                    }
                    p = CSSPlugin.prototype;
                    /** @type {null} */
                    p._firstPT = p._lastParsedTransform = p._transform = null;
                    /**
                     * @param {string} target
                     * @param {!Object} vars
                     * @param {!Object} tween
                     * @param {number} value
                     * @return {?}
                     */
                    p._onInitTween = function (target, vars, tween, value) {
                        if (!target.nodeType) {
                            return false;
                        }
                        this._target = n = target;
                        /** @type {!Object} */
                        this._tween = tween;
                        /** @type {!Object} */
                        this._vars = vars;
                        /** @type {number} */
                        name = value;
                        _autoRound = vars.autoRound;
                        /** @type {boolean} */
                        position = false;
                        dojoGlobal = vars.suffixMap || CSSPlugin.suffixMap;
                        _cs = _getComputedStyle(target, "");
                        _overwriteProps = this._overwriteProps;
                        var v;
                        var pt;
                        var pt2;
                        var first;
                        var last;
                        var next;
                        var zIndex;
                        var tpt;
                        var threeD;
                        var style = target.style;
                        if (extension && "" === style.zIndex && ("auto" !== (v = _getStyle(target, "zIndex", _cs)) && "" !== v || this._addLazySet(style, "zIndex", 0)), "string" == typeof vars && (first = style.cssText, v = _getAllStyles(target, _cs), style.cssText = first + ";" + vars, v = _cssDif(target, v, _getAllStyles(target)).difs, !isSymbol && reValidName.test(vars) && (v.opacity = parseFloat(RegExp.$1)), vars = v, style.cssText = first), vars.className ? this._firstPT = pt = data.className.parse(target,
                                vars.className, "className", this, null, null, vars) : this._firstPT = pt = this.parse(target, vars, null), this._transformType) {
                            /** @type {boolean} */
                            threeD = 3 === this._transformType;
                            if (prop) {
                                if (f) {
                                    /** @type {boolean} */
                                    extension = true;
                                    if ("" === style.zIndex) {
                                        if (!("auto" !== (zIndex = _getStyle(target, "zIndex", _cs)) && "" !== zIndex)) {
                                            this._addLazySet(style, "zIndex", 0);
                                        }
                                    }
                                    if (d) {
                                        this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                                    }
                                }
                            } else {
                                /** @type {number} */
                                style.zoom = 1;
                            }
                            pt2 = pt;
                            for (; pt2 && pt2._next;) {
                                pt2 = pt2._next;
                            }
                            tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
                            this._linkCSSP(tpt, null, pt2);
                            /** @type {!Function} */
                            tpt.setRatio = prop ? _set3DTransformRatio : _setIETransformRatio;
                            tpt.data = this._transform || _getTransform(target, _cs, true);
                            /** @type {!Object} */
                            tpt.tween = tween;
                            /** @type {number} */
                            tpt.pr = -1;
                            _overwriteProps.pop();
                        }
                        if (position) {
                            for (; pt;) {
                                next = pt._next;
                                pt2 = first;
                                for (; pt2 && pt2.pr > pt.pr;) {
                                    pt2 = pt2._next;
                                }
                                if (pt._prev = pt2 ? pt2._prev : last) {
                                    pt._prev._next = pt;
                                } else {
                                    first = pt;
                                }
                                if (pt._next = pt2) {
                                    pt2._prev = pt;
                                } else {
                                    last = pt;
                                }
                                pt = next;
                            }
                            this._firstPT = first;
                        }
                        return true;
                    };
                    /**
                     * @param {!HTMLElement} target
                     * @param {!Object} vars
                     * @param {string} pt
                     * @param {string} plugin
                     * @return {?}
                     */
                    p.parse = function (target, vars, pt, plugin) {
                        var p;
                        var sp;
                        var bn;
                        var en;
                        var b;
                        var e;
                        var bsfx;
                        var esfx;
                        var ok;
                        var rel;
                        var style = target.style;
                        for (p in vars) {
                            if (e = vars[p], "function" == typeof e && (e = e(name, n)), sp = data[p]) {
                                pt = sp.parse(target, e, p, this, pt, plugin, vars);
                            } else {
                                if ("--" === p.substr(0, 2)) {
                                    this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", e + "", p, false, p);
                                    continue;
                                }
                                /** @type {string} */
                                b = _getStyle(target, p, _cs) + "";
                                /** @type {boolean} */
                                ok = "string" == typeof e;
                                if ("color" === p || "fill" === p || "stroke" === p || -1 !== p.indexOf("Color") || ok && promiseToFetchDirections.test(e)) {
                                    if (!ok) {
                                        e = extend(e);
                                        /** @type {string} */
                                        e = (e.length > 3 ? "rgba(" : "rgb(") + e.join(",") + ")";
                                    }
                                    pt = _parseComplex(style, p, b, e, true, "transparent", pt, 0, plugin);
                                } else {
                                    if (ok && r.test(e)) {
                                        pt = _parseComplex(style, p, b, e, true, null, pt, 0, plugin);
                                    } else {
                                        /** @type {number} */
                                        bn = parseFloat(b);
                                        /** @type {string} */
                                        bsfx = bn || 0 === bn ? b.substr((bn + "").length) : "";
                                        if (!("" !== b && "auto" !== b)) {
                                            if ("width" === p || "height" === p) {
                                                bn = getStyle(target, p, _cs);
                                                /** @type {string} */
                                                bsfx = "px";
                                            } else {
                                                if ("left" === p || "top" === p) {
                                                    bn = _getDimension(target, p, _cs);
                                                    /** @type {string} */
                                                    bsfx = "px";
                                                } else {
                                                    /** @type {number} */
                                                    bn = "opacity" !== p ? 0 : 1;
                                                    /** @type {string} */
                                                    bsfx = "";
                                                }
                                            }
                                        }
                                        /** @type {boolean} */
                                        rel = ok && "=" === e.charAt(1);
                                        if (rel) {
                                            /** @type {number} */
                                            en = parseInt(e.charAt(0) + "1", 10);
                                            e = e.substr(2);
                                            /** @type {number} */
                                            en = en * parseFloat(e);
                                            esfx = e.replace(_suffixExp, "");
                                        } else {
                                            /** @type {number} */
                                            en = parseFloat(e);
                                            esfx = ok ? e.replace(_suffixExp, "") : "";
                                        }
                                        if ("" === esfx) {
                                            esfx = p in dojoGlobal ? dojoGlobal[p] : bsfx;
                                        }
                                        e = en || 0 === en ? (rel ? en + bn : en) + esfx : vars[p];
                                        if (bsfx !== esfx) {
                                            if (!("" === esfx && "lineHeight" !== p)) {
                                                if ((en || 0 === en) && bn) {
                                                    bn = _convertToPixels(target, p, bn, bsfx);
                                                    if ("%" === esfx) {
                                                        /** @type {number} */
                                                        bn = bn / (_convertToPixels(target, p, 100, "%") / 100);
                                                        if (true !== vars.strictUnits) {
                                                            /** @type {string} */
                                                            b = bn + "%";
                                                        }
                                                    } else {
                                                        if ("em" === esfx || "rem" === esfx || "vw" === esfx || "vh" === esfx) {
                                                            /** @type {number} */
                                                            bn = bn / _convertToPixels(target, p, 1, esfx);
                                                        } else {
                                                            if ("px" !== esfx) {
                                                                en = _convertToPixels(target, p, en, esfx);
                                                                /** @type {string} */
                                                                esfx = "px";
                                                            }
                                                        }
                                                    }
                                                    if (rel && (en || 0 === en)) {
                                                        /** @type {string} */
                                                        e = en + bn + esfx;
                                                    }
                                                }
                                            }
                                        }
                                        if (rel) {
                                            en = en + bn;
                                        }
                                        if (!bn && 0 !== bn || !en && 0 !== en) {
                                            if (void 0 !== style[p] && (e || e + "" != "NaN" && null != e)) {
                                                pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, b, e);
                                                pt.xs0 = "none" !== e || "display" !== p && -1 === p.indexOf("Style") ? e : b;
                                            } else {
                                                isNaN(vars[p]);
                                            }
                                        } else {
                                            pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, false !== _autoRound && ("px" === esfx || "zIndex" === p), 0, b, e);
                                            pt.xs0 = esfx;
                                        }
                                    }
                                }
                            }
                            if (plugin && pt && !pt.plugin) {
                                /** @type {string} */
                                pt.plugin = plugin;
                            }
                        }
                        return pt;
                    };
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    p.setRatio = function (v) {
                        var val;
                        var encrypted;
                        var i;
                        var pt = this._firstPT;
                        if (1 !== v || this._tween._time !== this._tween._duration && 0 !== this._tween._time) {
                            if (v || this._tween._time !== this._tween._duration && 0 !== this._tween._time || -1e-6 === this._tween._rawPrevTime) {
                                for (; pt;) {
                                    if (val = pt.c * v + pt.s, pt.r ? val = Math.round(val) : val < 1e-6 && val > -1e-6 && (val = 0), pt.type) {
                                        if (1 === pt.type) {
                                            if (2 === (i = pt.l)) {
                                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
                                            } else {
                                                if (3 === i) {
                                                    pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
                                                } else {
                                                    if (4 === i) {
                                                        pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
                                                    } else {
                                                        if (5 === i) {
                                                            pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
                                                        } else {
                                                            encrypted = pt.xs0 + val + pt.xs1;
                                                            /** @type {number} */
                                                            i = 1;
                                                            for (; i < pt.l; i++) {
                                                                encrypted = encrypted + (pt["xn" + i] + pt["xs" + (i + 1)]);
                                                            }
                                                            pt.t[pt.p] = encrypted;
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if (-1 === pt.type) {
                                                pt.t[pt.p] = pt.xs0;
                                            } else {
                                                if (pt.setRatio) {
                                                    pt.setRatio(v);
                                                }
                                            }
                                        }
                                    } else {
                                        pt.t[pt.p] = val + pt.xs0;
                                    }
                                    pt = pt._next;
                                }
                            } else {
                                for (; pt;) {
                                    if (2 !== pt.type) {
                                        pt.t[pt.p] = pt.b;
                                    } else {
                                        pt.setRatio(v);
                                    }
                                    pt = pt._next;
                                }
                            }
                        } else {
                            for (; pt;) {
                                if (2 !== pt.type) {
                                    if (pt.r && -1 !== pt.type) {
                                        if (val = Math.round(pt.s + pt.c), pt.type) {
                                            if (1 === pt.type) {
                                                i = pt.l;
                                                encrypted = pt.xs0 + val + pt.xs1;
                                                /** @type {number} */
                                                i = 1;
                                                for (; i < pt.l; i++) {
                                                    encrypted = encrypted + (pt["xn" + i] + pt["xs" + (i + 1)]);
                                                }
                                                pt.t[pt.p] = encrypted;
                                            }
                                        } else {
                                            pt.t[pt.p] = val + pt.xs0;
                                        }
                                    } else {
                                        pt.t[pt.p] = pt.e;
                                    }
                                } else {
                                    pt.setRatio(v);
                                }
                                pt = pt._next;
                            }
                        }
                    };
                    /**
                     * @param {boolean} addedRenderer
                     * @return {undefined}
                     */
                    p._enableTransforms = function (addedRenderer) {
                        this._transform = this._transform || _getTransform(this._target, _cs, true);
                        /** @type {number} */
                        this._transformType = this._transform.svg && target || !addedRenderer && 3 !== this._transformType ? 2 : 3;
                    };
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    var _setClassNameRatio = function (v) {
                        this.t[this.p] = this.e;
                        this.data._linkCSSP(this, this._next, null, true);
                    };
                    /**
                     * @param {string} target
                     * @param {string} opacity
                     * @param {number} i
                     * @return {undefined}
                     */
                    p._addLazySet = function (target, opacity, i) {
                        var pt = this._firstPT = new CSSPropTween(target, opacity, 0, 0, this._firstPT, 2);
                        /** @type {number} */
                        pt.e = i;
                        /** @type {function(number): undefined} */
                        pt.setRatio = _setClassNameRatio;
                        pt.data = this;
                    };
                    /**
                     * @param {string} pt
                     * @param {string} next
                     * @param {string} prev
                     * @param {string} remove
                     * @return {?}
                     */
                    p._linkCSSP = function (pt, next, prev, remove) {
                        return pt && (next && (next._prev = pt), pt._next && (pt._next._prev = pt._prev), pt._prev ? pt._prev._next = pt._next : this._firstPT === pt && (this._firstPT = pt._next, remove = true), prev ? prev._next = pt : remove || null !== this._firstPT || (this._firstPT = pt), pt._next = next, pt._prev = prev), pt;
                    };
                    /**
                     * @param {!Object} lookup
                     * @return {undefined}
                     */
                    p._mod = function (lookup) {
                        var pt = this._firstPT;
                        for (; pt;) {
                            if ("function" == typeof lookup[pt.p] && lookup[pt.p] === Math.round) {
                                /** @type {number} */
                                pt.r = 1;
                            }
                            pt = pt._next;
                        }
                    };
                    /**
                     * @param {!Object} lookup
                     * @return {?}
                     */
                    p._kill = function (lookup) {
                        var pt;
                        var i;
                        var xfirst;
                        /** @type {!Object} */
                        var value = lookup;
                        if (lookup.autoAlpha || lookup.alpha) {
                            value = {};
                            for (i in lookup) {
                                value[i] = lookup[i];
                            }
                            /** @type {number} */
                            value.opacity = 1;
                            if (value.autoAlpha) {
                                /** @type {number} */
                                value.visibility = 1;
                            }
                        }
                        if (lookup.className && (pt = this._classNamePT)) {
                            xfirst = pt.xfirst;
                            if (xfirst && xfirst._prev) {
                                this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev);
                            } else {
                                if (xfirst === this._firstPT) {
                                    this._firstPT = pt._next;
                                }
                            }
                            if (pt._next) {
                                this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
                            }
                            /** @type {null} */
                            this._classNamePT = null;
                        }
                        pt = this._firstPT;
                        for (; pt;) {
                            if (pt.plugin && pt.plugin !== i && pt.plugin._kill) {
                                pt.plugin._kill(lookup);
                                i = pt.plugin;
                            }
                            pt = pt._next;
                        }
                        return TweenPlugin.prototype._kill.call(this, value);
                    };
                    /**
                     * @param {!Object} t
                     * @param {!Array} res
                     * @param {!Array} body
                     * @return {undefined}
                     */
                    var concat = function (t, res, body) {
                        var s;
                        var i;
                        var r;
                        var a;
                        if (t.slice) {
                            i = t.length;
                            for (; --i > -1;) {
                                concat(t[i], res, body);
                            }
                        } else {
                            s = t.childNodes;
                            i = s.length;
                            for (; --i > -1;) {
                                r = s[i];
                                a = r.type;
                                if (r.style) {
                                    res.push(_getAllStyles(r));
                                    if (body) {
                                        body.push(r);
                                    }
                                }
                                if (!(1 !== a && 9 !== a && 11 !== a || !r.childNodes.length)) {
                                    concat(r, res, body);
                                }
                            }
                        }
                    };
                    return CSSPlugin.cascadeTo = function (target, duration, params) {
                        var i;
                        var e;
                        var prop;
                        var from;
                        var p = TweenLite.to(target, duration, params);
                        /** @type {!Array} */
                        var d = [p];
                        /** @type {!Array} */
                        var res = [];
                        /** @type {!Array} */
                        var files = [];
                        /** @type {!Array} */
                        var body = [];
                        var copiedStyle = TweenLite._internals.reservedProps;
                        target = p._targets || p.target;
                        concat(target, res, body);
                        p.render(duration, true, true);
                        concat(target, files);
                        p.render(0, true, true);
                        p._enabled(true);
                        /** @type {number} */
                        i = body.length;
                        for (; --i > -1;) {
                            if (e = _cssDif(body[i], res[i], files[i]), e.firstMPT) {
                                e = e.difs;
                                for (prop in params) {
                                    if (copiedStyle[prop]) {
                                        e[prop] = params[prop];
                                    }
                                }
                                from = {};
                                for (prop in e) {
                                    from[prop] = res[i][prop];
                                }
                                d.push(TweenLite.fromTo(body[i], duration, from, e));
                            }
                        }
                        return d;
                    }, TweenPlugin.activate([CSSPlugin]), CSSPlugin;
                }, true);
                (function () {
                    var GLElementResolver = options._gsDefine.plugin({
                        propName: "roundProps",
                        version: "1.6.0",
                        priority: -1,
                        API: 2,
                        init: function (agencyEndpointsFile, params, value) {
                            return this._tween = value, true;
                        }
                    });
                    /**
                     * @param {!Object} node
                     * @return {undefined}
                     */
                    var _roundLinkedList = function (node) {
                        for (; node;) {
                            if (!(node.f || node.blob)) {
                                /** @type {function(?): number} */
                                node.m = Math.round;
                            }
                            node = node._next;
                        }
                    };
                    var p = GLElementResolver.prototype;
                    /**
                     * @return {?}
                     */
                    p._onInitAllProps = function () {
                        var prop;
                        var pt;
                        var next;
                        var tween = this._tween;
                        var path = tween.vars.roundProps.join ? tween.vars.roundProps : tween.vars.roundProps.split(",");
                        var i = path.length;
                        var lookup = {};
                        var rpt = tween._propLookup.roundProps;
                        for (; --i > -1;) {
                            /** @type {function(?): number} */
                            lookup[path[i]] = Math.round;
                        }
                        i = path.length;
                        for (; --i > -1;) {
                            prop = path[i];
                            pt = tween._firstPT;
                            for (; pt;) {
                                next = pt._next;
                                if (pt.pg) {
                                    pt.t._mod(lookup);
                                } else {
                                    if (pt.n === prop) {
                                        if (2 === pt.f && pt.t) {
                                            _roundLinkedList(pt.t._firstPT);
                                        } else {
                                            this._add(pt.t, prop, pt.s, pt.c);
                                            if (next) {
                                                next._prev = pt._prev;
                                            }
                                            if (pt._prev) {
                                                pt._prev._next = next;
                                            } else {
                                                if (tween._firstPT === pt) {
                                                    tween._firstPT = next;
                                                }
                                            }
                                            /** @type {null} */
                                            pt._next = pt._prev = null;
                                            tween._propLookup[prop] = rpt;
                                        }
                                    }
                                }
                                pt = next;
                            }
                        }
                        return false;
                    };
                    /**
                     * @param {!Object} target
                     * @param {!Array} p
                     * @param {string} s
                     * @param {string} c
                     * @return {undefined}
                     */
                    p._add = function (target, p, s, c) {
                        this._addTween(target, p, s, s + c, p, Math.round);
                        this._overwriteProps.push(p);
                    };
                })();
                (function () {
                    options._gsDefine.plugin({
                        propName: "attr",
                        API: 2,
                        version: "0.6.1",
                        init: function (target, prop, setting, defaultValue) {
                            var p;
                            var value;
                            if ("function" != typeof target.setAttribute) {
                                return false;
                            }
                            for (p in prop) {
                                value = prop[p];
                                if ("function" == typeof value) {
                                    value = value(defaultValue, target);
                                }
                                this._addTween(target, "setAttribute", target.getAttribute(p) + "", value + "", p, false, p);
                                this._overwriteProps.push(p);
                            }
                            return true;
                        }
                    });
                })();
                /** @type {boolean} */
                options._gsDefine.plugin({
                    propName: "directionalRotation",
                    version: "0.3.1",
                    API: 2,
                    init: function (target, value, total, elem) {
                        if ("object" != typeof value) {
                            value = {
                                rotation: value
                            };
                        }
                        this.finals = {};
                        var p;
                        var v;
                        var start;
                        var val;
                        var dif;
                        var b;
                        /** @type {number} */
                        var cap = true === value.useRadians ? 2 * Math.PI : 360;
                        for (p in value) {
                            if ("useRadians" !== p) {
                                val = value[p];
                                if ("function" == typeof val) {
                                    val = val(elem, target);
                                }
                                /** @type {!Array<string>} */
                                b = (val + "").split("_");
                                /** @type {string} */
                                v = b[0];
                                /** @type {number} */
                                start = parseFloat("function" != typeof target[p] ? target[p] : target[p.indexOf("set") || "function" != typeof target["get" + p.substr(3)] ? p : "get" + p.substr(3)]());
                                /** @type {number} */
                                val = this.finals[p] = "string" == typeof v && "=" === v.charAt(1) ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                                /** @type {number} */
                                dif = val - start;
                                if (b.length) {
                                    /** @type {string} */
                                    v = b.join("_");
                                    if (-1 !== v.indexOf("short") && (dif = dif % cap) !== dif % (cap / 2)) {
                                        /** @type {number} */
                                        dif = dif < 0 ? dif + cap : dif - cap;
                                    }
                                    if (-1 !== v.indexOf("_cw") && dif < 0) {
                                        /** @type {number} */
                                        dif = (dif + 9999999999 * cap) % cap - (dif / cap | 0) * cap;
                                    } else {
                                        if (-1 !== v.indexOf("ccw") && dif > 0) {
                                            /** @type {number} */
                                            dif = (dif - 9999999999 * cap) % cap - (dif / cap | 0) * cap;
                                        }
                                    }
                                }
                                if (dif > 1e-6 || dif < -1e-6) {
                                    this._addTween(target, p, start, start + dif, p);
                                    this._overwriteProps.push(p);
                                }
                            }
                        }
                        return true;
                    },
                    set: function (type) {
                        var pt;
                        if (1 !== type) {
                            this._super.setRatio.call(this, type);
                        } else {
                            pt = this._firstPT;
                            for (; pt;) {
                                if (pt.f) {
                                    pt.t[pt.p](this.finals[pt.p]);
                                } else {
                                    pt.t[pt.p] = this.finals[pt.p];
                                }
                                pt = pt._next;
                            }
                        }
                    }
                })._autoCSS = true;
                options._gsDefine("easing.Back", ["easing.Ease"], function (Ease) {
                    var c;
                    var SlowMo;
                    var _createElastic;
                    var _globals = options.GreenSockGlobals || options;
                    var gs = _globals.com.greensock;
                    /** @type {number} */
                    var _2PI = 2 * Math.PI;
                    /** @type {number} */
                    var i = Math.PI / 2;
                    var _class = gs._class;
                    /**
                     * @param {string} n
                     * @param {!Function} f
                     * @return {?}
                     */
                    var _create = function (n, f) {
                        var SlowMo = _class("easing." + n, function () {
                        }, true);
                        var p = SlowMo.prototype = new Ease;
                        return p.constructor = SlowMo, p.getRatio = f, SlowMo;
                    };
                    var callback = Ease.register || function () {
                    };
                    /**
                     * @param {string} obj
                     * @param {?} p
                     * @param {?} u
                     * @param {?} n
                     * @param {?} results
                     * @return {?}
                     */
                    var a = function (obj, p, u, n, results) {
                        var value = _class("easing." + obj, {
                            easeOut: new p,
                            easeIn: new u,
                            easeInOut: new n
                        }, true);
                        return callback(value, obj), value;
                    };
                    /**
                     * @param {!Object} time
                     * @param {number} index
                     * @param {!Object} data
                     * @return {undefined}
                     */
                    var constructor = function (time, index, data) {
                        /** @type {!Object} */
                        this.t = time;
                        /** @type {number} */
                        this.v = index;
                        if (data) {
                            /** @type {!Object} */
                            this.next = data;
                            data.prev = this;
                            /** @type {number} */
                            this.c = data.v - index;
                            /** @type {number} */
                            this.gap = data.t - time;
                        }
                    };
                    /**
                     * @param {string} n
                     * @param {!Function} f
                     * @return {?}
                     */
                    var _createBack = function (n, f) {
                        var SlowMo = _class("easing." + n, function (overshoot) {
                            this._p1 = overshoot || 0 === overshoot ? overshoot : 1.70158;
                            /** @type {number} */
                            this._p2 = 1.525 * this._p1;
                        }, true);
                        var p = SlowMo.prototype = new Ease;
                        return p.constructor = SlowMo, p.getRatio = f, p.config = function (linearRatio) {
                            return new SlowMo(linearRatio);
                        }, SlowMo;
                    };
                    var itemBack = a("Back", _createBack("BackOut", function (p) {
                        return (p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1;
                    }), _createBack("BackIn", function (p) {
                        return p * p * ((this._p1 + 1) * p - this._p1);
                    }), _createBack("BackInOut", function (p) {
                        return (p = p * 2) < 1 ? .5 * p * p * ((this._p2 + 1) * p - this._p2) : .5 * ((p = p - 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
                    }));
                    var SteppedEase = _class("easing.SlowMo", function (p2, power, i) {
                        power = power || 0 === power ? power : .7;
                        if (null == p2) {
                            /** @type {number} */
                            p2 = .7;
                        } else {
                            if (p2 > 1) {
                                /** @type {number} */
                                p2 = 1;
                            }
                        }
                        this._p = 1 !== p2 ? power : 0;
                        /** @type {number} */
                        this._p1 = (1 - p2) / 2;
                        /** @type {number} */
                        this._p2 = p2;
                        this._p3 = this._p1 + this._p2;
                        /** @type {boolean} */
                        this._calcEnd = true === i;
                    }, true);
                    var p = SteppedEase.prototype = new Ease;
                    return p.constructor = SteppedEase, p.getRatio = function (p) {
                        var r = p + (.5 - p) * this._p;
                        return p < this._p1 ? this._calcEnd ? 1 - (p = 1 - p / this._p1) * p : r - (p = 1 - p / this._p1) * p * p * p * r : p > this._p3 ? this._calcEnd ? 1 === p ? 0 : 1 - (p = (p - this._p3) / this._p1) * p : r + (p - r) * (p = (p - this._p3) / this._p1) * p * p * p : this._calcEnd ? 1 : r;
                    }, SteppedEase.ease = new SteppedEase(.7, .7), p.config = SteppedEase.config = function (steps, callback, config) {
                        return new SteppedEase(steps, callback, config);
                    }, c = _class("easing.SteppedEase", function (steps, canCreateDiscussions) {
                        steps = steps || 1;
                        /** @type {number} */
                        this._p1 = 1 / steps;
                        this._p2 = steps + (canCreateDiscussions ? 0 : 1);
                        /** @type {number} */
                        this._p3 = canCreateDiscussions ? 1 : 0;
                    }, true), p = c.prototype = new Ease, p.constructor = c, p.getRatio = function (h) {
                        return h < 0 ? h = 0 : h >= 1 && (h = .999999999), ((this._p2 * h | 0) + this._p3) * this._p1;
                    }, p.config = c.config = function (cfg, ctx) {
                        return new c(cfg, ctx);
                    }, SlowMo = _class("easing.RoughEase", function (options) {
                        options = options || {};
                        var x;
                        var value;
                        var stddev;
                        var y;
                        var match;
                        var widget;
                        var type = options.taper || "none";
                        /** @type {!Array} */
                        var result = [];
                        /** @type {number} */
                        var j = 0;
                        /** @type {number} */
                        var len = 0 | (options.points || 20);
                        /** @type {number} */
                        var i = len;
                        /** @type {boolean} */
                        var noGradient = false !== options.randomize;
                        /** @type {boolean} */
                        var horizontal = true === options.clamp;
                        var m = options.template instanceof Ease ? options.template : null;
                        /** @type {number} */
                        var diffCosAngle = "number" == typeof options.strength ? .4 * options.strength : .4;
                        for (; --i > -1;) {
                            /** @type {number} */
                            x = noGradient ? Math.random() : 1 / len * i;
                            value = m ? m.getRatio(x) : x;
                            if ("none" === type) {
                                /** @type {number} */
                                stddev = diffCosAngle;
                            } else {
                                if ("out" === type) {
                                    /** @type {number} */
                                    y = 1 - x;
                                    /** @type {number} */
                                    stddev = y * y * diffCosAngle;
                                } else {
                                    if ("in" === type) {
                                        /** @type {number} */
                                        stddev = x * x * diffCosAngle;
                                    } else {
                                        if (x < .5) {
                                            /** @type {number} */
                                            y = 2 * x;
                                            /** @type {number} */
                                            stddev = y * y * .5 * diffCosAngle;
                                        } else {
                                            /** @type {number} */
                                            y = 2 * (1 - x);
                                            /** @type {number} */
                                            stddev = y * y * .5 * diffCosAngle;
                                        }
                                    }
                                }
                            }
                            if (noGradient) {
                                value = value + (Math.random() * stddev - .5 * stddev);
                            } else {
                                if (i % 2) {
                                    value = value + .5 * stddev;
                                } else {
                                    /** @type {number} */
                                    value = value - .5 * stddev;
                                }
                            }
                            if (horizontal) {
                                if (value > 1) {
                                    /** @type {number} */
                                    value = 1;
                                } else {
                                    if (value < 0) {
                                        /** @type {number} */
                                        value = 0;
                                    }
                                }
                            }
                            result[j++] = {
                                x: x,
                                y: value
                            };
                        }
                        result.sort(function (curr, cp) {
                            return curr.x - cp.x;
                        });
                        widget = new constructor(1, 1, null);
                        /** @type {number} */
                        i = len;
                        for (; --i > -1;) {
                            match = result[i];
                            widget = new constructor(match.x, match.y, widget);
                        }
                        this._prev = new constructor(0, 0, 0 !== widget.t ? widget : widget.next);
                    }, true), p = SlowMo.prototype = new Ease, p.constructor = SlowMo, p.getRatio = function (t) {
                        var item = this._prev;
                        if (t > item.t) {
                            for (; item.next && t >= item.t;) {
                                item = item.next;
                            }
                            item = item.prev;
                        } else {
                            for (; item.prev && t <= item.t;) {
                                item = item.prev;
                            }
                        }
                        return this._prev = item, item.v + (t - item.t) / item.gap * item.c;
                    }, p.config = function (linearRatio) {
                        return new SlowMo(linearRatio);
                    }, SlowMo.ease = new SlowMo, a("Bounce", _create("BounceOut", function (t) {
                        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t = t - 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t = t - 2.25 / 2.75) * t + .9375 : 7.5625 * (t = t - 2.625 / 2.75) * t + .984375;
                    }), _create("BounceIn", function (x2) {
                        return (x2 = 1 - x2) < 1 / 2.75 ? 1 - 7.5625 * x2 * x2 : x2 < 2 / 2.75 ? 1 - (7.5625 * (x2 = x2 - 1.5 / 2.75) * x2 + .75) : x2 < 2.5 / 2.75 ? 1 - (7.5625 * (x2 = x2 - 2.25 / 2.75) * x2 + .9375) : 1 - (7.5625 * (x2 = x2 - 2.625 / 2.75) * x2 + .984375);
                    }), _create("BounceInOut", function (v) {
                        /** @type {boolean} */
                        var r = v < .5;
                        return v = r ? 1 - 2 * v : 2 * v - 1, v < 1 / 2.75 ? v = v * (7.5625 * v) : v = v < 2 / 2.75 ? 7.5625 * (v = v - 1.5 / 2.75) * v + .75 : v < 2.5 / 2.75 ? 7.5625 * (v = v - 2.25 / 2.75) * v + .9375 : 7.5625 * (v = v - 2.625 / 2.75) * v + .984375, r ? .5 * (1 - v) : .5 * v + .5;
                    })), a("Circ", _create("CircOut", function (t) {
                        return Math.sqrt(1 - (t = t - 1) * t);
                    }), _create("CircIn", function (rayY) {
                        return -(Math.sqrt(1 - rayY * rayY) - 1);
                    }), _create("CircInOut", function (t) {
                        return (t = t * 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t = t - 2) * t) + 1);
                    })), _createElastic = function (n, f, def) {
                        var SlowMo = _class("easing." + n, function (b, value) {
                            this._p1 = b >= 1 ? b : 1;
                            /** @type {number} */
                            this._p2 = (value || def) / (b < 1 ? b : 1);
                            /** @type {number} */
                            this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                            /** @type {number} */
                            this._p2 = _2PI / this._p2;
                        }, true);
                        var p = SlowMo.prototype = new Ease;
                        return p.constructor = SlowMo, p.getRatio = f, p.config = function (linearRatio, power) {
                            return new SlowMo(linearRatio, power);
                        }, SlowMo;
                    }, a("Elastic", _createElastic("ElasticOut", function (p) {
                        return this._p1 * Math.pow(2, -10 * p) * Math.sin((p - this._p3) * this._p2) + 1;
                    }, .3), _createElastic("ElasticIn", function (p) {
                        return -this._p1 * Math.pow(2, 10 * (p = p - 1)) * Math.sin((p - this._p3) * this._p2);
                    }, .3), _createElastic("ElasticInOut", function (p) {
                        return (p = p * 2) < 1 ? this._p1 * Math.pow(2, 10 * (p = p - 1)) * Math.sin((p - this._p3) * this._p2) * -.5 : this._p1 * Math.pow(2, -10 * (p = p - 1)) * Math.sin((p - this._p3) * this._p2) * .5 + 1;
                    }, .45)), a("Expo", _create("ExpoOut", function (size) {
                        return 1 - Math.pow(2, -10 * size);
                    }), _create("ExpoIn", function (canCreateDiscussions) {
                        return Math.pow(2, 10 * (canCreateDiscussions - 1)) - .001;
                    }), _create("ExpoInOut", function (s) {
                        return (s = s * 2) < 1 ? .5 * Math.pow(2, 10 * (s - 1)) : .5 * (2 - Math.pow(2, -10 * (s - 1)));
                    })), a("Sine", _create("SineOut", function (value) {
                        return Math.sin(value * i);
                    }), _create("SineIn", function (value) {
                        return 1 - Math.cos(value * i);
                    }), _create("SineInOut", function (theta) {
                        return -.5 * (Math.cos(Math.PI * theta) - 1);
                    })), _class("easing.EaseLookup", {
                        find: function (collectionName) {
                            return Ease.map[collectionName];
                        }
                    }, true), callback(_globals.SlowMo, "SlowMo", "ease,"), callback(SlowMo, "RoughEase", "ease,"), callback(c, "SteppedEase", "ease,"), itemBack;
                }, true);
            });
            if (options._gsDefine) {
                options._gsQueue.pop()();
            }
            (function (window, canCreateDiscussions) {
                var _exports = {};
                var document = window.document;
                var _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
                if (!_globals.TweenLite) {
                    var a;
                    var i;
                    var p;
                    var _ticker;
                    var cvalue;
                    /**
                     * @param {string} event
                     * @return {?}
                     */
                    var _namespace = function (event) {
                        var layer_i;
                        var crossfilterable_layers = event.split(".");
                        var p = _globals;
                        /** @type {number} */
                        layer_i = 0;
                        for (; layer_i < crossfilterable_layers.length; layer_i++) {
                            p[crossfilterable_layers[layer_i]] = p = p[crossfilterable_layers[layer_i]] || {};
                        }
                        return p;
                    };
                    var gs = _namespace("com.greensock");
                    /**
                     * @param {!Object} a
                     * @return {?}
                     */
                    var _slice = function (a) {
                        var i;
                        /** @type {!Array} */
                        var b = [];
                        var n = a.length;
                        /** @type {number} */
                        i = 0;
                        for (; i !== n; b.push(a[i++])) {
                        }
                        return b;
                    };
                    /**
                     * @return {undefined}
                     */
                    var NPM = function () {
                    };
                    var _isArray = function () {
                        /** @type {function(this:*): string} */
                        var objectToString$2 = Object.prototype.toString;
                        /** @type {string} */
                        var referenceerror = objectToString$2.call([]);
                        return function (value) {
                            return null != value && (value instanceof Array || "object" == typeof value && !!value.push && objectToString$2.call(value) === referenceerror);
                        };
                    }();
                    var _defLookup = {};
                    /**
                     * @param {string} ns
                     * @param {!Object} dependencies
                     * @param {!Function} func
                     * @param {?} global
                     * @return {undefined}
                     */
                    var Definition = function (ns, dependencies, func, global) {
                        this.sc = _defLookup[ns] ? _defLookup[ns].sc : [];
                        _defLookup[ns] = this;
                        /** @type {null} */
                        this.gsClass = null;
                        /** @type {!Function} */
                        this.func = func;
                        /** @type {!Array} */
                        var _classes = [];
                        /**
                         * @param {boolean} assertion
                         * @return {undefined}
                         */
                        this.check = function (assertion) {
                            var cur;
                            var result;
                            var n;
                            var cl;
                            var i = dependencies.length;
                            var numFrom = i;
                            for (; --i > -1;) {
                                if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                    _classes[i] = cur.gsClass;
                                    numFrom--;
                                } else {
                                    if (assertion) {
                                        cur.sc.push(this);
                                    }
                                }
                            }
                            if (0 === numFrom && func) {
                                if (result = ("com.greensock." + ns).split("."), n = result.pop(), cl = _namespace(result.join("."))[n] = this.gsClass = func.apply(func, _classes), global) {
                                    if (_globals[n] = _exports[n] = cl, void 0 !== module && module.exports) {
                                        if ("TweenMax" === ns) {
                                            module.exports = _exports.TweenMax = cl;
                                            for (i in _exports) {
                                                cl[i] = _exports[i];
                                            }
                                        } else {
                                            if (_exports.TweenMax) {
                                                _exports.TweenMax[n] = cl;
                                            }
                                        }
                                    } else {
                                        /** @type {!Array} */
                                        evaluatedParams = [];
                                        if (void 0 !== (r = function () {
                                                return cl;
                                            }.apply(items, evaluatedParams))) {
                                            module.exports = r;
                                        }
                                    }
                                }
                                /** @type {number} */
                                i = 0;
                                for (; i < this.sc.length; i++) {
                                    this.sc[i].check();
                                }
                            }
                        };
                        this.check(true);
                    };
                    /** @type {function(string, !Object, !Function, string): ?} */
                    var _gsDefine = window._gsDefine = function (name, dependencies, func, global) {
                        return new Definition(name, dependencies, func, global);
                    };
                    /** @type {function(string, !Function, boolean): ?} */
                    var _class = gs._class = function (ns, f, global) {
                        return f = f || function () {
                        }, _gsDefine(ns, [], function () {
                            return f;
                        }, global), f;
                    };
                    _gsDefine.globals = _globals;
                    /** @type {!Array} */
                    var _baseParams = [0, 0, 1, 1];
                    var Ease = _class("easing.Ease", function (f, extraParams, type, power) {
                        /** @type {!Function} */
                        this._func = f;
                        this._type = type || 0;
                        this._power = power || 0;
                        /** @type {!Array<?>} */
                        this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                    }, true);
                    var _easeMap = Ease.map = {};
                    /** @type {function(!Object, string, string, boolean): undefined} */
                    var _easeReg = Ease.register = function (ease, names, types, create) {
                        var e;
                        var name;
                        var i;
                        var type;
                        var r = names.split(",");
                        var j = r.length;
                        var values = (types || "easeIn,easeOut,easeInOut").split(",");
                        for (; --j > -1;) {
                            name = r[j];
                            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
                            i = values.length;
                            for (; --i > -1;) {
                                type = values[i];
                                _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease;
                            }
                        }
                    };
                    p = Ease.prototype;
                    /** @type {boolean} */
                    p._calcEnd = false;
                    /**
                     * @param {number} p
                     * @return {?}
                     */
                    p.getRatio = function (p) {
                        if (this._func) {
                            return this._params[0] = p, this._func.apply(null, this._params);
                        }
                        var type = this._type;
                        var pw = this._power;
                        var r = 1 === type ? 1 - p : 2 === type ? p : p < .5 ? 2 * p : 2 * (1 - p);
                        return 1 === pw ? r = r * r : 2 === pw ? r = r * (r * r) : 3 === pw ? r = r * (r * r * r) : 4 === pw && (r = r * (r * r * r * r)), 1 === type ? 1 - r : 2 === type ? r : p < .5 ? r / 2 : 1 - r / 2;
                    };
                    /** @type {!Array} */
                    a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
                    /** @type {number} */
                    i = a.length;
                    for (; --i > -1;) {
                        /** @type {string} */
                        p = a[i] + ",Power" + i;
                        _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
                        _easeReg(new Ease(null, null, 2, i), p, "easeIn" + (0 === i ? ",easeNone" : ""));
                        _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
                    }
                    _easeMap.linear = gs.easing.Linear.easeIn;
                    _easeMap.swing = gs.easing.Quad.easeInOut;
                    var EventDispatcher = _class("events.EventDispatcher", function (target) {
                        this._listeners = {};
                        this._eventTarget = target || this;
                    });
                    p = EventDispatcher.prototype;
                    /**
                     * @param {string} type
                     * @param {string} callback
                     * @param {string} scope
                     * @param {boolean} useParam
                     * @param {number} priority
                     * @return {undefined}
                     */
                    p.addEventListener = function (type, callback, scope, useParam, priority) {
                        priority = priority || 0;
                        var listener;
                        var i;
                        var list = this._listeners[type];
                        /** @type {number} */
                        var dfrom = 0;
                        if (!(this !== _ticker || cvalue)) {
                            _ticker.wake();
                        }
                        if (null == list) {
                            /** @type {!Array} */
                            this._listeners[type] = list = [];
                        }
                        i = list.length;
                        for (; --i > -1;) {
                            listener = list[i];
                            if (listener.c === callback && listener.s === scope) {
                                list.splice(i, 1);
                            } else {
                                if (0 === dfrom && listener.pr < priority) {
                                    dfrom = i + 1;
                                }
                            }
                        }
                        list.splice(dfrom, 0, {
                            c: callback,
                            s: scope,
                            up: useParam,
                            pr: priority
                        });
                    };
                    /**
                     * @param {string} event
                     * @param {!Function} callback
                     * @return {?}
                     */
                    p.removeEventListener = function (event, callback) {
                        var i;
                        var listeners = this._listeners[event];
                        if (listeners) {
                            i = listeners.length;
                            for (; --i > -1;) {
                                if (listeners[i].c === callback) {
                                    return void listeners.splice(i, 1);
                                }
                            }
                        }
                    };
                    /**
                     * @param {!Object} type
                     * @return {undefined}
                     */
                    p.dispatchEvent = function (type) {
                        var i;
                        var t;
                        var listener;
                        var listeners = this._listeners[type];
                        if (listeners) {
                            i = listeners.length;
                            if (i > 1) {
                                listeners = listeners.slice(0);
                            }
                            t = this._eventTarget;
                            for (; --i > -1;) {
                                if (listener = listeners[i]) {
                                    if (listener.up) {
                                        listener.c.call(listener.s || t, {
                                            type: type,
                                            target: t
                                        });
                                    } else {
                                        listener.c.call(listener.s || t);
                                    }
                                }
                            }
                        }
                    };
                    var name = window.requestAnimationFrame;
                    var _cancelAnimFrame = window.cancelAnimationFrame;
                    /** @type {function(): number} */
                    var _getTime = Date.now || function () {
                        return (new Date).getTime();
                    };
                    /** @type {number} */
                    var _lastUpdate = _getTime();
                    /** @type {!Array} */
                    a = ["ms", "moz", "webkit", "o"];
                    /** @type {number} */
                    i = a.length;
                    for (; --i > -1 && !name;) {
                        name = window[a[i] + "RequestAnimationFrame"];
                        _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
                    }
                    _class("Ticker", function (fps, Move) {
                        var _fps;
                        var type;
                        var i;
                        var _gap;
                        var _nextTime;
                        var _self = this;
                        /** @type {number} */
                        var _startTime = _getTime();
                        /** @type {(boolean|string)} */
                        var parent = !(false === Move || !name) && "auto";
                        /** @type {number} */
                        var _lagThreshold = 500;
                        /** @type {number} */
                        var _adjustedLag = 33;
                        /**
                         * @param {boolean} argCount
                         * @return {undefined}
                         */
                        var cb = function (argCount) {
                            var overlap;
                            var s;
                            /** @type {number} */
                            var elapsed = _getTime() - _lastUpdate;
                            if (elapsed > _lagThreshold) {
                                _startTime = _startTime + (elapsed - _adjustedLag);
                            }
                            _lastUpdate = _lastUpdate + elapsed;
                            /** @type {number} */
                            _self.time = (_lastUpdate - _startTime) / 1e3;
                            /** @type {number} */
                            overlap = _self.time - _nextTime;
                            if (!_fps || overlap > 0 || true === argCount) {
                                _self.frame++;
                                _nextTime = _nextTime + (overlap + (overlap >= _gap ? .004 : _gap - overlap));
                                /** @type {boolean} */
                                s = true;
                            }
                            if (true !== argCount) {
                                i = type(cb);
                            }
                            if (s) {
                                _self.dispatchEvent("tick");
                            }
                        };
                        EventDispatcher.call(_self);
                        /** @type {number} */
                        _self.time = _self.frame = 0;
                        /**
                         * @return {undefined}
                         */
                        _self.tick = function () {
                            cb(true);
                        };
                        /**
                         * @param {number} threshold
                         * @param {?} adjustedLag
                         * @return {?}
                         */
                        _self.lagSmoothing = function (threshold, adjustedLag) {
                            if (!arguments.length) {
                                return _lagThreshold < 1e10;
                            }
                            _lagThreshold = threshold || 1e10;
                            /** @type {number} */
                            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                        };
                        /**
                         * @return {undefined}
                         */
                        _self.sleep = function () {
                            if (null != i) {
                                if (parent && _cancelAnimFrame) {
                                    _cancelAnimFrame(i);
                                } else {
                                    clearTimeout(i);
                                }
                                /** @type {function(): undefined} */
                                type = NPM;
                                /** @type {null} */
                                i = null;
                                if (_self === _ticker) {
                                    /** @type {boolean} */
                                    cvalue = false;
                                }
                            }
                        };
                        /**
                         * @param {?} event
                         * @return {undefined}
                         */
                        _self.wake = function (event) {
                            if (null !== i) {
                                _self.sleep();
                            } else {
                                if (event) {
                                    _startTime = _startTime + (-_lastUpdate + (_lastUpdate = _getTime()));
                                } else {
                                    if (_self.frame > 10) {
                                        /** @type {number} */
                                        _lastUpdate = _getTime() - _lagThreshold + 5;
                                    }
                                }
                            }
                            type = 0 === _fps ? NPM : parent && name ? name : function (type) {
                                return setTimeout(type, 1e3 * (_nextTime - _self.time) + 1 | 0);
                            };
                            if (_self === _ticker) {
                                /** @type {boolean} */
                                cvalue = true;
                            }
                            cb(2);
                        };
                        /**
                         * @param {number} value
                         * @return {?}
                         */
                        _self.fps = function (value) {
                            if (!arguments.length) {
                                return _fps;
                            }
                            /** @type {number} */
                            _fps = value;
                            /** @type {number} */
                            _gap = 1 / (_fps || 60);
                            _nextTime = this.time + _gap;
                            _self.wake();
                        };
                        /**
                         * @param {boolean} value
                         * @return {?}
                         */
                        _self.useRAF = function (value) {
                            if (!arguments.length) {
                                return parent;
                            }
                            _self.sleep();
                            /** @type {boolean} */
                            parent = value;
                            _self.fps(_fps);
                        };
                        _self.fps(fps);
                        setTimeout(function () {
                            if ("auto" === parent && _self.frame < 5 && "hidden" !== document.visibilityState) {
                                _self.useRAF(false);
                            }
                        }, 1500);
                    });
                    p = gs.Ticker.prototype = new gs.events.EventDispatcher;
                    p.constructor = gs.Ticker;
                    var Animation = _class("core.Animation", function (duration, vars) {
                        if (this.vars = vars = vars || {}, this._duration = this._totalDuration = duration || 0, this._delay = Number(vars.delay) || 0, this._timeScale = 1, this._active = true === vars.immediateRender, this.data = vars.data, this._reversed = true === vars.reversed, _rootTimeline) {
                            if (!cvalue) {
                                _ticker.wake();
                            }
                            var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                            tl.add(this, tl._time);
                            if (this.vars.paused) {
                                this.paused(true);
                            }
                        }
                    });
                    _ticker = Animation.ticker = new gs.Ticker;
                    p = Animation.prototype;
                    /** @type {boolean} */
                    p._dirty = p._gc = p._initted = p._paused = false;
                    /** @type {number} */
                    p._totalTime = p._time = 0;
                    /** @type {number} */
                    p._rawPrevTime = -1;
                    /** @type {null} */
                    p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
                    /** @type {boolean} */
                    p._paused = false;
                    /**
                     * @return {undefined}
                     */
                    var _checkTimeout = function () {
                        if (cvalue && _getTime() - _lastUpdate > 2e3 && ("hidden" !== document.visibilityState || !_ticker.lagSmoothing())) {
                            _ticker.wake();
                        }
                        /** @type {number} */
                        var ref_wait = setTimeout(_checkTimeout, 2e3);
                        if (ref_wait.unref) {
                            ref_wait.unref();
                        }
                    };
                    _checkTimeout();
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.play = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.reversed(false).paused(false);
                    };
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.pause = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.paused(true);
                    };
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.resume = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.paused(false);
                    };
                    /**
                     * @param {number} time
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.seek = function (time, suppressEvents) {
                        return this.totalTime(Number(time), false !== suppressEvents);
                    };
                    /**
                     * @param {number} includeDelay
                     * @param {!Object} suppressEvents
                     * @return {?}
                     */
                    p.restart = function (includeDelay, suppressEvents) {
                        return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, false !== suppressEvents, true);
                    };
                    /**
                     * @param {number} from
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.reverse = function (from, suppressEvents) {
                        return null != from && this.seek(from || this.totalDuration(), suppressEvents), this.reversed(true).paused(false);
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {undefined}
                     */
                    p.render = function (time, suppressEvents, force) {
                    };
                    /**
                     * @return {?}
                     */
                    p.invalidate = function () {
                        return this._time = this._totalTime = 0, this._initted = this._gc = false, this._rawPrevTime = -1, !this._gc && this.timeline || this._enabled(true), this;
                    };
                    /**
                     * @return {?}
                     */
                    p.isActive = function () {
                        var rawTime;
                        var tl = this._timeline;
                        var startTime = this._startTime;
                        return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 1e-7;
                    };
                    /**
                     * @param {string} enabled
                     * @param {boolean} ignoreTimeline
                     * @return {?}
                     */
                    p._enabled = function (enabled, ignoreTimeline) {
                        return cvalue || _ticker.wake(), this._gc = !enabled, this._active = this.isActive(), true !== ignoreTimeline && (enabled && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !enabled && this.timeline && this._timeline._remove(this, true)), false;
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @return {?}
                     */
                    p._kill = function (vars, target) {
                        return this._enabled(false, false);
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @return {?}
                     */
                    p.kill = function (vars, target) {
                        return this._kill(vars, target), this;
                    };
                    /**
                     * @param {boolean} includeSelf
                     * @return {?}
                     */
                    p._uncache = function (includeSelf) {
                        var tween = includeSelf ? this : this.timeline;
                        for (; tween;) {
                            /** @type {boolean} */
                            tween._dirty = true;
                            tween = tween.timeline;
                        }
                        return this;
                    };
                    /**
                     * @param {!Object} params
                     * @return {?}
                     */
                    p._swapSelfInParams = function (params) {
                        var i = params.length;
                        var copy = params.concat();
                        for (; --i > -1;) {
                            if ("{self}" === params[i]) {
                                copy[i] = this;
                            }
                        }
                        return copy;
                    };
                    /**
                     * @param {string} type
                     * @return {undefined}
                     */
                    p._callback = function (type) {
                        var v = this.vars;
                        var cb = v[type];
                        var obj = v[type + "Params"];
                        var Y = v[type + "Scope"] || v.callbackScope || this;
                        switch (obj ? obj.length : 0) {
                            case 0:
                                cb.call(Y);
                                break;
                            case 1:
                                cb.call(Y, obj[0]);
                                break;
                            case 2:
                                cb.call(Y, obj[0], obj[1]);
                                break;
                            default:
                                cb.apply(Y, obj);
                        }
                    };
                    /**
                     * @param {string} type
                     * @param {!Function} callback
                     * @param {!Array} params
                     * @param {?} scope
                     * @return {?}
                     */
                    p.eventCallback = function (type, callback, params, scope) {
                        if ("on" === (type || "").substr(0, 2)) {
                            var v = this.vars;
                            if (1 === arguments.length) {
                                return v[type];
                            }
                            if (null == callback) {
                                delete v[type];
                            } else {
                                /** @type {!Function} */
                                v[type] = callback;
                                v[type + "Params"] = _isArray(params) && -1 !== params.join("").indexOf("{self}") ? this._swapSelfInParams(params) : params;
                                v[type + "Scope"] = scope;
                            }
                            if ("onUpdate" === type) {
                                /** @type {!Function} */
                                this._onUpdate = callback;
                            }
                        }
                        return this;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.delay = function (value) {
                        return arguments.length ? (this._timeline.smoothChildTiming && this.startTime(this._startTime + value - this._delay), this._delay = value, this) : this._delay;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.duration = function (value) {
                        return arguments.length ? (this._duration = this._totalDuration = value, this._uncache(true), this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== value && this.totalTime(this._totalTime * (value / this._duration), true), this) : (this._dirty = false, this._duration);
                    };
                    /**
                     * @param {undefined} value
                     * @return {?}
                     */
                    p.totalDuration = function (value) {
                        return this._dirty = false, arguments.length ? this.duration(value) : this._totalDuration;
                    };
                    /**
                     * @param {!Object} value
                     * @param {string} name
                     * @return {?}
                     */
                    p.time = function (value, name) {
                        return arguments.length ? (this._dirty && this.totalDuration(), this.totalTime(value > this._duration ? this._duration : value, name)) : this._time;
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} uncapped
                     * @return {?}
                     */
                    p.totalTime = function (time, suppressEvents, uncapped) {
                        if (cvalue || _ticker.wake(), !arguments.length) {
                            return this._totalTime;
                        }
                        if (this._timeline) {
                            if (time < 0 && !uncapped && (time = time + this.totalDuration()), this._timeline.smoothChildTiming) {
                                if (this._dirty) {
                                    this.totalDuration();
                                }
                                var totalDuration = this._totalDuration;
                                var tl = this._timeline;
                                if (time > totalDuration && !uncapped && (time = totalDuration), this._startTime = (this._paused ? this._pauseTime : tl._time) - (this._reversed ? totalDuration - time : time) / this._timeScale, tl._dirty || this._uncache(false), tl._timeline) {
                                    for (; tl._timeline;) {
                                        if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                            tl.totalTime(tl._totalTime, true);
                                        }
                                        tl = tl._timeline;
                                    }
                                }
                            }
                            if (this._gc) {
                                this._enabled(true, false);
                            }
                            if (!(this._totalTime === time && 0 !== this._duration)) {
                                if (_lazyTweens.length) {
                                    _lazyRender();
                                }
                                this.render(time, suppressEvents, false);
                                if (_lazyTweens.length) {
                                    _lazyRender();
                                }
                            }
                        }
                        return this;
                    };
                    /** @type {function(?, string): ?} */
                    p.progress = p.totalProgress = function (value, suppressEvents) {
                        var duration = this.duration();
                        return arguments.length ? this.totalTime(duration * value, suppressEvents) : duration ? this._time / duration : this.ratio;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.startTime = function (value) {
                        return arguments.length ? (value !== this._startTime && (this._startTime = value, this.timeline && this.timeline._sortChildren && this.timeline.add(this, value - this._delay)), this) : this._startTime;
                    };
                    /**
                     * @param {string} name
                     * @return {?}
                     */
                    p.endTime = function (name) {
                        return this._startTime + (0 != name ? this.totalDuration() : this.duration()) / this._timeScale;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.timeScale = function (value) {
                        if (!arguments.length) {
                            return this._timeScale;
                        }
                        var val;
                        var data;
                        value = value || 1e-10;
                        if (this._timeline && this._timeline.smoothChildTiming) {
                            val = this._pauseTime;
                            data = val || 0 === val ? val : this._timeline.totalTime();
                            /** @type {number} */
                            this._startTime = data - (data - this._startTime) * this._timeScale / value;
                        }
                        /** @type {number} */
                        this._timeScale = value;
                        data = this.timeline;
                        for (; data && data.timeline;) {
                            /** @type {boolean} */
                            data._dirty = true;
                            data.totalDuration();
                            data = data.timeline;
                        }
                        return this;
                    };
                    /**
                     * @param {string} value
                     * @return {?}
                     */
                    p.reversed = function (value) {
                        return arguments.length ? (value != this._reversed && (this._reversed = value, this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true)), this) : this._reversed;
                    };
                    /**
                     * @param {string} value
                     * @return {?}
                     */
                    p.paused = function (value) {
                        if (!arguments.length) {
                            return this._paused;
                        }
                        var raw;
                        var elapsed;
                        var tl = this._timeline;
                        return value != this._paused && tl && (cvalue || value || _ticker.wake(), raw = tl.rawTime(), elapsed = raw - this._pauseTime, !value && tl.smoothChildTiming && (this._startTime += elapsed, this._uncache(false)), this._pauseTime = value ? raw : null, this._paused = value, this._active = this.isActive(), !value && 0 !== elapsed && this._initted && this.duration() && (raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale, this.render(raw, raw === this._totalTime,
                            true))), this._gc && !value && this._enabled(true, false), this;
                    };
                    var SimpleTimeline = _class("core.SimpleTimeline", function (args) {
                        Animation.call(this, 0, args);
                        /** @type {boolean} */
                        this.autoRemoveChildren = this.smoothChildTiming = true;
                    });
                    p = SimpleTimeline.prototype = new Animation;
                    p.constructor = SimpleTimeline;
                    /** @type {boolean} */
                    p.kill()._gc = false;
                    /** @type {null} */
                    p._first = p._last = p._recent = null;
                    /** @type {boolean} */
                    p._sortChildren = false;
                    /** @type {function(!Object, number, ?, ?): ?} */
                    p.add = p.insert = function (child, position, fromNewID, toNewID) {
                        var prevTween;
                        var st;
                        if (child._startTime = Number(position || 0) + child._delay, child._paused && this !== child._timeline && (child._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale), child.timeline && child.timeline._remove(child, true), child.timeline = child._timeline = this, child._gc && child._enabled(true, true), prevTween = this._last, this._sortChildren) {
                            st = child._startTime;
                            for (; prevTween && prevTween._startTime > st;) {
                                prevTween = prevTween._prev;
                            }
                        }
                        return prevTween ? (child._next = prevTween._next, prevTween._next = child) : (child._next = this._first, this._first = child), child._next ? child._next._prev = child : this._last = child, child._prev = prevTween, this._recent = child, this._timeline && this._uncache(true), this;
                    };
                    /**
                     * @param {!Object} tween
                     * @param {string} skipDisable
                     * @return {?}
                     */
                    p._remove = function (tween, skipDisable) {
                        return tween.timeline === this && (skipDisable || tween._enabled(false, true), tween._prev ? tween._prev._next = tween._next : this._first === tween && (this._first = tween._next), tween._next ? tween._next._prev = tween._prev : this._last === tween && (this._last = tween._prev), tween._next = tween._prev = tween.timeline = null, tween === this._recent && (this._recent = this._last), this._timeline && this._uncache(true)), this;
                    };
                    /**
                     * @param {string} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {undefined}
                     */
                    p.render = function (time, suppressEvents, force) {
                        var next;
                        var tween = this._first;
                        this._totalTime = this._time = this._rawPrevTime = time;
                        for (; tween;) {
                            next = tween._next;
                            if (tween._active || time >= tween._startTime && !tween._paused && !tween._gc) {
                                if (tween._reversed) {
                                    tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                } else {
                                    tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                }
                            }
                            tween = next;
                        }
                    };
                    /**
                     * @return {?}
                     */
                    p.rawTime = function () {
                        return cvalue || _ticker.wake(), this._totalTime;
                    };
                    var TweenLite = _class("TweenLite", function (target, duration, args) {
                        if (Animation.call(this, duration, args), this.render = TweenLite.prototype.render, null == target) {
                            throw "Cannot tween a null target.";
                        }
                        this.target = target = "string" != typeof target ? target : TweenLite.selector(target) || target;
                        var i;
                        var targ;
                        var targets;
                        var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType);
                        var overwrite = this.vars.overwrite;
                        if (this._overwrite = overwrite = null == overwrite ? _overwriteLookup[TweenLite.defaultOverwrite] : "number" == typeof overwrite ? overwrite >> 0 : _overwriteLookup[overwrite], (isSelector || target instanceof Array || target.push && _isArray(target)) && "number" != typeof target[0]) {
                            this._targets = targets = _slice(target);
                            /** @type {!Array} */
                            this._propLookup = [];
                            /** @type {!Array} */
                            this._siblings = [];
                            /** @type {number} */
                            i = 0;
                            for (; i < targets.length; i++) {
                                targ = targets[i];
                                if (targ) {
                                    if ("string" != typeof targ) {
                                        if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {
                                            targets.splice(i--, 1);
                                            this._targets = targets = targets.concat(_slice(targ));
                                        } else {
                                            this._siblings[i] = _register(targ, this, false);
                                            if (1 === overwrite && this._siblings[i].length > 1) {
                                                _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                                            }
                                        }
                                    } else {
                                        if ("string" == typeof(targ = targets[i--] = TweenLite.selector(targ))) {
                                            targets.splice(i + 1, 1);
                                        }
                                    }
                                } else {
                                    targets.splice(i--, 1);
                                }
                            }
                        } else {
                            this._propLookup = {};
                            this._siblings = _register(target, this, false);
                            if (1 === overwrite && this._siblings.length > 1) {
                                _applyOverwrite(target, this, null, 1, this._siblings);
                            }
                        }
                        if (this.vars.immediateRender || 0 === duration && 0 === this._delay && false !== this.vars.immediateRender) {
                            /** @type {number} */
                            this._time = -1e-10;
                            this.render(Math.min(0, -this._delay));
                        }
                    }, true);
                    /**
                     * @param {!Object} v
                     * @return {?}
                     */
                    var _isSelector = function (v) {
                        return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType);
                    };
                    /**
                     * @param {(Object|string)} vars
                     * @param {!Object} obj
                     * @return {undefined}
                     */
                    var _autoCSS = function (vars, obj) {
                        var undefined;
                        var val = {};
                        for (undefined in vars) {
                            if (!(j[undefined] || undefined in obj && "transform" !== undefined && "x" !== undefined && "y" !== undefined && "width" !== undefined && "height" !== undefined && "className" !== undefined && "border" !== undefined || !(!_plugins[undefined] || _plugins[undefined] && _plugins[undefined]._autoCSS))) {
                                val[undefined] = vars[undefined];
                                delete vars[undefined];
                            }
                        }
                        vars.css = val;
                    };
                    p = TweenLite.prototype = new Animation;
                    p.constructor = TweenLite;
                    /** @type {boolean} */
                    p.kill()._gc = false;
                    /** @type {number} */
                    p.ratio = 0;
                    /** @type {null} */
                    p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
                    /** @type {boolean} */
                    p._notifyPluginsOfEnabled = p._lazy = false;
                    /** @type {string} */
                    TweenLite.version = "1.20.3";
                    TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
                    /** @type {string} */
                    TweenLite.defaultOverwrite = "auto";
                    TweenLite.ticker = _ticker;
                    /** @type {number} */
                    TweenLite.autoSleep = 120;
                    /**
                     * @param {number} threshold
                     * @param {?} adjustedLag
                     * @return {undefined}
                     */
                    TweenLite.lagSmoothing = function (threshold, adjustedLag) {
                        _ticker.lagSmoothing(threshold, adjustedLag);
                    };
                    TweenLite.selector = window.$ || window.jQuery || function (e) {
                        var selector = window.$ || window.jQuery;
                        return selector ? (TweenLite.selector = selector, selector(e)) : void 0 === document ? e : document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById("#" === e.charAt(0) ? e.substr(1) : e);
                    };
                    /** @type {!Array} */
                    var _lazyTweens = [];
                    var _lazyLookup = {};
                    /** @type {!RegExp} */
                    var METADATA_REGEX = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;
                    /** @type {!RegExp} */
                    var rtUtils = /[\+-]=-?[\.\d]/;
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    var _setRatio = function (v) {
                        var value;
                        var pt = this._firstPT;
                        for (; pt;) {
                            value = pt.blob ? 1 === v && null != this.end ? this.end : v ? this.join("") : this.start : pt.c * v + pt.s;
                            if (pt.m) {
                                value = pt.m(value, this._target || pt.t);
                            } else {
                                if (value < 1e-6 && value > -1e-6 && !pt.blob) {
                                    /** @type {number} */
                                    value = 0;
                                }
                            }
                            if (pt.f) {
                                if (pt.fp) {
                                    pt.t[pt.p](pt.fp, value);
                                } else {
                                    pt.t[pt.p](value);
                                }
                            } else {
                                pt.t[pt.p] = value;
                            }
                            pt = pt._next;
                        }
                    };
                    /**
                     * @param {string} i
                     * @param {string} o
                     * @param {?} filter
                     * @param {!Object} pt
                     * @return {?}
                     */
                    var _blobDif = function (i, o, filter, pt) {
                        var p;
                        var regItemDeps;
                        var x;
                        var n;
                        var regItemDepLen;
                        var text;
                        var v;
                        /** @type {!Array} */
                        var a = [];
                        /** @type {number} */
                        var start = 0;
                        /** @type {string} */
                        var result = "";
                        /** @type {number} */
                        var color = 0;
                        /** @type {string} */
                        a.start = i;
                        /** @type {string} */
                        a.end = o;
                        /** @type {string} */
                        i = a[0] = i + "";
                        /** @type {string} */
                        o = a[1] = o + "";
                        if (filter) {
                            filter(a);
                            i = a[0];
                            o = a[1];
                        }
                        /** @type {number} */
                        a.length = 0;
                        p = i.match(METADATA_REGEX) || [];
                        regItemDeps = o.match(METADATA_REGEX) || [];
                        if (pt) {
                            /** @type {null} */
                            pt._next = null;
                            /** @type {number} */
                            pt.blob = 1;
                            a._firstPT = a._applyPT = pt;
                        }
                        regItemDepLen = regItemDeps.length;
                        /** @type {number} */
                        n = 0;
                        for (; n < regItemDepLen; n++) {
                            v = regItemDeps[n];
                            text = o.substr(start, o.indexOf(v, start) - start);
                            /** @type {string} */
                            result = result + (text || !n ? text : ",");
                            start = start + text.length;
                            if (color) {
                                /** @type {number} */
                                color = (color + 1) % 5;
                            } else {
                                if ("rgba(" === text.substr(-5)) {
                                    /** @type {number} */
                                    color = 1;
                                }
                            }
                            if (v === p[n] || p.length <= n) {
                                /** @type {string} */
                                result = result + v;
                            } else {
                                if (result) {
                                    a.push(result);
                                    /** @type {string} */
                                    result = "";
                                }
                                /** @type {number} */
                                x = parseFloat(p[n]);
                                a.push(x);
                                a._firstPT = {
                                    _next: a._firstPT,
                                    t: a,
                                    p: a.length - 1,
                                    s: x,
                                    c: ("=" === v.charAt(1) ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) : parseFloat(v) - x) || 0,
                                    f: 0,
                                    m: color && color < 4 ? Math.round : 0
                                };
                            }
                            start = start + v.length;
                        }
                        return result = result + o.substr(start), result && a.push(result), a.setRatio = _setRatio, rtUtils.test(o) && (a.end = null), a;
                    };
                    /**
                     * @param {!Object} target
                     * @param {string} prop
                     * @param {string} start
                     * @param {!Object} end
                     * @param {string} n
                     * @param {number} a
                     * @param {boolean} funcParam
                     * @param {string} stringFilter
                     * @param {number} index
                     * @return {?}
                     */
                    var _addPropTween = function (target, prop, start, end, n, a, funcParam, stringFilter, index) {
                        if ("function" == typeof end) {
                            end = end(index || 0, target);
                        }
                        var blob;
                        /** @type {string} */
                        var type = typeof target[prop];
                        var id = "function" !== type ? "" : prop.indexOf("set") || "function" != typeof target["get" + prop.substr(3)] ? prop : "get" + prop.substr(3);
                        var s = "get" !== start ? start : id ? funcParam ? target[id](funcParam) : target[id]() : target[prop];
                        /** @type {boolean} */
                        var reverse = "string" == typeof end && "=" === end.charAt(1);
                        var pt = {
                            t: target,
                            p: prop,
                            s: s,
                            f: "function" === type,
                            pg: 0,
                            n: n || prop,
                            m: a ? "function" == typeof a ? a : Math.round : 0,
                            pr: 0,
                            c: reverse ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0
                        };
                        if (("number" != typeof s || "number" != typeof end && !reverse) && (funcParam || isNaN(s) || !reverse && isNaN(end) || "boolean" == typeof s || "boolean" == typeof end ? (pt.fp = funcParam, blob = _blobDif(s, reverse ? parseFloat(pt.s) + pt.c : end, stringFilter || TweenLite.defaultStringFilter, pt), pt = {
                                t: blob,
                                p: "setRatio",
                                s: 0,
                                c: 1,
                                f: 2,
                                pg: 0,
                                n: n || prop,
                                pr: 0,
                                m: 0
                            }) : (pt.s = parseFloat(s), reverse || (pt.c = parseFloat(end) - pt.s || 0))), pt.c) {
                            return (pt._next = this._firstPT) && (pt._next._prev = pt), this._firstPT = pt, pt;
                        }
                    };
                    var _internals = TweenLite._internals = {
                        isArray: _isArray,
                        isSelector: _isSelector,
                        lazyTweens: _lazyTweens,
                        blobDif: _blobDif
                    };
                    var _plugins = TweenLite._plugins = {};
                    var _tweenLookup = _internals.tweenLookup = {};
                    /** @type {number} */
                    var _tweenLookupNum = 0;
                    var j = _internals.reservedProps = {
                        ease: 1,
                        delay: 1,
                        overwrite: 1,
                        onComplete: 1,
                        onCompleteParams: 1,
                        onCompleteScope: 1,
                        useFrames: 1,
                        runBackwards: 1,
                        startAt: 1,
                        onUpdate: 1,
                        onUpdateParams: 1,
                        onUpdateScope: 1,
                        onStart: 1,
                        onStartParams: 1,
                        onStartScope: 1,
                        onReverseComplete: 1,
                        onReverseCompleteParams: 1,
                        onReverseCompleteScope: 1,
                        onRepeat: 1,
                        onRepeatParams: 1,
                        onRepeatScope: 1,
                        easeParams: 1,
                        yoyo: 1,
                        immediateRender: 1,
                        repeat: 1,
                        repeatDelay: 1,
                        data: 1,
                        paused: 1,
                        reversed: 1,
                        autoCSS: 1,
                        lazy: 1,
                        onOverwrite: 1,
                        callbackScope: 1,
                        stringFilter: 1,
                        id: 1,
                        yoyoEase: 1
                    };
                    var _overwriteLookup = {
                        none: 0,
                        all: 1,
                        auto: 2,
                        concurrent: 3,
                        allOnStart: 4,
                        preexisting: 5,
                        true: 1,
                        false: 0
                    };
                    var _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline;
                    var _rootTimeline = Animation._rootTimeline = new SimpleTimeline;
                    /** @type {number} */
                    var _nextGCFrame = 30;
                    /** @type {function(): undefined} */
                    var _lazyRender = _internals.lazyRender = function () {
                        var tween;
                        /** @type {number} */
                        var i = _lazyTweens.length;
                        _lazyLookup = {};
                        for (; --i > -1;) {
                            if ((tween = _lazyTweens[i]) && false !== tween._lazy) {
                                tween.render(tween._lazy[0], tween._lazy[1], true);
                                /** @type {boolean} */
                                tween._lazy = false;
                            }
                        }
                        /** @type {number} */
                        _lazyTweens.length = 0;
                    };
                    _rootTimeline._startTime = _ticker.time;
                    _rootFramesTimeline._startTime = _ticker.frame;
                    /** @type {boolean} */
                    _rootTimeline._active = _rootFramesTimeline._active = true;
                    setTimeout(_lazyRender, 1);
                    /** @type {function(): undefined} */
                    Animation._updateRoot = TweenLite.render = function () {
                        var i;
                        var a;
                        var p;
                        if (_lazyTweens.length && _lazyRender(), _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false), _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false), _lazyTweens.length && _lazyRender(), _ticker.frame >= _nextGCFrame) {
                            _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                            for (p in _tweenLookup) {
                                a = _tweenLookup[p].tweens;
                                i = a.length;
                                for (; --i > -1;) {
                                    if (a[i]._gc) {
                                        a.splice(i, 1);
                                    }
                                }
                                if (0 === a.length) {
                                    delete _tweenLookup[p];
                                }
                            }
                            if ((!(p = _rootTimeline._first) || p._paused) && TweenLite.autoSleep && !_rootFramesTimeline._first && 1 === _ticker._listeners.tick.length) {
                                for (; p && p._paused;) {
                                    p = p._next;
                                }
                                if (!p) {
                                    _ticker.sleep();
                                }
                            }
                        }
                    };
                    _ticker.addEventListener("tick", Animation._updateRoot);
                    /**
                     * @param {!Object} target
                     * @param {?} tween
                     * @param {boolean} scrub
                     * @return {?}
                     */
                    var _register = function (target, tween, scrub) {
                        var a;
                        var i;
                        var id = target._gsTweenID;
                        if (_tweenLookup[id || (target._gsTweenID = id = "t" + _tweenLookupNum++)] || (_tweenLookup[id] = {
                                target: target,
                                tweens: []
                            }), tween && (a = _tweenLookup[id].tweens, a[i = a.length] = tween, scrub)) {
                            for (; --i > -1;) {
                                if (a[i] === tween) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                        return _tweenLookup[id].tweens;
                    };
                    /**
                     * @param {!Object} target
                     * @param {boolean} key
                     * @param {!Object} value
                     * @param {string} start
                     * @return {?}
                     */
                    var _onOverwrite = function (target, key, value, start) {
                        var node;
                        var result;
                        var func = target.vars.onOverwrite;
                        return func && (node = func(target, key, value, start)), func = TweenLite.onOverwrite, func && (result = func(target, key, value, start)), false !== node && false !== result;
                    };
                    /**
                     * @param {!Object} target
                     * @param {!Object} tween
                     * @param {string} props
                     * @param {number} mode
                     * @param {!Object} siblings
                     * @return {?}
                     */
                    var _applyOverwrite = function (target, tween, props, mode, siblings) {
                        var i;
                        var changed;
                        var curTween;
                        var l;
                        if (1 === mode || mode >= 4) {
                            l = siblings.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < l; i++) {
                                if ((curTween = siblings[i]) !== tween) {
                                    if (!curTween._gc) {
                                        if (curTween._kill(null, target, tween)) {
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                    }
                                } else {
                                    if (5 === mode) {
                                        break;
                                    }
                                }
                            }
                            return changed;
                        }
                        var globalStart;
                        var startTime = tween._startTime + 1e-10;
                        /** @type {!Array} */
                        var overlaps = [];
                        /** @type {number} */
                        var oCount = 0;
                        /** @type {boolean} */
                        var zeroDur = 0 === tween._duration;
                        i = siblings.length;
                        for (; --i > -1;) {
                            if (!((curTween = siblings[i]) === tween || curTween._gc || curTween._paused)) {
                                if (curTween._timeline !== tween._timeline) {
                                    globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                                    if (0 === _checkOverlap(curTween, globalStart, zeroDur)) {
                                        overlaps[oCount++] = curTween;
                                    }
                                } else {
                                    if (curTween._startTime <= startTime && curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) {
                                        if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 2e-10)) {
                                            overlaps[oCount++] = curTween;
                                        }
                                    }
                                }
                            }
                        }
                        /** @type {number} */
                        i = oCount;
                        for (; --i > -1;) {
                            if (curTween = overlaps[i], 2 === mode && curTween._kill(props, target, tween) && (changed = true), 2 !== mode || !curTween._firstPT && curTween._initted) {
                                if (2 !== mode && !_onOverwrite(curTween, tween)) {
                                    continue;
                                }
                                if (curTween._enabled(false, false)) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                            }
                        }
                        return changed;
                    };
                    /**
                     * @param {!Object} tween
                     * @param {number} reference
                     * @param {boolean} zeroDur
                     * @return {?}
                     */
                    var _checkOverlap = function (tween, reference, zeroDur) {
                        var tl = tween._timeline;
                        var ts = tl._timeScale;
                        var t = tween._startTime;
                        for (; tl._timeline;) {
                            if (t = t + tl._startTime, ts = ts * tl._timeScale, tl._paused) {
                                return -100;
                            }
                            tl = tl._timeline;
                        }
                        return t = t / ts, t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2e-10 ? 1e-10 : (t = t + tween.totalDuration() / tween._timeScale / ts) > reference + 1e-10 ? 0 : t - reference - 1e-10;
                    };
                    /**
                     * @return {undefined}
                     */
                    p._init = function () {
                        var i;
                        var initPlugins;
                        var pt;
                        var p;
                        var startVars;
                        var l;
                        var v = this.vars;
                        var op = this._overwrittenProps;
                        var window = this._duration;
                        /** @type {boolean} */
                        var immediate = !!v.immediateRender;
                        var ease = v.ease;
                        if (v.startAt) {
                            if (this._startAt) {
                                this._startAt.render(-1, true);
                                this._startAt.kill();
                            }
                            startVars = {};
                            for (p in v.startAt) {
                                startVars[p] = v.startAt[p];
                            }
                            if (startVars.data = "isStart", startVars.overwrite = false, startVars.immediateRender = true, startVars.lazy = immediate && false !== v.lazy, startVars.startAt = startVars.delay = null, startVars.onUpdate = v.onUpdate, startVars.onUpdateParams = v.onUpdateParams, startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this, this._startAt = TweenLite.to(this.target, 0, startVars), immediate) {
                                if (this._time > 0) {
                                    /** @type {null} */
                                    this._startAt = null;
                                } else {
                                    if (0 !== window) {
                                        return;
                                    }
                                }
                            }
                        } else {
                            if (v.runBackwards && 0 !== window) {
                                if (this._startAt) {
                                    this._startAt.render(-1, true);
                                    this._startAt.kill();
                                    /** @type {null} */
                                    this._startAt = null;
                                } else {
                                    if (0 !== this._time) {
                                        /** @type {boolean} */
                                        immediate = false;
                                    }
                                    pt = {};
                                    for (p in v) {
                                        if (!(j[p] && "autoCSS" !== p)) {
                                            pt[p] = v[p];
                                        }
                                    }
                                    if (pt.overwrite = 0, pt.data = "isFromStart", pt.lazy = immediate && false !== v.lazy, pt.immediateRender = immediate, this._startAt = TweenLite.to(this.target, 0, pt), immediate) {
                                        if (0 === this._time) {
                                            return;
                                        }
                                    } else {
                                        this._startAt._init();
                                        this._startAt._enabled(false);
                                        if (this.vars.immediateRender) {
                                            /** @type {null} */
                                            this._startAt = null;
                                        }
                                    }
                                }
                            }
                        }
                        if (this._ease = ease = ease ? ease instanceof Ease ? ease : "function" == typeof ease ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase : TweenLite.defaultEase, v.easeParams instanceof Array && ease.config && (this._ease = ease.config.apply(ease, v.easeParams)), this._easeType = this._ease._type, this._easePower = this._ease._power, this._firstPT = null, this._targets) {
                            l = this._targets.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < l; i++) {
                                if (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i)) {
                                    /** @type {boolean} */
                                    initPlugins = true;
                                }
                            }
                        } else {
                            initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                        }
                        if (initPlugins && TweenLite._onPluginEvent("_onInitAllProps", this), op && (this._firstPT || "function" != typeof this.target && this._enabled(false, false)), v.runBackwards) {
                            /** @type {null} */
                            pt = this._firstPT;
                            for (; pt;) {
                                pt.s += pt.c;
                                /** @type {number} */
                                pt.c = -pt.c;
                                pt = pt._next;
                            }
                        }
                        this._onUpdate = v.onUpdate;
                        /** @type {boolean} */
                        this._initted = true;
                    };
                    /**
                     * @param {!Object} target
                     * @param {(Object|string)} propLookup
                     * @param {!Object} siblings
                     * @param {string} overwrittenProps
                     * @param {number} index
                     * @return {?}
                     */
                    p._initProps = function (target, propLookup, siblings, overwrittenProps, index) {
                        var p;
                        var i;
                        var h;
                        var plugin;
                        var pt;
                        var v;
                        if (null == target) {
                            return false;
                        }
                        if (_lazyLookup[target._gsTweenID]) {
                            _lazyRender();
                        }
                        if (!this.vars.css) {
                            if (target.style && target !== window && target.nodeType && _plugins.css && false !== this.vars.autoCSS) {
                                _autoCSS(this.vars, target);
                            }
                        }
                        for (p in this.vars) {
                            if (v = this.vars[p], j[p]) {
                                if (v && (v instanceof Array || v.push && _isArray(v)) && -1 !== v.join("").indexOf("{self}")) {
                                    this.vars[p] = v = this._swapSelfInParams(v, this);
                                }
                            } else {
                                if (_plugins[p] && (plugin = new _plugins[p])._onInitTween(target, this.vars[p], this, index)) {
                                    this._firstPT = pt = {
                                        _next: this._firstPT,
                                        t: plugin,
                                        p: "setRatio",
                                        s: 0,
                                        c: 1,
                                        f: 1,
                                        n: p,
                                        pg: 1,
                                        pr: plugin._priority,
                                        m: 0
                                    };
                                    i = plugin._overwriteProps.length;
                                    for (; --i > -1;) {
                                        propLookup[plugin._overwriteProps[i]] = this._firstPT;
                                    }
                                    if (plugin._priority || plugin._onInitAllProps) {
                                        /** @type {boolean} */
                                        h = true;
                                    }
                                    if (plugin._onDisable || plugin._onEnable) {
                                        /** @type {boolean} */
                                        this._notifyPluginsOfEnabled = true;
                                    }
                                    if (pt._next) {
                                        pt._next._prev = pt;
                                    }
                                } else {
                                    propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                                }
                            }
                        }
                        return overwrittenProps && this._kill(overwrittenProps, target) ? this._initProps(target, propLookup, siblings, overwrittenProps, index) : this._overwrite > 1 && this._firstPT && siblings.length > 1 && _applyOverwrite(target, this, propLookup, this._overwrite, siblings) ? (this._kill(propLookup, target), this._initProps(target, propLookup, siblings, overwrittenProps, index)) : (this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration) && (_lazyLookup[target._gsTweenID] =
                            true), h);
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {?}
                     */
                    p.render = function (time, suppressEvents, force) {
                        var isComplete;
                        var callback;
                        var pt;
                        var rawPrevTime;
                        var prevTime = this._time;
                        var duration = this._duration;
                        var prevRawPrevTime = this._rawPrevTime;
                        if (time >= duration - 1e-7 && time >= 0) {
                            this._totalTime = this._time = duration;
                            this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                            if (!this._reversed) {
                                /** @type {boolean} */
                                isComplete = true;
                                /** @type {string} */
                                callback = "onComplete";
                                force = force || this._timeline.autoRemoveChildren;
                            }
                            if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                                if (this._startTime === this._timeline._duration) {
                                    /** @type {number} */
                                    time = 0;
                                }
                                if ((prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || 1e-10 === prevRawPrevTime && "isPause" !== this.data) && prevRawPrevTime !== time) {
                                    /** @type {boolean} */
                                    force = true;
                                    if (prevRawPrevTime > 1e-10) {
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    }
                                }
                                this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10;
                            }
                        } else {
                            if (time < 1e-7) {
                                /** @type {number} */
                                this._totalTime = this._time = 0;
                                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                                if (0 !== prevTime || 0 === duration && prevRawPrevTime > 0) {
                                    /** @type {string} */
                                    callback = "onReverseComplete";
                                    isComplete = this._reversed;
                                }
                                if (time < 0) {
                                    /** @type {boolean} */
                                    this._active = false;
                                    if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                                        if (prevRawPrevTime >= 0 && (1e-10 !== prevRawPrevTime || "isPause" !== this.data)) {
                                            /** @type {boolean} */
                                            force = true;
                                        }
                                        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10;
                                    }
                                }
                                if (!this._initted || this._startAt && this._startAt.progress()) {
                                    /** @type {boolean} */
                                    force = true;
                                }
                            } else {
                                if (this._totalTime = this._time = time, this._easeType) {
                                    /** @type {number} */
                                    var r = time / duration;
                                    var scaleDown = this._easeType;
                                    var pow = this._easePower;
                                    if (1 === scaleDown || 3 === scaleDown && r >= .5) {
                                        /** @type {number} */
                                        r = 1 - r;
                                    }
                                    if (3 === scaleDown) {
                                        /** @type {number} */
                                        r = r * 2;
                                    }
                                    if (1 === pow) {
                                        /** @type {number} */
                                        r = r * r;
                                    } else {
                                        if (2 === pow) {
                                            /** @type {number} */
                                            r = r * (r * r);
                                        } else {
                                            if (3 === pow) {
                                                /** @type {number} */
                                                r = r * (r * r * r);
                                            } else {
                                                if (4 === pow) {
                                                    /** @type {number} */
                                                    r = r * (r * r * r * r);
                                                }
                                            }
                                        }
                                    }
                                    /** @type {number} */
                                    this.ratio = 1 === scaleDown ? 1 - r : 2 === scaleDown ? r : time / duration < .5 ? r / 2 : 1 - r / 2;
                                } else {
                                    this.ratio = this._ease.getRatio(time / duration);
                                }
                            }
                        }
                        if (this._time !== prevTime || force) {
                            if (!this._initted) {
                                if (this._init(), !this._initted || this._gc) {
                                    return;
                                }
                                if (!force && this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration)) {
                                    return this._time = this._totalTime = prevTime, this._rawPrevTime = prevRawPrevTime, _lazyTweens.push(this), void(this._lazy = [time, suppressEvents]);
                                }
                                if (this._time && !isComplete) {
                                    this.ratio = this._ease.getRatio(this._time / duration);
                                } else {
                                    if (isComplete && this._ease._calcEnd) {
                                        this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1);
                                    }
                                }
                            }
                            if (false !== this._lazy) {
                                /** @type {boolean} */
                                this._lazy = false;
                            }
                            if (!this._active) {
                                if (!this._paused && this._time !== prevTime && time >= 0) {
                                    /** @type {boolean} */
                                    this._active = true;
                                }
                            }
                            if (0 === prevTime) {
                                if (this._startAt) {
                                    if (time >= 0) {
                                        this._startAt.render(time, true, force);
                                    } else {
                                        if (!callback) {
                                            /** @type {string} */
                                            callback = "_dummyGS";
                                        }
                                    }
                                }
                                if (this.vars.onStart) {
                                    if (!(0 === this._time && 0 !== duration || suppressEvents)) {
                                        this._callback("onStart");
                                    }
                                }
                            }
                            pt = this._firstPT;
                            for (; pt;) {
                                if (pt.f) {
                                    pt.t[pt.p](pt.c * this.ratio + pt.s);
                                } else {
                                    pt.t[pt.p] = pt.c * this.ratio + pt.s;
                                }
                                pt = pt._next;
                            }
                            if (this._onUpdate) {
                                if (time < 0 && this._startAt && -1e-4 !== time) {
                                    this._startAt.render(time, true, force);
                                }
                                if (!suppressEvents) {
                                    if (this._time !== prevTime || isComplete || force) {
                                        this._callback("onUpdate");
                                    }
                                }
                            }
                            if (callback) {
                                if (!(this._gc && !force)) {
                                    if (time < 0 && this._startAt && !this._onUpdate && -1e-4 !== time) {
                                        this._startAt.render(time, true, force);
                                    }
                                    if (isComplete) {
                                        if (this._timeline.autoRemoveChildren) {
                                            this._enabled(false, false);
                                        }
                                        /** @type {boolean} */
                                        this._active = false;
                                    }
                                    if (!suppressEvents && this.vars[callback]) {
                                        this._callback(callback);
                                    }
                                    if (0 === duration && 1e-10 === this._rawPrevTime && 1e-10 !== rawPrevTime) {
                                        /** @type {number} */
                                        this._rawPrevTime = 0;
                                    }
                                }
                            }
                        }
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @param {boolean} overwritingTween
                     * @return {?}
                     */
                    p._kill = function (vars, target, overwritingTween) {
                        if ("all" === vars && (vars = null), null == vars && (null == target || target === this.target)) {
                            return this._lazy = false, this._enabled(false, false);
                        }
                        target = "string" != typeof target ? target || this._targets || this.target : TweenLite.selector(target) || target;
                        var i;
                        var overwrittenProps;
                        var p;
                        var pt;
                        var propLookup;
                        var changed;
                        var killProps;
                        var u;
                        var killed;
                        var o = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline;
                        if ((_isArray(target) || _isSelector(target)) && "number" != typeof target[0]) {
                            i = target.length;
                            for (; --i > -1;) {
                                if (this._kill(vars, target[i], overwritingTween)) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                            }
                        } else {
                            if (this._targets) {
                                i = this._targets.length;
                                for (; --i > -1;) {
                                    if (target === this._targets[i]) {
                                        propLookup = this._propLookup[i] || {};
                                        this._overwrittenProps = this._overwrittenProps || [];
                                        overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                        break;
                                    }
                                }
                            } else {
                                if (target !== this.target) {
                                    return false;
                                }
                                propLookup = this._propLookup;
                                overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                            }
                            if (propLookup) {
                                if (killProps = vars || propLookup, u = vars !== overwrittenProps && "all" !== overwrittenProps && vars !== propLookup && ("object" != typeof vars || !vars._tempKill), overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                                    for (p in killProps) {
                                        if (propLookup[p]) {
                                            if (!killed) {
                                                /** @type {!Array} */
                                                killed = [];
                                            }
                                            killed.push(p);
                                        }
                                    }
                                    if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {
                                        return false;
                                    }
                                }
                                for (p in killProps) {
                                    if (pt = propLookup[p]) {
                                        if (o) {
                                            if (pt.f) {
                                                pt.t[pt.p](pt.s);
                                            } else {
                                                pt.t[pt.p] = pt.s;
                                            }
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                        if (pt.pg && pt.t._kill(killProps)) {
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                        if (!(pt.pg && 0 !== pt.t._overwriteProps.length)) {
                                            if (pt._prev) {
                                                pt._prev._next = pt._next;
                                            } else {
                                                if (pt === this._firstPT) {
                                                    this._firstPT = pt._next;
                                                }
                                            }
                                            if (pt._next) {
                                                pt._next._prev = pt._prev;
                                            }
                                            /** @type {null} */
                                            pt._next = pt._prev = null;
                                        }
                                        delete propLookup[p];
                                    }
                                    if (u) {
                                        /** @type {number} */
                                        overwrittenProps[p] = 1;
                                    }
                                }
                                if (!this._firstPT && this._initted) {
                                    this._enabled(false, false);
                                }
                            }
                        }
                        return changed;
                    };
                    /**
                     * @return {?}
                     */
                    p.invalidate = function () {
                        return this._notifyPluginsOfEnabled && TweenLite._onPluginEvent("_onDisable", this), this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null, this._notifyPluginsOfEnabled = this._active = this._lazy = false, this._propLookup = this._targets ? {} : [], Animation.prototype.invalidate.call(this), this.vars.immediateRender && (this._time = -1e-10, this.render(Math.min(0, -this._delay))), this;
                    };
                    /**
                     * @param {string} enabled
                     * @param {boolean} node
                     * @return {?}
                     */
                    p._enabled = function (enabled, node) {
                        if (cvalue || _ticker.wake(), enabled && this._gc) {
                            var i;
                            var targets = this._targets;
                            if (targets) {
                                i = targets.length;
                                for (; --i > -1;) {
                                    this._siblings[i] = _register(targets[i], this, true);
                                }
                            } else {
                                this._siblings = _register(this.target, this, true);
                            }
                        }
                        return Animation.prototype._enabled.call(this, enabled, node), !(!this._notifyPluginsOfEnabled || !this._firstPT) && TweenLite._onPluginEvent(enabled ? "_onEnable" : "_onDisable", this);
                    };
                    /**
                     * @param {!Object} target
                     * @param {number} duration
                     * @param {!Object} vars
                     * @return {?}
                     */
                    TweenLite.to = function (target, duration, vars) {
                        return new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {number} duration
                     * @param {!Object} vars
                     * @return {?}
                     */
                    TweenLite.from = function (target, duration, vars) {
                        return vars.runBackwards = true, vars.immediateRender = 0 != vars.immediateRender, new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {number} duration
                     * @param {number} time
                     * @param {!Object} v
                     * @return {?}
                     */
                    TweenLite.fromTo = function (target, duration, time, v) {
                        return v.startAt = time, v.immediateRender = 0 != v.immediateRender && 0 != time.immediateRender, new TweenLite(target, duration, v);
                    };
                    /**
                     * @param {number} delay
                     * @param {string} callback
                     * @param {!Object} params
                     * @param {string} scope
                     * @param {?} useFrames
                     * @return {?}
                     */
                    TweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {
                        return new TweenLite(callback, 0, {
                            delay: delay,
                            onComplete: callback,
                            onCompleteParams: params,
                            callbackScope: scope,
                            onReverseComplete: callback,
                            onReverseCompleteParams: params,
                            immediateRender: false,
                            lazy: false,
                            useFrames: useFrames,
                            overwrite: 0
                        });
                    };
                    /**
                     * @param {!Object} type
                     * @param {string} name
                     * @return {?}
                     */
                    TweenLite.set = function (type, name) {
                        return new TweenLite(type, 0, name);
                    };
                    /**
                     * @param {!Object} target
                     * @param {boolean} onlyActive
                     * @return {?}
                     */
                    TweenLite.getTweensOf = function (target, onlyActive) {
                        if (null == target) {
                            return [];
                        }
                        target = "string" != typeof target ? target : TweenLite.selector(target) || target;
                        var i;
                        var a;
                        var j;
                        var t;
                        if ((_isArray(target) || _isSelector(target)) && "number" != typeof target[0]) {
                            i = target.length;
                            /** @type {!Array} */
                            a = [];
                            for (; --i > -1;) {
                                /** @type {!Array<?>} */
                                a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                            }
                            /** @type {number} */
                            i = a.length;
                            for (; --i > -1;) {
                                t = a[i];
                                /** @type {number} */
                                j = i;
                                for (; --j > -1;) {
                                    if (t === a[j]) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        } else {
                            if (target._gsTweenID) {
                                a = _register(target).concat();
                                i = a.length;
                                for (; --i > -1;) {
                                    if (a[i]._gc || onlyActive && !a[i].isActive()) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        }
                        return a || [];
                    };
                    /** @type {function(!Object, ?, string): undefined} */
                    TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function (target, onlyActive, vars) {
                        if ("object" == typeof onlyActive) {
                            vars = onlyActive;
                            /** @type {boolean} */
                            onlyActive = false;
                        }
                        var a = TweenLite.getTweensOf(target, onlyActive);
                        var i = a.length;
                        for (; --i > -1;) {
                            a[i]._kill(vars, target);
                        }
                    };
                    var TweenPlugin = _class("plugins.TweenPlugin", function (indicesCat, priority) {
                        this._overwriteProps = (indicesCat || "").split(",");
                        this._propName = this._overwriteProps[0];
                        this._priority = priority || 0;
                        this._super = TweenPlugin.prototype;
                    }, true);
                    if (p = TweenPlugin.prototype, TweenPlugin.version = "1.19.0", TweenPlugin.API = 2, p._firstPT = null, p._addTween = _addPropTween, p.setRatio = _setRatio, p._kill = function (lookup) {
                            var i;
                            var a = this._overwriteProps;
                            var pt = this._firstPT;
                            if (null != lookup[this._propName]) {
                                /** @type {!Array} */
                                this._overwriteProps = [];
                            } else {
                                i = a.length;
                                for (; --i > -1;) {
                                    if (null != lookup[a[i]]) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                            for (; pt;) {
                                if (null != lookup[pt.n]) {
                                    if (pt._next) {
                                        pt._next._prev = pt._prev;
                                    }
                                    if (pt._prev) {
                                        pt._prev._next = pt._next;
                                        /** @type {null} */
                                        pt._prev = null;
                                    } else {
                                        if (this._firstPT === pt) {
                                            this._firstPT = pt._next;
                                        }
                                    }
                                }
                                pt = pt._next;
                            }
                            return false;
                        }, p._mod = p._roundProps = function (lookup) {
                            var val;
                            var pt = this._firstPT;
                            for (; pt;) {
                                val = lookup[this._propName] || null != pt.n && lookup[pt.n.split(this._propName + "_").join("")];
                                if (val && "function" == typeof val) {
                                    if (2 === pt.f) {
                                        /** @type {!Function} */
                                        pt.t._applyPT.m = val;
                                    } else {
                                        /** @type {!Function} */
                                        pt.m = val;
                                    }
                                }
                                pt = pt._next;
                            }
                        }, TweenLite._onPluginEvent = function (type, tween) {
                            var changed;
                            var pt2;
                            var first;
                            var last;
                            var next;
                            var pt = tween._firstPT;
                            if ("_onInitAllProps" === type) {
                                for (; pt;) {
                                    next = pt._next;
                                    pt2 = first;
                                    for (; pt2 && pt2.pr > pt.pr;) {
                                        pt2 = pt2._next;
                                    }
                                    if (pt._prev = pt2 ? pt2._prev : last) {
                                        pt._prev._next = pt;
                                    } else {
                                        first = pt;
                                    }
                                    if (pt._next = pt2) {
                                        pt2._prev = pt;
                                    } else {
                                        last = pt;
                                    }
                                    pt = next;
                                }
                                pt = tween._firstPT = first;
                            }
                            for (; pt;) {
                                if (pt.pg && "function" == typeof pt.t[type] && pt.t[type]()) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                                pt = pt._next;
                            }
                            return changed;
                        }, TweenPlugin.activate = function (plugins) {
                            var i = plugins.length;
                            for (; --i > -1;) {
                                if (plugins[i].API === TweenPlugin.API) {
                                    _plugins[(new plugins[i])._propName] = plugins[i];
                                }
                            }
                            return true;
                        }, _gsDefine.plugin = function (options) {
                            if (!(options && options.propName && options.init && options.API)) {
                                throw "illegal plugin definition.";
                            }
                            var i;
                            var propName = options.propName;
                            var priority = options.priority || 0;
                            var overwriteProps = options.overwriteProps;
                            var map = {
                                init: "_onInitTween",
                                set: "setRatio",
                                kill: "_kill",
                                round: "_mod",
                                mod: "_mod",
                                initAll: "_onInitAllProps"
                            };
                            var Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin", function () {
                                TweenPlugin.call(this, propName, priority);
                                this._overwriteProps = overwriteProps || [];
                            }, true === options.global);
                            var p = Plugin.prototype = new TweenPlugin(propName);
                            p.constructor = Plugin;
                            Plugin.API = options.API;
                            for (i in map) {
                                if ("function" == typeof options[i]) {
                                    p[map[i]] = options[i];
                                }
                            }
                            return Plugin.version = options.version, TweenPlugin.activate([Plugin]), Plugin;
                        }, a = window._gsQueue) {
                        /** @type {number} */
                        i = 0;
                        for (; i < a.length; i++) {
                            a[i]();
                        }
                        for (p in _defLookup) {
                            if (!_defLookup[p].func) {
                                window.console.log("GSAP encountered missing dependency: " + p);
                            }
                        }
                    }
                    /** @type {boolean} */
                    cvalue = false;
                }
            })(void 0 !== module && module.exports && void 0 !== useroptions ? useroptions : this || window);
        }).call(items, moment(4));
    },
    function (module, canCreateDiscussions) {
        var g;
        g = function () {
            return this;
        }();
        try {
            g = g || Function("return this")() || (0, eval)("this");
        } catch (t) {
            if ("object" == typeof window) {
                /** @type {!Window} */
                g = window;
            }
        }
        module.exports = g;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} elem
         * @param {!Function} type
         * @return {undefined}
         */
        function on(elem, type) {
            if (!(elem instanceof type)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var _deepAssign = __webpack_require__(18);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _prepareStyleProperties = __webpack_require__(0);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var SwaggerAuthorizations = function () {
            /**
             * @return {undefined}
             */
            function show() {
                on(this, show);
                this.width = show.calculateWidth();
                this.height = show.calculateHeight();
                /** @type {number} */
                this.ratio = this.width / this.height;
                this.bind();
            }

            return debug(show, [{
                key: "bind",
                value: function () {
                    this.onResize = this.onResize.bind(this);
                    window.addEventListener("resize", this.onResize);
                }
            }, {
                key: "onResize",
                value: function () {
                    this.width = show.calculateWidth();
                    this.height = show.calculateHeight();
                    /** @type {number} */
                    this.ratio = this.width / this.height;
                    _prepareStyleProperties2.default.emit(_prepareStyleProperties2.default.RESIZE, this.width, this.height, this.ratio);
                }
            }], [{
                key: "calculateWidth",
                value: function () {
                    return _deepAssign2.default.viewportW();
                }
            }, {
                key: "calculateHeight",
                value: function () {
                    return _deepAssign2.default.viewportH();
                }
            }]), show;
        }();
        e.default = new SwaggerAuthorizations;
    },
    function (canCreateDiscussions, e, getVoxel) {
        /**
         * @param {!AudioNode} error
         * @param {!Function} value
         * @return {undefined}
         */
        function next(error, value) {
            if (!(error instanceof value)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var getMarkDiv = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var b = getVoxel(0);
        var c = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(b);
        var SwaggerAuthorizations = function () {
            /**
             * @return {undefined}
             */
            function tick() {
                next(this, tick);
                this.fps = void 0;
                /** @type {number} */
                this.time = window.performance.now();
                this.start = this.start.bind(this);
                this.pause = this.pause.bind(this);
                this.onTick = this.onTick.bind(this);
                this.start();
                this.bind();
                window.requestAnimationFrame(this.onTick);
            }

            return getMarkDiv(tick, [{
                key: "bind",
                value: function () {
                    c.default.on(c.default.VISIBILITY_HIDDEN, this.pause);
                    c.default.on(c.default.VISIBILITY_VISIBLE, this.start);
                }
            }, {
                key: "start",
                value: function () {
                    /** @type {number} */
                    this.startTime = window.performance.now();
                    /** @type {number} */
                    this.oldTime = this.startTime;
                    /** @type {boolean} */
                    this.isPaused = false;
                }
            }, {
                key: "pause",
                value: function () {
                    /** @type {boolean} */
                    this.isPaused = true;
                }
            }, {
                key: "onTick",
                value: function (value) {
                    /** @type {number} */
                    this.time = value;
                    if (!this.isPaused) {
                        /** @type {number} */
                        this.delta = (value - this.oldTime) / 1e3;
                        /** @type {number} */
                        this.oldTime = value;
                        c.default.emit(c.default.RAF, this.delta, value);
                    }
                    window.requestAnimationFrame(this.onTick);
                }
            }]), tick;
        }();
        e.default = new SwaggerAuthorizations;
    },
    function (canCreateDiscussions, e, i) {
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var update = function () {
            var ctx = {};
            try {
                /** @type {!Element} */
                var canvas = document.createElement("canvas");
                var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                var extensionDebugRendererInfo = gl.getExtension("WEBGL_debug_renderer_info");
                return extensionDebugRendererInfo && (ctx.vendor = gl.getParameter(extensionDebugRendererInfo.UNMASKED_VENDOR_WEBGL), ctx.card = gl.getParameter(extensionDebugRendererInfo.UNMASKED_RENDERER_WEBGL)), ctx.renderer = gl.getParameter(gl.RENDERER), ctx.version = gl.getParameter(gl.VERSION), ctx.glsl = gl.getParameter(gl.SHADING_LANGUAGE_VERSION), ctx.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE), ctx.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), ctx;
            } catch (e) {
                return ctx;
            }
        }();
        var options = {
            postprocessing: true,
            antialias: true,
            gyroscope: true,
            mouseTiltCamera: true,
            shadow: true,
            shadowSize: 2048,
            dpr: window.devicePixelRatio || 1,
            ratioScreen: 1,
            cameraBoarding: true,
            objectBoarding: true,
            debugStats: false,
            logoDisplacement: true
        };
        if (update.card && "mali-g71" === update.card.toLowerCase()) {
            /** @type {boolean} */
            options.logoDisplacement = false;
        }
        if (window.devicePixelRatio > 1) {
            /** @type {boolean} */
            options.antialias = false;
        }
        /** @type {number} */
        options.dpr = Math.min(2, window.devicePixelRatio);
        if (window.Modernizr.tablet) {
            /** @type {boolean} */
            options.shadow = false;
        }
        if (window.Modernizr.mobile) {
            /** @type {number} */
            options.shadowSize = 512;
        }
        if (window.Modernizr.android) {
            /** @type {boolean} */
            options.shadow = false;
        }
        e.default = options;
    },
    function (m, canCreateDiscussions, saveNotifs) {
        var THREE = THREE || saveNotifs(3);
        /**
         * @param {!Object} options
         * @return {undefined}
         */
        THREE.GPUParticleSystem = function (options) {
            var self = this;
            options = options || {};
            self.PARTICLE_COUNT = options.maxParticles || 1e6;
            self.PARTICLE_CONTAINERS = options.containerCount || 1;
            self.PARTICLE_NOISE_TEXTURE = options.particleNoiseTex || null;
            self.PARTICLE_SPRITE_TEXTURE = options.particleSpriteTex || null;
            /** @type {number} */
            self.PARTICLES_PER_CONTAINER = Math.ceil(self.PARTICLE_COUNT / self.PARTICLE_CONTAINERS);
            /** @type {number} */
            self.PARTICLE_CURSOR = 0;
            /** @type {number} */
            self.time = 0;
            var GPUParticleShader = {
                vertexShader: ["precision highp float;", "const vec4 bitSh = vec4(256. * 256. * 256., 256. * 256., 256., 1.);", "const vec4 bitMsk = vec4(0.,vec3(1./256.0));", "const vec4 bitShifts = vec4(1.) / bitSh;", "#define FLOAT_MAX\t1.70141184e38", "#define FLOAT_MIN\t1.17549435e-38", "lowp vec4 encode_float(highp float v) {", "highp float av = abs(v);", "//Handle special cases", "if(av < FLOAT_MIN) {", "return vec4(0.0, 0.0, 0.0, 0.0);", "} else if(v > FLOAT_MAX) {", "return vec4(127.0, 128.0, 0.0, 0.0) / 255.0;",
                    "} else if(v < -FLOAT_MAX) {", "return vec4(255.0, 128.0, 0.0, 0.0) / 255.0;", "}", "highp vec4 c = vec4(0,0,0,0);", "//Compute exponent and mantissa", "highp float e = floor(log2(av));", "highp float m = av * pow(2.0, -e) - 1.0;", "c[1] = floor(128.0 * m);", "m -= c[1] / 128.0;", "c[2] = floor(32768.0 * m);", "m -= c[2] / 32768.0;", "c[3] = floor(8388608.0 * m);", "//Unpack exponent", "highp float ebias = e + 127.0;", "c[0] = floor(ebias / 2.0);", "ebias -= c[0] * 2.0;", "c[1] += floor(ebias) * 128.0;",
                    "//Unpack sign bit", "c[0] += 128.0 * step(0.0, -v);", "//Scale back to range", "return c / 255.0;", "}", "vec4 pack(const in float depth)", "{", "const vec4 bit_shift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);", "const vec4 bit_mask\t= vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);", "vec4 res = mod(depth*bit_shift*vec4(255), vec4(256))/vec4(255);", "res -= res.xxyz * bit_mask;", "return res;", "}", "float unpack(const in vec4 rgba_depth)", "{", "const vec4 bit_shift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);",
                    "float depth = dot(rgba_depth, bit_shift);", "return depth;", "}", "uniform float uTime;", "uniform float uScale;", "uniform sampler2D tNoise;", "attribute vec4 particlePositionsStartTime;", "attribute vec4 particleVelColSizeLife;", "attribute vec3 particleVelocity;", "attribute float particleTurbulence;", "varying vec4 vColor;", "varying float lifeLeft;", "void main() {", "// unpack things from our attributes", "vColor = encode_float( particleVelColSizeLife.y );", "// convert our velocity back into a value we can use",
                    "vec3 velocity = particleVelocity;", "float turbulence = particleTurbulence;", "vec3 newPosition;", "float timeElapsed = uTime - particlePositionsStartTime.a;", "lifeLeft = 1. - (timeElapsed / particleVelColSizeLife.w);", "gl_PointSize = ( uScale * particleVelColSizeLife.z ) * lifeLeft;", "newPosition = particlePositionsStartTime.xyz + ( velocity * 10. ) * ( uTime - particlePositionsStartTime.a );", "vec3 noise = texture2D( tNoise, vec2( newPosition.x * .015 + (uTime * .05), newPosition.y * .02 + (uTime * .015) )).rgb;",
                    "vec3 noiseVel = ( noise.rgb - .5 ) * 30.;", "newPosition = mix(newPosition, newPosition + vec3(noiseVel * ( turbulence * 5. ) ), (timeElapsed / particleVelColSizeLife.a) );", "if( velocity.y > 0. && velocity.y < .05 ) {", "lifeLeft = 0.;", "}", "if( velocity.x < -1.45 ) {", "lifeLeft = 0.;", "}", "if( timeElapsed > 0. ) {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );", "} else {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
                    "lifeLeft = 0.;", "gl_PointSize = 0.;", "}", "}"].join("\n"),
                fragmentShader: ["float scaleLinear(float value, vec2 valueDomain) {", "return (value - valueDomain.x) / (valueDomain.y - valueDomain.x);", "}", "float scaleLinear(float value, vec2 valueDomain, vec2 valueRange) {", "return mix(valueRange.x, valueRange.y, scaleLinear(value, valueDomain));", "}", "varying vec4 vColor;", "varying float lifeLeft;", "uniform sampler2D tSprite;", "void main() {", "float alpha = 0.;", "if( lifeLeft > .995 ) {", "alpha = scaleLinear( lifeLeft, vec2(1., .995), vec2(0., 1.));//mix( 0., 1., ( lifeLeft - .95 ) * 100. ) * .75;",
                    "} else {", "alpha = lifeLeft * .75;", "}", "vec4 tex = texture2D( tSprite, gl_PointCoord );", "gl_FragColor = vec4( vColor.rgb * tex.a, alpha * tex.a );", "}"].join("\n")
            };
            /** @type {!Array} */
            self.rand = [];
            /** @type {number} */
            var i = 1e5;
            for (; i > 0; i--) {
                self.rand.push(Math.random() - .5);
            }
            /**
             * @return {?}
             */
            self.random = function () {
                return ++i >= self.rand.length ? self.rand[i = 1] : self.rand[i];
            };
            var mockObjectLoader = new THREE.TextureLoader;
            self.particleNoiseTex = self.PARTICLE_NOISE_TEXTURE || mockObjectLoader.load("assets/3d/perlin-512.png");
            self.particleNoiseTex.wrapS = self.particleNoiseTex.wrapT = THREE.RepeatWrapping;
            self.particleSpriteTex = self.PARTICLE_SPRITE_TEXTURE || mockObjectLoader.load("assets/3d/particle.png");
            self.particleSpriteTex.wrapS = self.particleSpriteTex.wrapT = THREE.RepeatWrapping;
            self.particleShaderMat = new THREE.ShaderMaterial({
                transparent: true,
                depthWrite: false,
                uniforms: {
                    uTime: {
                        value: 0
                    },
                    uScale: {
                        value: 1
                    },
                    tNoise: {
                        value: self.particleNoiseTex
                    },
                    tSprite: {
                        value: self.particleSpriteTex
                    }
                },
                blending: THREE.AdditiveBlending,
                vertexShader: GPUParticleShader.vertexShader,
                fragmentShader: GPUParticleShader.fragmentShader
            });
            /** @type {!Array} */
            self.particleShaderMat.defaultAttributeValues.particlePositionsStartTime = [0, 0, 0, 0];
            /** @type {!Array} */
            self.particleShaderMat.defaultAttributeValues.particleVelColSizeLife = [0, 0, 0, 0];
            /** @type {!Array} */
            self.particleContainers = [];
            THREE.Object3D.apply(this, arguments);
            /**
             * @return {undefined}
             */
            this.init = function () {
                /** @type {number} */
                var i = 0;
                for (; i < self.PARTICLE_CONTAINERS; i++) {
                    var bar = new THREE.GPUParticleContainer(self.PARTICLES_PER_CONTAINER, self);
                    self.particleContainers.push(bar);
                    self.add(bar);
                }
            };
            /**
             * @param {!Object} options
             * @return {undefined}
             */
            this.spawnParticle = function (options) {
                if (++self.PARTICLE_CURSOR >= self.PARTICLE_COUNT) {
                    /** @type {number} */
                    self.PARTICLE_CURSOR = 1;
                }
                self.particleContainers[Math.floor(self.PARTICLE_CURSOR / self.PARTICLES_PER_CONTAINER)].spawnParticle(options);
                if (++self.PARTICLE_CURSOR >= self.PARTICLE_COUNT) {
                    /** @type {number} */
                    self.PARTICLE_CURSOR = 1;
                }
                self.particleContainers[Math.floor(self.PARTICLE_CURSOR / self.PARTICLES_PER_CONTAINER)].spawnParticle(options);
            };
            /**
             * @param {!Object} time1
             * @return {undefined}
             */
            this.update = function (time1) {
                /** @type {number} */
                var i = 0;
                for (; i < self.PARTICLE_CONTAINERS; i++) {
                    self.particleContainers[i].update(time1);
                }
            };
            this.init();
        };
        /** @type {!Object} */
        THREE.GPUParticleSystem.prototype = Object.create(THREE.Object3D.prototype);
        /** @type {function(!Object): undefined} */
        THREE.GPUParticleSystem.prototype.constructor = THREE.GPUParticleSystem;
        /**
         * @param {!Object} type
         * @param {!Object} name
         * @return {undefined}
         */
        THREE.GPUParticleContainer = function (type, name) {
            /**
             * @param {number} w
             * @param {number} x
             * @param {number} z
             * @param {number} y
             * @return {?}
             */
            function decodeFloat(w, x, z, y) {
                return UINT8_VIEW[0] = Math.floor(y), UINT8_VIEW[1] = Math.floor(z), UINT8_VIEW[2] = Math.floor(x), UINT8_VIEW[3] = Math.floor(w), temp2v4_[0];
            }

            /**
             * @param {number} hex
             * @return {?}
             */
            function hexToRgb(hex) {
                /** @type {number} */
                var r = hex >> 16;
                /** @type {number} */
                var i = (65280 & hex) >> 8;
                /** @type {number} */
                var n = 255 & hex;
                return r > 0 && r--, i > 0 && i--, n > 0 && n--, [r, i, n];
            }

            var self = this;
            self.PARTICLE_COUNT = type || 1e5;
            /** @type {number} */
            self.PARTICLE_CURSOR = 0;
            /** @type {number} */
            self.time = 0;
            /** @type {number} */
            self.DPR = window.devicePixelRatio;
            /** @type {!Object} */
            self.GPUParticleSystem = name;
            Math.floor(self.PARTICLE_COUNT / self.MAX_ATTRIBUTES);
            THREE.Object3D.apply(this, arguments);
            /** @type {!Uint8Array} */
            var UINT8_VIEW = new Uint8Array(4);
            /** @type {!Float32Array} */
            var temp2v4_ = new Float32Array(UINT8_VIEW.buffer);
            /** @type {!Array} */
            self.particles = [];
            /** @type {!Array} */
            self.deadParticles = [];
            /** @type {!Array} */
            self.particlesAvailableSlot = [];
            /** @type {boolean} */
            self.particleUpdate = false;
            self.particleShaderGeo = new THREE.BufferGeometry;
            /** @type {!Float32Array} */
            self.particleVertices = new Float32Array(3 * self.PARTICLE_COUNT);
            /** @type {!Float32Array} */
            self.particlePositionsStartTime = new Float32Array(4 * self.PARTICLE_COUNT);
            /** @type {!Float32Array} */
            self.particleVelocity = new Float32Array(3 * self.PARTICLE_COUNT);
            /** @type {!Float32Array} */
            self.particleTurbulence = new Float32Array(self.PARTICLE_COUNT);
            /** @type {!Float32Array} */
            self.particleVelColSizeLife = new Float32Array(4 * self.PARTICLE_COUNT);
            /** @type {number} */
            var i = 0;
            for (; i < self.PARTICLE_COUNT; i++) {
                /** @type {number} */
                self.particlePositionsStartTime[4 * i + 0] = 100;
                /** @type {number} */
                self.particlePositionsStartTime[4 * i + 1] = 0;
                /** @type {number} */
                self.particlePositionsStartTime[4 * i + 2] = 0;
                /** @type {number} */
                self.particlePositionsStartTime[4 * i + 3] = 0;
                /** @type {number} */
                self.particleVertices[3 * i + 0] = 0;
                /** @type {number} */
                self.particleVertices[3 * i + 1] = 0;
                /** @type {number} */
                self.particleVertices[3 * i + 2] = 0;
                self.particleVelColSizeLife[4 * i + 0] = decodeFloat(128, 128, 0, 0);
                self.particleVelColSizeLife[4 * i + 1] = decodeFloat(0, 254, 0, 254);
                /** @type {number} */
                self.particleVelColSizeLife[4 * i + 2] = 1;
                /** @type {number} */
                self.particleVelColSizeLife[4 * i + 3] = 0;
            }
            self.particleShaderGeo.addAttribute("position", new THREE.BufferAttribute(self.particleVertices, 3));
            self.particleShaderGeo.addAttribute("particlePositionsStartTime", (new THREE.BufferAttribute(self.particlePositionsStartTime, 4)).setDynamic(true));
            self.particleShaderGeo.addAttribute("particleVelColSizeLife", (new THREE.BufferAttribute(self.particleVelColSizeLife, 4)).setDynamic(true));
            self.particleShaderGeo.addAttribute("particleVelocity", (new THREE.BufferAttribute(self.particleVelocity, 3)).setDynamic(true));
            self.particleShaderGeo.addAttribute("particleTurbulence", (new THREE.BufferAttribute(self.particleTurbulence, 1)).setDynamic(true));
            self.posStart = self.particleShaderGeo.getAttribute("particlePositionsStartTime");
            self.velCol = self.particleShaderGeo.getAttribute("particleVelColSizeLife");
            self.velocityAttr = self.particleShaderGeo.getAttribute("particleVelocity");
            self.turbulenceAttr = self.particleShaderGeo.getAttribute("particleTurbulence");
            self.particleShaderMat = self.GPUParticleSystem.particleShaderMat;
            /**
             * @return {undefined}
             */
            this.init = function () {
                self.particleSystem = new THREE.Points(self.particleShaderGeo, self.particleShaderMat);
                /** @type {boolean} */
                self.particleSystem.frustumCulled = false;
                this.add(self.particleSystem);
            };
            var c = new THREE.Vector3;
            var vector = new THREE.Vector3;
            /** @type {number} */
            var w1 = 0;
            /** @type {number} */
            var proportionalWeight = 0;
            /** @type {number} */
            var color = 16777215;
            /** @type {number} */
            var d = 0;
            /** @type {number} */
            var objectiveF = .5;
            /** @type {number} */
            var v = 0;
            /** @type {number} */
            var size = 0;
            /** @type {number} */
            var overhead = 0;
            /** @type {boolean} */
            var _ = false;
            /** @type {number} */
            this.offset = 0;
            /** @type {number} */
            this.count = 0;
            /**
             * @param {!Object} options
             * @return {undefined}
             */
            this.spawnParticle = function (options) {
                options = options || {};
                c = void 0 !== options.position ? c.copy(options.position) : c.set(0, 0, 0);
                vector = void 0 !== options.velocity ? vector.copy(options.velocity) : vector.set(0, 0, 0);
                w1 = void 0 !== options.positionRandomness ? options.positionRandomness : 0;
                proportionalWeight = void 0 !== options.velocityRandomness ? options.velocityRandomness : 0;
                color = void 0 !== options.color ? options.color : 16777215;
                d = void 0 !== options.colorRandomness ? options.colorRandomness : 1;
                objectiveF = void 0 !== options.turbulence ? options.turbulence : 1;
                v = void 0 !== options.lifetime ? options.lifetime : 5;
                size = void 0 !== options.size ? options.size : 10;
                overhead = void 0 !== options.sizeRandomness ? options.sizeRandomness : 0;
                _ = void 0 !== options.smoothPosition && options.smoothPosition;
                if (void 0 !== self.DPR) {
                    /** @type {number} */
                    size = size * self.DPR;
                }
                i = self.PARTICLE_CURSOR;
                self.posStart.array[4 * i + 0] = c.x + name.random() * w1;
                self.posStart.array[4 * i + 1] = c.y + name.random() * w1;
                self.posStart.array[4 * i + 2] = c.z + name.random() * w1;
                self.posStart.array[4 * i + 3] = self.time + .02 * name.random();
                if (true === _) {
                    self.posStart.array[4 * i + 0] += -vector.x * name.random();
                    self.posStart.array[4 * i + 1] += -vector.y * name.random();
                    self.posStart.array[4 * i + 2] += -vector.z * name.random();
                }
                var n = vector.x + name.random() * proportionalWeight;
                var x = vector.y + name.random() * proportionalWeight;
                var s = vector.z + name.random() * proportionalWeight;
                self.turbulenceAttr.array[i] = objectiveF;
                self.velocityAttr.array[3 * i + 0] = n;
                self.velocityAttr.array[3 * i + 1] = x;
                self.velocityAttr.array[3 * i + 2] = s;
                var rgb = hexToRgb(color);
                /** @type {number} */
                var a = 0;
                for (; a < rgb.length; a++) {
                    /** @type {number} */
                    rgb[a] = Math.floor(rgb[a] + name.random() * d * 254);
                    if (rgb[a] > 254) {
                        /** @type {number} */
                        rgb[a] = 254;
                    }
                    if (rgb[a] < 0) {
                        /** @type {number} */
                        rgb[a] = 0;
                    }
                }
                self.velCol.array[4 * i + 1] = decodeFloat(rgb[0], rgb[1], rgb[2], 254);
                self.velCol.array[4 * i + 2] = size + name.random() * overhead;
                self.velCol.array[4 * i + 3] = v;
                if (0 == this.offset) {
                    this.offset = self.PARTICLE_CURSOR;
                }
                self.count++;
                self.PARTICLE_CURSOR++;
                if (self.PARTICLE_CURSOR >= self.PARTICLE_COUNT) {
                    /** @type {number} */
                    self.PARTICLE_CURSOR = 0;
                }
                /** @type {boolean} */
                self.particleUpdate = true;
            };
            /**
             * @param {boolean} time
             * @return {undefined}
             */
            this.update = function (time) {
                /** @type {boolean} */
                self.time = time;
                /** @type {boolean} */
                self.particleShaderMat.uniforms.uTime.value = time;
                this.geometryUpdate();
            };
            /**
             * @return {undefined}
             */
            this.geometryUpdate = function () {
                if (1 == self.particleUpdate) {
                    /** @type {boolean} */
                    self.particleUpdate = false;
                    if (self.offset + self.count < self.PARTICLE_COUNT) {
                        /** @type {number} */
                        self.posStart.updateRange.offset = self.velCol.updateRange.offset = 4 * self.offset;
                        /** @type {number} */
                        self.posStart.updateRange.count = self.velCol.updateRange.count = 4 * self.count;
                    } else {
                        /** @type {number} */
                        self.posStart.updateRange.offset = 0;
                        /** @type {number} */
                        self.posStart.updateRange.count = self.velCol.updateRange.count = 4 * self.PARTICLE_COUNT;
                    }
                    /** @type {boolean} */
                    self.posStart.needsUpdate = true;
                    /** @type {boolean} */
                    self.velCol.needsUpdate = true;
                    /** @type {boolean} */
                    self.velocityAttr.needsUpdate = true;
                    /** @type {boolean} */
                    self.turbulenceAttr.needsUpdate = true;
                    /** @type {number} */
                    self.offset = 0;
                    /** @type {number} */
                    self.count = 0;
                }
            };
            this.init();
        };
        /** @type {!Object} */
        THREE.GPUParticleContainer.prototype = Object.create(THREE.Object3D.prototype);
        /** @type {function(!Object, !Object): undefined} */
        THREE.GPUParticleContainer.prototype.constructor = THREE.GPUParticleContainer;
        /** @type {function(!Object): undefined} */
        m.exports = THREE.GPUParticleSystem;
    },
    function (i, items, moment) {
        (function (boardManager) {
            var evaluatedParams;
            var r;
            !function (window, canCreateDiscussions) {
                var obj = {};
                var document = window.document;
                var _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
                if (!_globals.TweenLite) {
                    var a;
                    var i;
                    var p;
                    var _ticker;
                    var cvalue;
                    /**
                     * @param {string} event
                     * @return {?}
                     */
                    var _namespace = function (event) {
                        var layer_i;
                        var crossfilterable_layers = event.split(".");
                        var p = _globals;
                        /** @type {number} */
                        layer_i = 0;
                        for (; layer_i < crossfilterable_layers.length; layer_i++) {
                            p[crossfilterable_layers[layer_i]] = p = p[crossfilterable_layers[layer_i]] || {};
                        }
                        return p;
                    };
                    var gs = _namespace("com.greensock");
                    /**
                     * @param {!Object} a
                     * @return {?}
                     */
                    var _slice = function (a) {
                        var i;
                        /** @type {!Array} */
                        var b = [];
                        var n = a.length;
                        /** @type {number} */
                        i = 0;
                        for (; i !== n; b.push(a[i++])) {
                        }
                        return b;
                    };
                    /**
                     * @return {undefined}
                     */
                    var NPM = function () {
                    };
                    var _isArray = function () {
                        /** @type {function(this:*): string} */
                        var objectToString$2 = Object.prototype.toString;
                        /** @type {string} */
                        var referenceerror = objectToString$2.call([]);
                        return function (value) {
                            return null != value && (value instanceof Array || "object" == typeof value && !!value.push && objectToString$2.call(value) === referenceerror);
                        };
                    }();
                    var _defLookup = {};
                    /**
                     * @param {string} ns
                     * @param {!Object} dependencies
                     * @param {!Function} func
                     * @param {?} global
                     * @return {undefined}
                     */
                    var Definition = function (ns, dependencies, func, global) {
                        this.sc = _defLookup[ns] ? _defLookup[ns].sc : [];
                        _defLookup[ns] = this;
                        /** @type {null} */
                        this.gsClass = null;
                        /** @type {!Function} */
                        this.func = func;
                        /** @type {!Array} */
                        var _classes = [];
                        /**
                         * @param {boolean} assertion
                         * @return {undefined}
                         */
                        this.check = function (assertion) {
                            var cur;
                            var result;
                            var n;
                            var node;
                            var i = dependencies.length;
                            var numFrom = i;
                            for (; --i > -1;) {
                                if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                    _classes[i] = cur.gsClass;
                                    numFrom--;
                                } else {
                                    if (assertion) {
                                        cur.sc.push(this);
                                    }
                                }
                            }
                            if (0 === numFrom && func) {
                                if (result = ("com.greensock." + ns).split("."), n = result.pop(), node = _namespace(result.join("."))[n] = this.gsClass = func.apply(func, _classes), global) {
                                    if (_globals[n] = obj[n] = node, void 0 !== i && i.exports) {
                                        if ("TweenLite" === ns) {
                                            i.exports = obj.TweenLite = node;
                                            for (i in obj) {
                                                node[i] = obj[i];
                                            }
                                        } else {
                                            if (obj.TweenLite) {
                                                obj.TweenLite[n] = node;
                                            }
                                        }
                                    } else {
                                        /** @type {!Array} */
                                        evaluatedParams = [];
                                        if (void 0 !== (r = function () {
                                                return node;
                                            }.apply(items, evaluatedParams))) {
                                            i.exports = r;
                                        }
                                    }
                                }
                                /** @type {number} */
                                i = 0;
                                for (; i < this.sc.length; i++) {
                                    this.sc[i].check();
                                }
                            }
                        };
                        this.check(true);
                    };
                    /** @type {function(string, !Object, !Function, string): ?} */
                    var _gsDefine = window._gsDefine = function (name, dependencies, func, global) {
                        return new Definition(name, dependencies, func, global);
                    };
                    /** @type {function(string, !Function, boolean): ?} */
                    var _class = gs._class = function (ns, f, global) {
                        return f = f || function () {
                        }, _gsDefine(ns, [], function () {
                            return f;
                        }, global), f;
                    };
                    _gsDefine.globals = _globals;
                    /** @type {!Array} */
                    var _baseParams = [0, 0, 1, 1];
                    var Ease = _class("easing.Ease", function (f, extraParams, type, power) {
                        /** @type {!Function} */
                        this._func = f;
                        this._type = type || 0;
                        this._power = power || 0;
                        /** @type {!Array<?>} */
                        this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                    }, true);
                    var _easeMap = Ease.map = {};
                    /** @type {function(!Object, string, string, boolean): undefined} */
                    var _easeReg = Ease.register = function (ease, names, types, create) {
                        var e;
                        var name;
                        var i;
                        var type;
                        var r = names.split(",");
                        var j = r.length;
                        var values = (types || "easeIn,easeOut,easeInOut").split(",");
                        for (; --j > -1;) {
                            name = r[j];
                            e = create ? _class("easing." + name, null, true) : gs.easing[name] || {};
                            i = values.length;
                            for (; --i > -1;) {
                                type = values[i];
                                _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease;
                            }
                        }
                    };
                    p = Ease.prototype;
                    /** @type {boolean} */
                    p._calcEnd = false;
                    /**
                     * @param {number} p
                     * @return {?}
                     */
                    p.getRatio = function (p) {
                        if (this._func) {
                            return this._params[0] = p, this._func.apply(null, this._params);
                        }
                        var type = this._type;
                        var pw = this._power;
                        var r = 1 === type ? 1 - p : 2 === type ? p : p < .5 ? 2 * p : 2 * (1 - p);
                        return 1 === pw ? r = r * r : 2 === pw ? r = r * (r * r) : 3 === pw ? r = r * (r * r * r) : 4 === pw && (r = r * (r * r * r * r)), 1 === type ? 1 - r : 2 === type ? r : p < .5 ? r / 2 : 1 - r / 2;
                    };
                    /** @type {!Array} */
                    a = ["Linear", "Quad", "Cubic", "Quart", "Quint,Strong"];
                    /** @type {number} */
                    i = a.length;
                    for (; --i > -1;) {
                        /** @type {string} */
                        p = a[i] + ",Power" + i;
                        _easeReg(new Ease(null, null, 1, i), p, "easeOut", true);
                        _easeReg(new Ease(null, null, 2, i), p, "easeIn" + (0 === i ? ",easeNone" : ""));
                        _easeReg(new Ease(null, null, 3, i), p, "easeInOut");
                    }
                    _easeMap.linear = gs.easing.Linear.easeIn;
                    _easeMap.swing = gs.easing.Quad.easeInOut;
                    var EventDispatcher = _class("events.EventDispatcher", function (target) {
                        this._listeners = {};
                        this._eventTarget = target || this;
                    });
                    p = EventDispatcher.prototype;
                    /**
                     * @param {string} type
                     * @param {string} callback
                     * @param {string} scope
                     * @param {boolean} useParam
                     * @param {number} priority
                     * @return {undefined}
                     */
                    p.addEventListener = function (type, callback, scope, useParam, priority) {
                        priority = priority || 0;
                        var listener;
                        var i;
                        var list = this._listeners[type];
                        /** @type {number} */
                        var dfrom = 0;
                        if (!(this !== _ticker || cvalue)) {
                            _ticker.wake();
                        }
                        if (null == list) {
                            /** @type {!Array} */
                            this._listeners[type] = list = [];
                        }
                        i = list.length;
                        for (; --i > -1;) {
                            listener = list[i];
                            if (listener.c === callback && listener.s === scope) {
                                list.splice(i, 1);
                            } else {
                                if (0 === dfrom && listener.pr < priority) {
                                    dfrom = i + 1;
                                }
                            }
                        }
                        list.splice(dfrom, 0, {
                            c: callback,
                            s: scope,
                            up: useParam,
                            pr: priority
                        });
                    };
                    /**
                     * @param {string} event
                     * @param {!Function} callback
                     * @return {?}
                     */
                    p.removeEventListener = function (event, callback) {
                        var i;
                        var listeners = this._listeners[event];
                        if (listeners) {
                            i = listeners.length;
                            for (; --i > -1;) {
                                if (listeners[i].c === callback) {
                                    return void listeners.splice(i, 1);
                                }
                            }
                        }
                    };
                    /**
                     * @param {!Object} type
                     * @return {undefined}
                     */
                    p.dispatchEvent = function (type) {
                        var i;
                        var t;
                        var listener;
                        var listeners = this._listeners[type];
                        if (listeners) {
                            i = listeners.length;
                            if (i > 1) {
                                listeners = listeners.slice(0);
                            }
                            t = this._eventTarget;
                            for (; --i > -1;) {
                                if (listener = listeners[i]) {
                                    if (listener.up) {
                                        listener.c.call(listener.s || t, {
                                            type: type,
                                            target: t
                                        });
                                    } else {
                                        listener.c.call(listener.s || t);
                                    }
                                }
                            }
                        }
                    };
                    var name = window.requestAnimationFrame;
                    var _cancelAnimFrame = window.cancelAnimationFrame;
                    /** @type {function(): number} */
                    var _getTime = Date.now || function () {
                        return (new Date).getTime();
                    };
                    /** @type {number} */
                    var _lastUpdate = _getTime();
                    /** @type {!Array} */
                    a = ["ms", "moz", "webkit", "o"];
                    /** @type {number} */
                    i = a.length;
                    for (; --i > -1 && !name;) {
                        name = window[a[i] + "RequestAnimationFrame"];
                        _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
                    }
                    _class("Ticker", function (fps, Move) {
                        var _fps;
                        var type;
                        var i;
                        var _gap;
                        var _nextTime;
                        var _self = this;
                        /** @type {number} */
                        var _startTime = _getTime();
                        /** @type {(boolean|string)} */
                        var parent = !(false === Move || !name) && "auto";
                        /** @type {number} */
                        var _lagThreshold = 500;
                        /** @type {number} */
                        var _adjustedLag = 33;
                        /**
                         * @param {boolean} argCount
                         * @return {undefined}
                         */
                        var cb = function (argCount) {
                            var overlap;
                            var s;
                            /** @type {number} */
                            var elapsed = _getTime() - _lastUpdate;
                            if (elapsed > _lagThreshold) {
                                _startTime = _startTime + (elapsed - _adjustedLag);
                            }
                            _lastUpdate = _lastUpdate + elapsed;
                            /** @type {number} */
                            _self.time = (_lastUpdate - _startTime) / 1e3;
                            /** @type {number} */
                            overlap = _self.time - _nextTime;
                            if (!_fps || overlap > 0 || true === argCount) {
                                _self.frame++;
                                _nextTime = _nextTime + (overlap + (overlap >= _gap ? .004 : _gap - overlap));
                                /** @type {boolean} */
                                s = true;
                            }
                            if (true !== argCount) {
                                i = type(cb);
                            }
                            if (s) {
                                _self.dispatchEvent("tick");
                            }
                        };
                        EventDispatcher.call(_self);
                        /** @type {number} */
                        _self.time = _self.frame = 0;
                        /**
                         * @return {undefined}
                         */
                        _self.tick = function () {
                            cb(true);
                        };
                        /**
                         * @param {number} threshold
                         * @param {?} adjustedLag
                         * @return {?}
                         */
                        _self.lagSmoothing = function (threshold, adjustedLag) {
                            if (!arguments.length) {
                                return _lagThreshold < 1e10;
                            }
                            _lagThreshold = threshold || 1e10;
                            /** @type {number} */
                            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                        };
                        /**
                         * @return {undefined}
                         */
                        _self.sleep = function () {
                            if (null != i) {
                                if (parent && _cancelAnimFrame) {
                                    _cancelAnimFrame(i);
                                } else {
                                    clearTimeout(i);
                                }
                                /** @type {function(): undefined} */
                                type = NPM;
                                /** @type {null} */
                                i = null;
                                if (_self === _ticker) {
                                    /** @type {boolean} */
                                    cvalue = false;
                                }
                            }
                        };
                        /**
                         * @param {?} event
                         * @return {undefined}
                         */
                        _self.wake = function (event) {
                            if (null !== i) {
                                _self.sleep();
                            } else {
                                if (event) {
                                    _startTime = _startTime + (-_lastUpdate + (_lastUpdate = _getTime()));
                                } else {
                                    if (_self.frame > 10) {
                                        /** @type {number} */
                                        _lastUpdate = _getTime() - _lagThreshold + 5;
                                    }
                                }
                            }
                            type = 0 === _fps ? NPM : parent && name ? name : function (type) {
                                return setTimeout(type, 1e3 * (_nextTime - _self.time) + 1 | 0);
                            };
                            if (_self === _ticker) {
                                /** @type {boolean} */
                                cvalue = true;
                            }
                            cb(2);
                        };
                        /**
                         * @param {number} value
                         * @return {?}
                         */
                        _self.fps = function (value) {
                            if (!arguments.length) {
                                return _fps;
                            }
                            /** @type {number} */
                            _fps = value;
                            /** @type {number} */
                            _gap = 1 / (_fps || 60);
                            _nextTime = this.time + _gap;
                            _self.wake();
                        };
                        /**
                         * @param {boolean} value
                         * @return {?}
                         */
                        _self.useRAF = function (value) {
                            if (!arguments.length) {
                                return parent;
                            }
                            _self.sleep();
                            /** @type {boolean} */
                            parent = value;
                            _self.fps(_fps);
                        };
                        _self.fps(fps);
                        setTimeout(function () {
                            if ("auto" === parent && _self.frame < 5 && "hidden" !== document.visibilityState) {
                                _self.useRAF(false);
                            }
                        }, 1500);
                    });
                    p = gs.Ticker.prototype = new gs.events.EventDispatcher;
                    p.constructor = gs.Ticker;
                    var Animation = _class("core.Animation", function (duration, vars) {
                        if (this.vars = vars = vars || {}, this._duration = this._totalDuration = duration || 0, this._delay = Number(vars.delay) || 0, this._timeScale = 1, this._active = true === vars.immediateRender, this.data = vars.data, this._reversed = true === vars.reversed, _rootTimeline) {
                            if (!cvalue) {
                                _ticker.wake();
                            }
                            var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                            tl.add(this, tl._time);
                            if (this.vars.paused) {
                                this.paused(true);
                            }
                        }
                    });
                    _ticker = Animation.ticker = new gs.Ticker;
                    p = Animation.prototype;
                    /** @type {boolean} */
                    p._dirty = p._gc = p._initted = p._paused = false;
                    /** @type {number} */
                    p._totalTime = p._time = 0;
                    /** @type {number} */
                    p._rawPrevTime = -1;
                    /** @type {null} */
                    p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
                    /** @type {boolean} */
                    p._paused = false;
                    /**
                     * @return {undefined}
                     */
                    var _checkTimeout = function () {
                        if (cvalue && _getTime() - _lastUpdate > 2e3 && ("hidden" !== document.visibilityState || !_ticker.lagSmoothing())) {
                            _ticker.wake();
                        }
                        /** @type {number} */
                        var ref_wait = setTimeout(_checkTimeout, 2e3);
                        if (ref_wait.unref) {
                            ref_wait.unref();
                        }
                    };
                    _checkTimeout();
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.play = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.reversed(false).paused(false);
                    };
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.pause = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.paused(true);
                    };
                    /**
                     * @param {number} value
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.resume = function (value, suppressEvents) {
                        return null != value && this.seek(value, suppressEvents), this.paused(false);
                    };
                    /**
                     * @param {number} time
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.seek = function (time, suppressEvents) {
                        return this.totalTime(Number(time), false !== suppressEvents);
                    };
                    /**
                     * @param {number} includeDelay
                     * @param {!Object} suppressEvents
                     * @return {?}
                     */
                    p.restart = function (includeDelay, suppressEvents) {
                        return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, false !== suppressEvents, true);
                    };
                    /**
                     * @param {number} from
                     * @param {boolean} suppressEvents
                     * @return {?}
                     */
                    p.reverse = function (from, suppressEvents) {
                        return null != from && this.seek(from || this.totalDuration(), suppressEvents), this.reversed(true).paused(false);
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {undefined}
                     */
                    p.render = function (time, suppressEvents, force) {
                    };
                    /**
                     * @return {?}
                     */
                    p.invalidate = function () {
                        return this._time = this._totalTime = 0, this._initted = this._gc = false, this._rawPrevTime = -1, !this._gc && this.timeline || this._enabled(true), this;
                    };
                    /**
                     * @return {?}
                     */
                    p.isActive = function () {
                        var rawTime;
                        var tl = this._timeline;
                        var startTime = this._startTime;
                        return !tl || !this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 1e-7;
                    };
                    /**
                     * @param {string} enabled
                     * @param {boolean} ignoreTimeline
                     * @return {?}
                     */
                    p._enabled = function (enabled, ignoreTimeline) {
                        return cvalue || _ticker.wake(), this._gc = !enabled, this._active = this.isActive(), true !== ignoreTimeline && (enabled && !this.timeline ? this._timeline.add(this, this._startTime - this._delay) : !enabled && this.timeline && this._timeline._remove(this, true)), false;
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @return {?}
                     */
                    p._kill = function (vars, target) {
                        return this._enabled(false, false);
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @return {?}
                     */
                    p.kill = function (vars, target) {
                        return this._kill(vars, target), this;
                    };
                    /**
                     * @param {boolean} includeSelf
                     * @return {?}
                     */
                    p._uncache = function (includeSelf) {
                        var tween = includeSelf ? this : this.timeline;
                        for (; tween;) {
                            /** @type {boolean} */
                            tween._dirty = true;
                            tween = tween.timeline;
                        }
                        return this;
                    };
                    /**
                     * @param {!Object} params
                     * @return {?}
                     */
                    p._swapSelfInParams = function (params) {
                        var i = params.length;
                        var copy = params.concat();
                        for (; --i > -1;) {
                            if ("{self}" === params[i]) {
                                copy[i] = this;
                            }
                        }
                        return copy;
                    };
                    /**
                     * @param {string} type
                     * @return {undefined}
                     */
                    p._callback = function (type) {
                        var v = this.vars;
                        var cb = v[type];
                        var obj = v[type + "Params"];
                        var Y = v[type + "Scope"] || v.callbackScope || this;
                        switch (obj ? obj.length : 0) {
                            case 0:
                                cb.call(Y);
                                break;
                            case 1:
                                cb.call(Y, obj[0]);
                                break;
                            case 2:
                                cb.call(Y, obj[0], obj[1]);
                                break;
                            default:
                                cb.apply(Y, obj);
                        }
                    };
                    /**
                     * @param {string} type
                     * @param {!Function} callback
                     * @param {!Array} params
                     * @param {?} scope
                     * @return {?}
                     */
                    p.eventCallback = function (type, callback, params, scope) {
                        if ("on" === (type || "").substr(0, 2)) {
                            var v = this.vars;
                            if (1 === arguments.length) {
                                return v[type];
                            }
                            if (null == callback) {
                                delete v[type];
                            } else {
                                /** @type {!Function} */
                                v[type] = callback;
                                v[type + "Params"] = _isArray(params) && -1 !== params.join("").indexOf("{self}") ? this._swapSelfInParams(params) : params;
                                v[type + "Scope"] = scope;
                            }
                            if ("onUpdate" === type) {
                                /** @type {!Function} */
                                this._onUpdate = callback;
                            }
                        }
                        return this;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.delay = function (value) {
                        return arguments.length ? (this._timeline.smoothChildTiming && this.startTime(this._startTime + value - this._delay), this._delay = value, this) : this._delay;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.duration = function (value) {
                        return arguments.length ? (this._duration = this._totalDuration = value, this._uncache(true), this._timeline.smoothChildTiming && this._time > 0 && this._time < this._duration && 0 !== value && this.totalTime(this._totalTime * (value / this._duration), true), this) : (this._dirty = false, this._duration);
                    };
                    /**
                     * @param {undefined} value
                     * @return {?}
                     */
                    p.totalDuration = function (value) {
                        return this._dirty = false, arguments.length ? this.duration(value) : this._totalDuration;
                    };
                    /**
                     * @param {!Object} value
                     * @param {string} name
                     * @return {?}
                     */
                    p.time = function (value, name) {
                        return arguments.length ? (this._dirty && this.totalDuration(), this.totalTime(value > this._duration ? this._duration : value, name)) : this._time;
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} uncapped
                     * @return {?}
                     */
                    p.totalTime = function (time, suppressEvents, uncapped) {
                        if (cvalue || _ticker.wake(), !arguments.length) {
                            return this._totalTime;
                        }
                        if (this._timeline) {
                            if (time < 0 && !uncapped && (time = time + this.totalDuration()), this._timeline.smoothChildTiming) {
                                if (this._dirty) {
                                    this.totalDuration();
                                }
                                var totalDuration = this._totalDuration;
                                var tl = this._timeline;
                                if (time > totalDuration && !uncapped && (time = totalDuration), this._startTime = (this._paused ? this._pauseTime : tl._time) - (this._reversed ? totalDuration - time : time) / this._timeScale, tl._dirty || this._uncache(false), tl._timeline) {
                                    for (; tl._timeline;) {
                                        if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                            tl.totalTime(tl._totalTime, true);
                                        }
                                        tl = tl._timeline;
                                    }
                                }
                            }
                            if (this._gc) {
                                this._enabled(true, false);
                            }
                            if (!(this._totalTime === time && 0 !== this._duration)) {
                                if (_lazyTweens.length) {
                                    _lazyRender();
                                }
                                this.render(time, suppressEvents, false);
                                if (_lazyTweens.length) {
                                    _lazyRender();
                                }
                            }
                        }
                        return this;
                    };
                    /** @type {function(?, string): ?} */
                    p.progress = p.totalProgress = function (value, suppressEvents) {
                        var duration = this.duration();
                        return arguments.length ? this.totalTime(duration * value, suppressEvents) : duration ? this._time / duration : this.ratio;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.startTime = function (value) {
                        return arguments.length ? (value !== this._startTime && (this._startTime = value, this.timeline && this.timeline._sortChildren && this.timeline.add(this, value - this._delay)), this) : this._startTime;
                    };
                    /**
                     * @param {string} name
                     * @return {?}
                     */
                    p.endTime = function (name) {
                        return this._startTime + (0 != name ? this.totalDuration() : this.duration()) / this._timeScale;
                    };
                    /**
                     * @param {number} value
                     * @return {?}
                     */
                    p.timeScale = function (value) {
                        if (!arguments.length) {
                            return this._timeScale;
                        }
                        var val;
                        var data;
                        value = value || 1e-10;
                        if (this._timeline && this._timeline.smoothChildTiming) {
                            val = this._pauseTime;
                            data = val || 0 === val ? val : this._timeline.totalTime();
                            /** @type {number} */
                            this._startTime = data - (data - this._startTime) * this._timeScale / value;
                        }
                        /** @type {number} */
                        this._timeScale = value;
                        data = this.timeline;
                        for (; data && data.timeline;) {
                            /** @type {boolean} */
                            data._dirty = true;
                            data.totalDuration();
                            data = data.timeline;
                        }
                        return this;
                    };
                    /**
                     * @param {string} value
                     * @return {?}
                     */
                    p.reversed = function (value) {
                        return arguments.length ? (value != this._reversed && (this._reversed = value, this.totalTime(this._timeline && !this._timeline.smoothChildTiming ? this.totalDuration() - this._totalTime : this._totalTime, true)), this) : this._reversed;
                    };
                    /**
                     * @param {string} value
                     * @return {?}
                     */
                    p.paused = function (value) {
                        if (!arguments.length) {
                            return this._paused;
                        }
                        var raw;
                        var elapsed;
                        var tl = this._timeline;
                        return value != this._paused && tl && (cvalue || value || _ticker.wake(), raw = tl.rawTime(), elapsed = raw - this._pauseTime, !value && tl.smoothChildTiming && (this._startTime += elapsed, this._uncache(false)), this._pauseTime = value ? raw : null, this._paused = value, this._active = this.isActive(), !value && 0 !== elapsed && this._initted && this.duration() && (raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale, this.render(raw, raw === this._totalTime,
                            true))), this._gc && !value && this._enabled(true, false), this;
                    };
                    var SimpleTimeline = _class("core.SimpleTimeline", function (args) {
                        Animation.call(this, 0, args);
                        /** @type {boolean} */
                        this.autoRemoveChildren = this.smoothChildTiming = true;
                    });
                    p = SimpleTimeline.prototype = new Animation;
                    p.constructor = SimpleTimeline;
                    /** @type {boolean} */
                    p.kill()._gc = false;
                    /** @type {null} */
                    p._first = p._last = p._recent = null;
                    /** @type {boolean} */
                    p._sortChildren = false;
                    /** @type {function(!Object, number, ?, ?): ?} */
                    p.add = p.insert = function (child, position, fromNewID, toNewID) {
                        var prevTween;
                        var st;
                        if (child._startTime = Number(position || 0) + child._delay, child._paused && this !== child._timeline && (child._pauseTime = child._startTime + (this.rawTime() - child._startTime) / child._timeScale), child.timeline && child.timeline._remove(child, true), child.timeline = child._timeline = this, child._gc && child._enabled(true, true), prevTween = this._last, this._sortChildren) {
                            st = child._startTime;
                            for (; prevTween && prevTween._startTime > st;) {
                                prevTween = prevTween._prev;
                            }
                        }
                        return prevTween ? (child._next = prevTween._next, prevTween._next = child) : (child._next = this._first, this._first = child), child._next ? child._next._prev = child : this._last = child, child._prev = prevTween, this._recent = child, this._timeline && this._uncache(true), this;
                    };
                    /**
                     * @param {!Object} tween
                     * @param {string} skipDisable
                     * @return {?}
                     */
                    p._remove = function (tween, skipDisable) {
                        return tween.timeline === this && (skipDisable || tween._enabled(false, true), tween._prev ? tween._prev._next = tween._next : this._first === tween && (this._first = tween._next), tween._next ? tween._next._prev = tween._prev : this._last === tween && (this._last = tween._prev), tween._next = tween._prev = tween.timeline = null, tween === this._recent && (this._recent = this._last), this._timeline && this._uncache(true)), this;
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {undefined}
                     */
                    p.render = function (time, suppressEvents, force) {
                        var next;
                        var tween = this._first;
                        this._totalTime = this._time = this._rawPrevTime = time;
                        for (; tween;) {
                            next = tween._next;
                            if (tween._active || time >= tween._startTime && !tween._paused && !tween._gc) {
                                if (tween._reversed) {
                                    tween.render((tween._dirty ? tween.totalDuration() : tween._totalDuration) - (time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                } else {
                                    tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                                }
                            }
                            tween = next;
                        }
                    };
                    /**
                     * @return {?}
                     */
                    p.rawTime = function () {
                        return cvalue || _ticker.wake(), this._totalTime;
                    };
                    var TweenLite = _class("TweenLite", function (target, duration, args) {
                        if (Animation.call(this, duration, args), this.render = TweenLite.prototype.render, null == target) {
                            throw "Cannot tween a null target.";
                        }
                        this.target = target = "string" != typeof target ? target : TweenLite.selector(target) || target;
                        var i;
                        var targ;
                        var targets;
                        var isSelector = target.jquery || target.length && target !== window && target[0] && (target[0] === window || target[0].nodeType && target[0].style && !target.nodeType);
                        var overwrite = this.vars.overwrite;
                        if (this._overwrite = overwrite = null == overwrite ? _overwriteLookup[TweenLite.defaultOverwrite] : "number" == typeof overwrite ? overwrite >> 0 : _overwriteLookup[overwrite], (isSelector || target instanceof Array || target.push && _isArray(target)) && "number" != typeof target[0]) {
                            this._targets = targets = _slice(target);
                            /** @type {!Array} */
                            this._propLookup = [];
                            /** @type {!Array} */
                            this._siblings = [];
                            /** @type {number} */
                            i = 0;
                            for (; i < targets.length; i++) {
                                targ = targets[i];
                                if (targ) {
                                    if ("string" != typeof targ) {
                                        if (targ.length && targ !== window && targ[0] && (targ[0] === window || targ[0].nodeType && targ[0].style && !targ.nodeType)) {
                                            targets.splice(i--, 1);
                                            this._targets = targets = targets.concat(_slice(targ));
                                        } else {
                                            this._siblings[i] = _register(targ, this, false);
                                            if (1 === overwrite && this._siblings[i].length > 1) {
                                                _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                                            }
                                        }
                                    } else {
                                        if ("string" == typeof(targ = targets[i--] = TweenLite.selector(targ))) {
                                            targets.splice(i + 1, 1);
                                        }
                                    }
                                } else {
                                    targets.splice(i--, 1);
                                }
                            }
                        } else {
                            this._propLookup = {};
                            this._siblings = _register(target, this, false);
                            if (1 === overwrite && this._siblings.length > 1) {
                                _applyOverwrite(target, this, null, 1, this._siblings);
                            }
                        }
                        if (this.vars.immediateRender || 0 === duration && 0 === this._delay && false !== this.vars.immediateRender) {
                            /** @type {number} */
                            this._time = -1e-10;
                            this.render(Math.min(0, -this._delay));
                        }
                    }, true);
                    /**
                     * @param {!Object} v
                     * @return {?}
                     */
                    var _isSelector = function (v) {
                        return v && v.length && v !== window && v[0] && (v[0] === window || v[0].nodeType && v[0].style && !v.nodeType);
                    };
                    /**
                     * @param {(Object|string)} vars
                     * @param {!Object} obj
                     * @return {undefined}
                     */
                    var _autoCSS = function (vars, obj) {
                        var undefined;
                        var val = {};
                        for (undefined in vars) {
                            if (!(j[undefined] || undefined in obj && "transform" !== undefined && "x" !== undefined && "y" !== undefined && "width" !== undefined && "height" !== undefined && "className" !== undefined && "border" !== undefined || !(!_plugins[undefined] || _plugins[undefined] && _plugins[undefined]._autoCSS))) {
                                val[undefined] = vars[undefined];
                                delete vars[undefined];
                            }
                        }
                        vars.css = val;
                    };
                    p = TweenLite.prototype = new Animation;
                    p.constructor = TweenLite;
                    /** @type {boolean} */
                    p.kill()._gc = false;
                    /** @type {number} */
                    p.ratio = 0;
                    /** @type {null} */
                    p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
                    /** @type {boolean} */
                    p._notifyPluginsOfEnabled = p._lazy = false;
                    /** @type {string} */
                    TweenLite.version = "1.20.3";
                    TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
                    /** @type {string} */
                    TweenLite.defaultOverwrite = "auto";
                    TweenLite.ticker = _ticker;
                    /** @type {number} */
                    TweenLite.autoSleep = 120;
                    /**
                     * @param {number} threshold
                     * @param {?} adjustedLag
                     * @return {undefined}
                     */
                    TweenLite.lagSmoothing = function (threshold, adjustedLag) {
                        _ticker.lagSmoothing(threshold, adjustedLag);
                    };
                    TweenLite.selector = window.$ || window.jQuery || function (e) {
                        var selector = window.$ || window.jQuery;
                        return selector ? (TweenLite.selector = selector, selector(e)) : void 0 === document ? e : document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById("#" === e.charAt(0) ? e.substr(1) : e);
                    };
                    /** @type {!Array} */
                    var _lazyTweens = [];
                    var _lazyLookup = {};
                    /** @type {!RegExp} */
                    var METADATA_REGEX = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;
                    /** @type {!RegExp} */
                    var rtUtils = /[\+-]=-?[\.\d]/;
                    /**
                     * @param {number} v
                     * @return {undefined}
                     */
                    var _setRatio = function (v) {
                        var value;
                        var pt = this._firstPT;
                        for (; pt;) {
                            value = pt.blob ? 1 === v && null != this.end ? this.end : v ? this.join("") : this.start : pt.c * v + pt.s;
                            if (pt.m) {
                                value = pt.m(value, this._target || pt.t);
                            } else {
                                if (value < 1e-6 && value > -1e-6 && !pt.blob) {
                                    /** @type {number} */
                                    value = 0;
                                }
                            }
                            if (pt.f) {
                                if (pt.fp) {
                                    pt.t[pt.p](pt.fp, value);
                                } else {
                                    pt.t[pt.p](value);
                                }
                            } else {
                                pt.t[pt.p] = value;
                            }
                            pt = pt._next;
                        }
                    };
                    /**
                     * @param {string} i
                     * @param {string} o
                     * @param {?} filter
                     * @param {!Object} pt
                     * @return {?}
                     */
                    var _blobDif = function (i, o, filter, pt) {
                        var p;
                        var regItemDeps;
                        var x;
                        var n;
                        var regItemDepLen;
                        var text;
                        var v;
                        /** @type {!Array} */
                        var a = [];
                        /** @type {number} */
                        var start = 0;
                        /** @type {string} */
                        var result = "";
                        /** @type {number} */
                        var color = 0;
                        /** @type {string} */
                        a.start = i;
                        /** @type {string} */
                        a.end = o;
                        /** @type {string} */
                        i = a[0] = i + "";
                        /** @type {string} */
                        o = a[1] = o + "";
                        if (filter) {
                            filter(a);
                            i = a[0];
                            o = a[1];
                        }
                        /** @type {number} */
                        a.length = 0;
                        p = i.match(METADATA_REGEX) || [];
                        regItemDeps = o.match(METADATA_REGEX) || [];
                        if (pt) {
                            /** @type {null} */
                            pt._next = null;
                            /** @type {number} */
                            pt.blob = 1;
                            a._firstPT = a._applyPT = pt;
                        }
                        regItemDepLen = regItemDeps.length;
                        /** @type {number} */
                        n = 0;
                        for (; n < regItemDepLen; n++) {
                            v = regItemDeps[n];
                            text = o.substr(start, o.indexOf(v, start) - start);
                            /** @type {string} */
                            result = result + (text || !n ? text : ",");
                            start = start + text.length;
                            if (color) {
                                /** @type {number} */
                                color = (color + 1) % 5;
                            } else {
                                if ("rgba(" === text.substr(-5)) {
                                    /** @type {number} */
                                    color = 1;
                                }
                            }
                            if (v === p[n] || p.length <= n) {
                                /** @type {string} */
                                result = result + v;
                            } else {
                                if (result) {
                                    a.push(result);
                                    /** @type {string} */
                                    result = "";
                                }
                                /** @type {number} */
                                x = parseFloat(p[n]);
                                a.push(x);
                                a._firstPT = {
                                    _next: a._firstPT,
                                    t: a,
                                    p: a.length - 1,
                                    s: x,
                                    c: ("=" === v.charAt(1) ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) : parseFloat(v) - x) || 0,
                                    f: 0,
                                    m: color && color < 4 ? Math.round : 0
                                };
                            }
                            start = start + v.length;
                        }
                        return result = result + o.substr(start), result && a.push(result), a.setRatio = _setRatio, rtUtils.test(o) && (a.end = null), a;
                    };
                    /**
                     * @param {!Object} target
                     * @param {string} prop
                     * @param {string} start
                     * @param {!Object} end
                     * @param {string} n
                     * @param {number} a
                     * @param {boolean} funcParam
                     * @param {string} stringFilter
                     * @param {number} index
                     * @return {?}
                     */
                    var _addPropTween = function (target, prop, start, end, n, a, funcParam, stringFilter, index) {
                        if ("function" == typeof end) {
                            end = end(index || 0, target);
                        }
                        var blob;
                        /** @type {string} */
                        var type = typeof target[prop];
                        var id = "function" !== type ? "" : prop.indexOf("set") || "function" != typeof target["get" + prop.substr(3)] ? prop : "get" + prop.substr(3);
                        var s = "get" !== start ? start : id ? funcParam ? target[id](funcParam) : target[id]() : target[prop];
                        /** @type {boolean} */
                        var reverse = "string" == typeof end && "=" === end.charAt(1);
                        var pt = {
                            t: target,
                            p: prop,
                            s: s,
                            f: "function" === type,
                            pg: 0,
                            n: n || prop,
                            m: a ? "function" == typeof a ? a : Math.round : 0,
                            pr: 0,
                            c: reverse ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : parseFloat(end) - s || 0
                        };
                        if (("number" != typeof s || "number" != typeof end && !reverse) && (funcParam || isNaN(s) || !reverse && isNaN(end) || "boolean" == typeof s || "boolean" == typeof end ? (pt.fp = funcParam, blob = _blobDif(s, reverse ? parseFloat(pt.s) + pt.c : end, stringFilter || TweenLite.defaultStringFilter, pt), pt = {
                                t: blob,
                                p: "setRatio",
                                s: 0,
                                c: 1,
                                f: 2,
                                pg: 0,
                                n: n || prop,
                                pr: 0,
                                m: 0
                            }) : (pt.s = parseFloat(s), reverse || (pt.c = parseFloat(end) - pt.s || 0))), pt.c) {
                            return (pt._next = this._firstPT) && (pt._next._prev = pt), this._firstPT = pt, pt;
                        }
                    };
                    var _internals = TweenLite._internals = {
                        isArray: _isArray,
                        isSelector: _isSelector,
                        lazyTweens: _lazyTweens,
                        blobDif: _blobDif
                    };
                    var _plugins = TweenLite._plugins = {};
                    var _tweenLookup = _internals.tweenLookup = {};
                    /** @type {number} */
                    var _tweenLookupNum = 0;
                    var j = _internals.reservedProps = {
                        ease: 1,
                        delay: 1,
                        overwrite: 1,
                        onComplete: 1,
                        onCompleteParams: 1,
                        onCompleteScope: 1,
                        useFrames: 1,
                        runBackwards: 1,
                        startAt: 1,
                        onUpdate: 1,
                        onUpdateParams: 1,
                        onUpdateScope: 1,
                        onStart: 1,
                        onStartParams: 1,
                        onStartScope: 1,
                        onReverseComplete: 1,
                        onReverseCompleteParams: 1,
                        onReverseCompleteScope: 1,
                        onRepeat: 1,
                        onRepeatParams: 1,
                        onRepeatScope: 1,
                        easeParams: 1,
                        yoyo: 1,
                        immediateRender: 1,
                        repeat: 1,
                        repeatDelay: 1,
                        data: 1,
                        paused: 1,
                        reversed: 1,
                        autoCSS: 1,
                        lazy: 1,
                        onOverwrite: 1,
                        callbackScope: 1,
                        stringFilter: 1,
                        id: 1,
                        yoyoEase: 1
                    };
                    var _overwriteLookup = {
                        none: 0,
                        all: 1,
                        auto: 2,
                        concurrent: 3,
                        allOnStart: 4,
                        preexisting: 5,
                        true: 1,
                        false: 0
                    };
                    var _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline;
                    var _rootTimeline = Animation._rootTimeline = new SimpleTimeline;
                    /** @type {number} */
                    var _nextGCFrame = 30;
                    /** @type {function(): undefined} */
                    var _lazyRender = _internals.lazyRender = function () {
                        var tween;
                        /** @type {number} */
                        var i = _lazyTweens.length;
                        _lazyLookup = {};
                        for (; --i > -1;) {
                            if ((tween = _lazyTweens[i]) && false !== tween._lazy) {
                                tween.render(tween._lazy[0], tween._lazy[1], true);
                                /** @type {boolean} */
                                tween._lazy = false;
                            }
                        }
                        /** @type {number} */
                        _lazyTweens.length = 0;
                    };
                    _rootTimeline._startTime = _ticker.time;
                    _rootFramesTimeline._startTime = _ticker.frame;
                    /** @type {boolean} */
                    _rootTimeline._active = _rootFramesTimeline._active = true;
                    setTimeout(_lazyRender, 1);
                    /** @type {function(): undefined} */
                    Animation._updateRoot = TweenLite.render = function () {
                        var i;
                        var a;
                        var p;
                        if (_lazyTweens.length && _lazyRender(), _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false), _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false), _lazyTweens.length && _lazyRender(), _ticker.frame >= _nextGCFrame) {
                            _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                            for (p in _tweenLookup) {
                                a = _tweenLookup[p].tweens;
                                i = a.length;
                                for (; --i > -1;) {
                                    if (a[i]._gc) {
                                        a.splice(i, 1);
                                    }
                                }
                                if (0 === a.length) {
                                    delete _tweenLookup[p];
                                }
                            }
                            if ((!(p = _rootTimeline._first) || p._paused) && TweenLite.autoSleep && !_rootFramesTimeline._first && 1 === _ticker._listeners.tick.length) {
                                for (; p && p._paused;) {
                                    p = p._next;
                                }
                                if (!p) {
                                    _ticker.sleep();
                                }
                            }
                        }
                    };
                    _ticker.addEventListener("tick", Animation._updateRoot);
                    /**
                     * @param {!Object} target
                     * @param {?} tween
                     * @param {boolean} scrub
                     * @return {?}
                     */
                    var _register = function (target, tween, scrub) {
                        var a;
                        var i;
                        var id = target._gsTweenID;
                        if (_tweenLookup[id || (target._gsTweenID = id = "t" + _tweenLookupNum++)] || (_tweenLookup[id] = {
                                target: target,
                                tweens: []
                            }), tween && (a = _tweenLookup[id].tweens, a[i = a.length] = tween, scrub)) {
                            for (; --i > -1;) {
                                if (a[i] === tween) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                        return _tweenLookup[id].tweens;
                    };
                    /**
                     * @param {!Object} e
                     * @param {boolean} prop
                     * @param {!Object} target
                     * @param {string} i
                     * @return {?}
                     */
                    var _onOverwrite = function (e, prop, target, i) {
                        var result;
                        var value;
                        var func = e.vars.onOverwrite;
                        return func && (result = func(e, prop, target, i)), func = TweenLite.onOverwrite, func && (value = func(e, prop, target, i)), false !== result && false !== value;
                    };
                    /**
                     * @param {!Object} target
                     * @param {!Object} tween
                     * @param {string} props
                     * @param {number} mode
                     * @param {!Object} siblings
                     * @return {?}
                     */
                    var _applyOverwrite = function (target, tween, props, mode, siblings) {
                        var i;
                        var changed;
                        var curTween;
                        var l;
                        if (1 === mode || mode >= 4) {
                            l = siblings.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < l; i++) {
                                if ((curTween = siblings[i]) !== tween) {
                                    if (!curTween._gc) {
                                        if (curTween._kill(null, target, tween)) {
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                    }
                                } else {
                                    if (5 === mode) {
                                        break;
                                    }
                                }
                            }
                            return changed;
                        }
                        var globalStart;
                        var startTime = tween._startTime + 1e-10;
                        /** @type {!Array} */
                        var overlaps = [];
                        /** @type {number} */
                        var oCount = 0;
                        /** @type {boolean} */
                        var zeroDur = 0 === tween._duration;
                        i = siblings.length;
                        for (; --i > -1;) {
                            if (!((curTween = siblings[i]) === tween || curTween._gc || curTween._paused)) {
                                if (curTween._timeline !== tween._timeline) {
                                    globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                                    if (0 === _checkOverlap(curTween, globalStart, zeroDur)) {
                                        overlaps[oCount++] = curTween;
                                    }
                                } else {
                                    if (curTween._startTime <= startTime && curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) {
                                        if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 2e-10)) {
                                            overlaps[oCount++] = curTween;
                                        }
                                    }
                                }
                            }
                        }
                        /** @type {number} */
                        i = oCount;
                        for (; --i > -1;) {
                            if (curTween = overlaps[i], 2 === mode && curTween._kill(props, target, tween) && (changed = true), 2 !== mode || !curTween._firstPT && curTween._initted) {
                                if (2 !== mode && !_onOverwrite(curTween, tween)) {
                                    continue;
                                }
                                if (curTween._enabled(false, false)) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                            }
                        }
                        return changed;
                    };
                    /**
                     * @param {!Object} tween
                     * @param {number} reference
                     * @param {boolean} zeroDur
                     * @return {?}
                     */
                    var _checkOverlap = function (tween, reference, zeroDur) {
                        var tl = tween._timeline;
                        var ts = tl._timeScale;
                        var t = tween._startTime;
                        for (; tl._timeline;) {
                            if (t = t + tl._startTime, ts = ts * tl._timeScale, tl._paused) {
                                return -100;
                            }
                            tl = tl._timeline;
                        }
                        return t = t / ts, t > reference ? t - reference : zeroDur && t === reference || !tween._initted && t - reference < 2e-10 ? 1e-10 : (t = t + tween.totalDuration() / tween._timeScale / ts) > reference + 1e-10 ? 0 : t - reference - 1e-10;
                    };
                    /**
                     * @return {undefined}
                     */
                    p._init = function () {
                        var i;
                        var initPlugins;
                        var pt;
                        var p;
                        var startVars;
                        var l;
                        var v = this.vars;
                        var op = this._overwrittenProps;
                        var window = this._duration;
                        /** @type {boolean} */
                        var immediate = !!v.immediateRender;
                        var ease = v.ease;
                        if (v.startAt) {
                            if (this._startAt) {
                                this._startAt.render(-1, true);
                                this._startAt.kill();
                            }
                            startVars = {};
                            for (p in v.startAt) {
                                startVars[p] = v.startAt[p];
                            }
                            if (startVars.data = "isStart", startVars.overwrite = false, startVars.immediateRender = true, startVars.lazy = immediate && false !== v.lazy, startVars.startAt = startVars.delay = null, startVars.onUpdate = v.onUpdate, startVars.onUpdateParams = v.onUpdateParams, startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this, this._startAt = TweenLite.to(this.target, 0, startVars), immediate) {
                                if (this._time > 0) {
                                    /** @type {null} */
                                    this._startAt = null;
                                } else {
                                    if (0 !== window) {
                                        return;
                                    }
                                }
                            }
                        } else {
                            if (v.runBackwards && 0 !== window) {
                                if (this._startAt) {
                                    this._startAt.render(-1, true);
                                    this._startAt.kill();
                                    /** @type {null} */
                                    this._startAt = null;
                                } else {
                                    if (0 !== this._time) {
                                        /** @type {boolean} */
                                        immediate = false;
                                    }
                                    pt = {};
                                    for (p in v) {
                                        if (!(j[p] && "autoCSS" !== p)) {
                                            pt[p] = v[p];
                                        }
                                    }
                                    if (pt.overwrite = 0, pt.data = "isFromStart", pt.lazy = immediate && false !== v.lazy, pt.immediateRender = immediate, this._startAt = TweenLite.to(this.target, 0, pt), immediate) {
                                        if (0 === this._time) {
                                            return;
                                        }
                                    } else {
                                        this._startAt._init();
                                        this._startAt._enabled(false);
                                        if (this.vars.immediateRender) {
                                            /** @type {null} */
                                            this._startAt = null;
                                        }
                                    }
                                }
                            }
                        }
                        if (this._ease = ease = ease ? ease instanceof Ease ? ease : "function" == typeof ease ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase : TweenLite.defaultEase, v.easeParams instanceof Array && ease.config && (this._ease = ease.config.apply(ease, v.easeParams)), this._easeType = this._ease._type, this._easePower = this._ease._power, this._firstPT = null, this._targets) {
                            l = this._targets.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < l; i++) {
                                if (this._initProps(this._targets[i], this._propLookup[i] = {}, this._siblings[i], op ? op[i] : null, i)) {
                                    /** @type {boolean} */
                                    initPlugins = true;
                                }
                            }
                        } else {
                            initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                        }
                        if (initPlugins && TweenLite._onPluginEvent("_onInitAllProps", this), op && (this._firstPT || "function" != typeof this.target && this._enabled(false, false)), v.runBackwards) {
                            /** @type {null} */
                            pt = this._firstPT;
                            for (; pt;) {
                                pt.s += pt.c;
                                /** @type {number} */
                                pt.c = -pt.c;
                                pt = pt._next;
                            }
                        }
                        this._onUpdate = v.onUpdate;
                        /** @type {boolean} */
                        this._initted = true;
                    };
                    /**
                     * @param {!Object} target
                     * @param {(Object|string)} propLookup
                     * @param {!Object} siblings
                     * @param {string} overwrittenProps
                     * @param {number} index
                     * @return {?}
                     */
                    p._initProps = function (target, propLookup, siblings, overwrittenProps, index) {
                        var p;
                        var i;
                        var h;
                        var plugin;
                        var pt;
                        var v;
                        if (null == target) {
                            return false;
                        }
                        if (_lazyLookup[target._gsTweenID]) {
                            _lazyRender();
                        }
                        if (!this.vars.css) {
                            if (target.style && target !== window && target.nodeType && _plugins.css && false !== this.vars.autoCSS) {
                                _autoCSS(this.vars, target);
                            }
                        }
                        for (p in this.vars) {
                            if (v = this.vars[p], j[p]) {
                                if (v && (v instanceof Array || v.push && _isArray(v)) && -1 !== v.join("").indexOf("{self}")) {
                                    this.vars[p] = v = this._swapSelfInParams(v, this);
                                }
                            } else {
                                if (_plugins[p] && (plugin = new _plugins[p])._onInitTween(target, this.vars[p], this, index)) {
                                    this._firstPT = pt = {
                                        _next: this._firstPT,
                                        t: plugin,
                                        p: "setRatio",
                                        s: 0,
                                        c: 1,
                                        f: 1,
                                        n: p,
                                        pg: 1,
                                        pr: plugin._priority,
                                        m: 0
                                    };
                                    i = plugin._overwriteProps.length;
                                    for (; --i > -1;) {
                                        propLookup[plugin._overwriteProps[i]] = this._firstPT;
                                    }
                                    if (plugin._priority || plugin._onInitAllProps) {
                                        /** @type {boolean} */
                                        h = true;
                                    }
                                    if (plugin._onDisable || plugin._onEnable) {
                                        /** @type {boolean} */
                                        this._notifyPluginsOfEnabled = true;
                                    }
                                    if (pt._next) {
                                        pt._next._prev = pt;
                                    }
                                } else {
                                    propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                                }
                            }
                        }
                        return overwrittenProps && this._kill(overwrittenProps, target) ? this._initProps(target, propLookup, siblings, overwrittenProps, index) : this._overwrite > 1 && this._firstPT && siblings.length > 1 && _applyOverwrite(target, this, propLookup, this._overwrite, siblings) ? (this._kill(propLookup, target), this._initProps(target, propLookup, siblings, overwrittenProps, index)) : (this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration) && (_lazyLookup[target._gsTweenID] =
                            true), h);
                    };
                    /**
                     * @param {number} time
                     * @param {string} suppressEvents
                     * @param {boolean} force
                     * @return {?}
                     */
                    p.render = function (time, suppressEvents, force) {
                        var isComplete;
                        var callback;
                        var pt;
                        var rawPrevTime;
                        var prevTime = this._time;
                        var duration = this._duration;
                        var prevRawPrevTime = this._rawPrevTime;
                        if (time >= duration - 1e-7 && time >= 0) {
                            this._totalTime = this._time = duration;
                            this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                            if (!this._reversed) {
                                /** @type {boolean} */
                                isComplete = true;
                                /** @type {string} */
                                callback = "onComplete";
                                force = force || this._timeline.autoRemoveChildren;
                            }
                            if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                                if (this._startTime === this._timeline._duration) {
                                    /** @type {number} */
                                    time = 0;
                                }
                                if ((prevRawPrevTime < 0 || time <= 0 && time >= -1e-7 || 1e-10 === prevRawPrevTime && "isPause" !== this.data) && prevRawPrevTime !== time) {
                                    /** @type {boolean} */
                                    force = true;
                                    if (prevRawPrevTime > 1e-10) {
                                        /** @type {string} */
                                        callback = "onReverseComplete";
                                    }
                                }
                                this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10;
                            }
                        } else {
                            if (time < 1e-7) {
                                /** @type {number} */
                                this._totalTime = this._time = 0;
                                this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                                if (0 !== prevTime || 0 === duration && prevRawPrevTime > 0) {
                                    /** @type {string} */
                                    callback = "onReverseComplete";
                                    isComplete = this._reversed;
                                }
                                if (time < 0) {
                                    /** @type {boolean} */
                                    this._active = false;
                                    if (0 === duration && (this._initted || !this.vars.lazy || force)) {
                                        if (prevRawPrevTime >= 0 && (1e-10 !== prevRawPrevTime || "isPause" !== this.data)) {
                                            /** @type {boolean} */
                                            force = true;
                                        }
                                        this._rawPrevTime = rawPrevTime = !suppressEvents || time || prevRawPrevTime === time ? time : 1e-10;
                                    }
                                }
                                if (!this._initted || this._startAt && this._startAt.progress()) {
                                    /** @type {boolean} */
                                    force = true;
                                }
                            } else {
                                if (this._totalTime = this._time = time, this._easeType) {
                                    /** @type {number} */
                                    var r = time / duration;
                                    var scaleDown = this._easeType;
                                    var pow = this._easePower;
                                    if (1 === scaleDown || 3 === scaleDown && r >= .5) {
                                        /** @type {number} */
                                        r = 1 - r;
                                    }
                                    if (3 === scaleDown) {
                                        /** @type {number} */
                                        r = r * 2;
                                    }
                                    if (1 === pow) {
                                        /** @type {number} */
                                        r = r * r;
                                    } else {
                                        if (2 === pow) {
                                            /** @type {number} */
                                            r = r * (r * r);
                                        } else {
                                            if (3 === pow) {
                                                /** @type {number} */
                                                r = r * (r * r * r);
                                            } else {
                                                if (4 === pow) {
                                                    /** @type {number} */
                                                    r = r * (r * r * r * r);
                                                }
                                            }
                                        }
                                    }
                                    /** @type {number} */
                                    this.ratio = 1 === scaleDown ? 1 - r : 2 === scaleDown ? r : time / duration < .5 ? r / 2 : 1 - r / 2;
                                } else {
                                    this.ratio = this._ease.getRatio(time / duration);
                                }
                            }
                        }
                        if (this._time !== prevTime || force) {
                            if (!this._initted) {
                                if (this._init(), !this._initted || this._gc) {
                                    return;
                                }
                                if (!force && this._firstPT && (false !== this.vars.lazy && this._duration || this.vars.lazy && !this._duration)) {
                                    return this._time = this._totalTime = prevTime, this._rawPrevTime = prevRawPrevTime, _lazyTweens.push(this), void(this._lazy = [time, suppressEvents]);
                                }
                                if (this._time && !isComplete) {
                                    this.ratio = this._ease.getRatio(this._time / duration);
                                } else {
                                    if (isComplete && this._ease._calcEnd) {
                                        this.ratio = this._ease.getRatio(0 === this._time ? 0 : 1);
                                    }
                                }
                            }
                            if (false !== this._lazy) {
                                /** @type {boolean} */
                                this._lazy = false;
                            }
                            if (!this._active) {
                                if (!this._paused && this._time !== prevTime && time >= 0) {
                                    /** @type {boolean} */
                                    this._active = true;
                                }
                            }
                            if (0 === prevTime) {
                                if (this._startAt) {
                                    if (time >= 0) {
                                        this._startAt.render(time, true, force);
                                    } else {
                                        if (!callback) {
                                            /** @type {string} */
                                            callback = "_dummyGS";
                                        }
                                    }
                                }
                                if (this.vars.onStart) {
                                    if (!(0 === this._time && 0 !== duration || suppressEvents)) {
                                        this._callback("onStart");
                                    }
                                }
                            }
                            pt = this._firstPT;
                            for (; pt;) {
                                if (pt.f) {
                                    pt.t[pt.p](pt.c * this.ratio + pt.s);
                                } else {
                                    pt.t[pt.p] = pt.c * this.ratio + pt.s;
                                }
                                pt = pt._next;
                            }
                            if (this._onUpdate) {
                                if (time < 0 && this._startAt && -1e-4 !== time) {
                                    this._startAt.render(time, true, force);
                                }
                                if (!suppressEvents) {
                                    if (this._time !== prevTime || isComplete || force) {
                                        this._callback("onUpdate");
                                    }
                                }
                            }
                            if (callback) {
                                if (!(this._gc && !force)) {
                                    if (time < 0 && this._startAt && !this._onUpdate && -1e-4 !== time) {
                                        this._startAt.render(time, true, force);
                                    }
                                    if (isComplete) {
                                        if (this._timeline.autoRemoveChildren) {
                                            this._enabled(false, false);
                                        }
                                        /** @type {boolean} */
                                        this._active = false;
                                    }
                                    if (!suppressEvents && this.vars[callback]) {
                                        this._callback(callback);
                                    }
                                    if (0 === duration && 1e-10 === this._rawPrevTime && 1e-10 !== rawPrevTime) {
                                        /** @type {number} */
                                        this._rawPrevTime = 0;
                                    }
                                }
                            }
                        }
                    };
                    /**
                     * @param {string} vars
                     * @param {!Object} target
                     * @param {boolean} overwritingTween
                     * @return {?}
                     */
                    p._kill = function (vars, target, overwritingTween) {
                        if ("all" === vars && (vars = null), null == vars && (null == target || target === this.target)) {
                            return this._lazy = false, this._enabled(false, false);
                        }
                        target = "string" != typeof target ? target || this._targets || this.target : TweenLite.selector(target) || target;
                        var i;
                        var overwrittenProps;
                        var p;
                        var pt;
                        var propLookup;
                        var changed;
                        var killProps;
                        var u;
                        var killed;
                        var o = overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline;
                        if ((_isArray(target) || _isSelector(target)) && "number" != typeof target[0]) {
                            i = target.length;
                            for (; --i > -1;) {
                                if (this._kill(vars, target[i], overwritingTween)) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                            }
                        } else {
                            if (this._targets) {
                                i = this._targets.length;
                                for (; --i > -1;) {
                                    if (target === this._targets[i]) {
                                        propLookup = this._propLookup[i] || {};
                                        this._overwrittenProps = this._overwrittenProps || [];
                                        overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                        break;
                                    }
                                }
                            } else {
                                if (target !== this.target) {
                                    return false;
                                }
                                propLookup = this._propLookup;
                                overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                            }
                            if (propLookup) {
                                if (killProps = vars || propLookup, u = vars !== overwrittenProps && "all" !== overwrittenProps && vars !== propLookup && ("object" != typeof vars || !vars._tempKill), overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                                    for (p in killProps) {
                                        if (propLookup[p]) {
                                            if (!killed) {
                                                /** @type {!Array} */
                                                killed = [];
                                            }
                                            killed.push(p);
                                        }
                                    }
                                    if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) {
                                        return false;
                                    }
                                }
                                for (p in killProps) {
                                    if (pt = propLookup[p]) {
                                        if (o) {
                                            if (pt.f) {
                                                pt.t[pt.p](pt.s);
                                            } else {
                                                pt.t[pt.p] = pt.s;
                                            }
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                        if (pt.pg && pt.t._kill(killProps)) {
                                            /** @type {boolean} */
                                            changed = true;
                                        }
                                        if (!(pt.pg && 0 !== pt.t._overwriteProps.length)) {
                                            if (pt._prev) {
                                                pt._prev._next = pt._next;
                                            } else {
                                                if (pt === this._firstPT) {
                                                    this._firstPT = pt._next;
                                                }
                                            }
                                            if (pt._next) {
                                                pt._next._prev = pt._prev;
                                            }
                                            /** @type {null} */
                                            pt._next = pt._prev = null;
                                        }
                                        delete propLookup[p];
                                    }
                                    if (u) {
                                        /** @type {number} */
                                        overwrittenProps[p] = 1;
                                    }
                                }
                                if (!this._firstPT && this._initted) {
                                    this._enabled(false, false);
                                }
                            }
                        }
                        return changed;
                    };
                    /**
                     * @return {?}
                     */
                    p.invalidate = function () {
                        return this._notifyPluginsOfEnabled && TweenLite._onPluginEvent("_onDisable", this), this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null, this._notifyPluginsOfEnabled = this._active = this._lazy = false, this._propLookup = this._targets ? {} : [], Animation.prototype.invalidate.call(this), this.vars.immediateRender && (this._time = -1e-10, this.render(Math.min(0, -this._delay))), this;
                    };
                    /**
                     * @param {string} enabled
                     * @param {boolean} node
                     * @return {?}
                     */
                    p._enabled = function (enabled, node) {
                        if (cvalue || _ticker.wake(), enabled && this._gc) {
                            var i;
                            var targets = this._targets;
                            if (targets) {
                                i = targets.length;
                                for (; --i > -1;) {
                                    this._siblings[i] = _register(targets[i], this, true);
                                }
                            } else {
                                this._siblings = _register(this.target, this, true);
                            }
                        }
                        return Animation.prototype._enabled.call(this, enabled, node), !(!this._notifyPluginsOfEnabled || !this._firstPT) && TweenLite._onPluginEvent(enabled ? "_onEnable" : "_onDisable", this);
                    };
                    /**
                     * @param {!Object} target
                     * @param {number} duration
                     * @param {!Object} vars
                     * @return {?}
                     */
                    TweenLite.to = function (target, duration, vars) {
                        return new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {number} duration
                     * @param {!Object} vars
                     * @return {?}
                     */
                    TweenLite.from = function (target, duration, vars) {
                        return vars.runBackwards = true, vars.immediateRender = 0 != vars.immediateRender, new TweenLite(target, duration, vars);
                    };
                    /**
                     * @param {!Array} target
                     * @param {number} duration
                     * @param {number} time
                     * @param {!Object} v
                     * @return {?}
                     */
                    TweenLite.fromTo = function (target, duration, time, v) {
                        return v.startAt = time, v.immediateRender = 0 != v.immediateRender && 0 != time.immediateRender, new TweenLite(target, duration, v);
                    };
                    /**
                     * @param {number} delay
                     * @param {string} callback
                     * @param {!Object} params
                     * @param {string} scope
                     * @param {?} useFrames
                     * @return {?}
                     */
                    TweenLite.delayedCall = function (delay, callback, params, scope, useFrames) {
                        return new TweenLite(callback, 0, {
                            delay: delay,
                            onComplete: callback,
                            onCompleteParams: params,
                            callbackScope: scope,
                            onReverseComplete: callback,
                            onReverseCompleteParams: params,
                            immediateRender: false,
                            lazy: false,
                            useFrames: useFrames,
                            overwrite: 0
                        });
                    };
                    /**
                     * @param {!Object} type
                     * @param {string} name
                     * @return {?}
                     */
                    TweenLite.set = function (type, name) {
                        return new TweenLite(type, 0, name);
                    };
                    /**
                     * @param {!Object} target
                     * @param {boolean} onlyActive
                     * @return {?}
                     */
                    TweenLite.getTweensOf = function (target, onlyActive) {
                        if (null == target) {
                            return [];
                        }
                        target = "string" != typeof target ? target : TweenLite.selector(target) || target;
                        var i;
                        var a;
                        var j;
                        var t;
                        if ((_isArray(target) || _isSelector(target)) && "number" != typeof target[0]) {
                            i = target.length;
                            /** @type {!Array} */
                            a = [];
                            for (; --i > -1;) {
                                /** @type {!Array<?>} */
                                a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                            }
                            /** @type {number} */
                            i = a.length;
                            for (; --i > -1;) {
                                t = a[i];
                                /** @type {number} */
                                j = i;
                                for (; --j > -1;) {
                                    if (t === a[j]) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        } else {
                            if (target._gsTweenID) {
                                a = _register(target).concat();
                                i = a.length;
                                for (; --i > -1;) {
                                    if (a[i]._gc || onlyActive && !a[i].isActive()) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                        }
                        return a || [];
                    };
                    /** @type {function(!Object, ?, string): undefined} */
                    TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function (target, onlyActive, vars) {
                        if ("object" == typeof onlyActive) {
                            vars = onlyActive;
                            /** @type {boolean} */
                            onlyActive = false;
                        }
                        var a = TweenLite.getTweensOf(target, onlyActive);
                        var i = a.length;
                        for (; --i > -1;) {
                            a[i]._kill(vars, target);
                        }
                    };
                    var TweenPlugin = _class("plugins.TweenPlugin", function (indicesCat, priority) {
                        this._overwriteProps = (indicesCat || "").split(",");
                        this._propName = this._overwriteProps[0];
                        this._priority = priority || 0;
                        this._super = TweenPlugin.prototype;
                    }, true);
                    if (p = TweenPlugin.prototype, TweenPlugin.version = "1.19.0", TweenPlugin.API = 2, p._firstPT = null, p._addTween = _addPropTween, p.setRatio = _setRatio, p._kill = function (lookup) {
                            var i;
                            var a = this._overwriteProps;
                            var pt = this._firstPT;
                            if (null != lookup[this._propName]) {
                                /** @type {!Array} */
                                this._overwriteProps = [];
                            } else {
                                i = a.length;
                                for (; --i > -1;) {
                                    if (null != lookup[a[i]]) {
                                        a.splice(i, 1);
                                    }
                                }
                            }
                            for (; pt;) {
                                if (null != lookup[pt.n]) {
                                    if (pt._next) {
                                        pt._next._prev = pt._prev;
                                    }
                                    if (pt._prev) {
                                        pt._prev._next = pt._next;
                                        /** @type {null} */
                                        pt._prev = null;
                                    } else {
                                        if (this._firstPT === pt) {
                                            this._firstPT = pt._next;
                                        }
                                    }
                                }
                                pt = pt._next;
                            }
                            return false;
                        }, p._mod = p._roundProps = function (lookup) {
                            var val;
                            var pt = this._firstPT;
                            for (; pt;) {
                                val = lookup[this._propName] || null != pt.n && lookup[pt.n.split(this._propName + "_").join("")];
                                if (val && "function" == typeof val) {
                                    if (2 === pt.f) {
                                        /** @type {!Function} */
                                        pt.t._applyPT.m = val;
                                    } else {
                                        /** @type {!Function} */
                                        pt.m = val;
                                    }
                                }
                                pt = pt._next;
                            }
                        }, TweenLite._onPluginEvent = function (type, tween) {
                            var changed;
                            var pt2;
                            var first;
                            var last;
                            var next;
                            var pt = tween._firstPT;
                            if ("_onInitAllProps" === type) {
                                for (; pt;) {
                                    next = pt._next;
                                    pt2 = first;
                                    for (; pt2 && pt2.pr > pt.pr;) {
                                        pt2 = pt2._next;
                                    }
                                    if (pt._prev = pt2 ? pt2._prev : last) {
                                        pt._prev._next = pt;
                                    } else {
                                        first = pt;
                                    }
                                    if (pt._next = pt2) {
                                        pt2._prev = pt;
                                    } else {
                                        last = pt;
                                    }
                                    pt = next;
                                }
                                pt = tween._firstPT = first;
                            }
                            for (; pt;) {
                                if (pt.pg && "function" == typeof pt.t[type] && pt.t[type]()) {
                                    /** @type {boolean} */
                                    changed = true;
                                }
                                pt = pt._next;
                            }
                            return changed;
                        }, TweenPlugin.activate = function (plugins) {
                            var i = plugins.length;
                            for (; --i > -1;) {
                                if (plugins[i].API === TweenPlugin.API) {
                                    _plugins[(new plugins[i])._propName] = plugins[i];
                                }
                            }
                            return true;
                        }, _gsDefine.plugin = function (options) {
                            if (!(options && options.propName && options.init && options.API)) {
                                throw "illegal plugin definition.";
                            }
                            var i;
                            var propName = options.propName;
                            var priority = options.priority || 0;
                            var overwriteProps = options.overwriteProps;
                            var map = {
                                init: "_onInitTween",
                                set: "setRatio",
                                kill: "_kill",
                                round: "_mod",
                                mod: "_mod",
                                initAll: "_onInitAllProps"
                            };
                            var Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin", function () {
                                TweenPlugin.call(this, propName, priority);
                                this._overwriteProps = overwriteProps || [];
                            }, true === options.global);
                            var p = Plugin.prototype = new TweenPlugin(propName);
                            p.constructor = Plugin;
                            Plugin.API = options.API;
                            for (i in map) {
                                if ("function" == typeof options[i]) {
                                    p[map[i]] = options[i];
                                }
                            }
                            return Plugin.version = options.version, TweenPlugin.activate([Plugin]), Plugin;
                        }, a = window._gsQueue) {
                        /** @type {number} */
                        i = 0;
                        for (; i < a.length; i++) {
                            a[i]();
                        }
                        for (p in _defLookup) {
                            if (!_defLookup[p].func) {
                                window.console.log("GSAP encountered missing dependency: " + p);
                            }
                        }
                    }
                    /** @type {boolean} */
                    cvalue = false;
                }
            }(void 0 !== i && i.exports && void 0 !== boardManager ? boardManager : this || window);
        }).call(items, moment(4));
    },
    function (module, canCreateDiscussions, factory) {
        module.exports = factory(11);
    },
    function (canCreateDiscussions, e, $) {
        (function (winstonInstance) {
            /**
             * @param {!AudioNode} g
             * @param {!Function} f
             * @return {undefined}
             */
            function e(g, f) {
                if (!(g instanceof f)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            var i = function () {
                /**
                 * @param {!Function} d
                 * @param {string} props
                 * @return {undefined}
                 */
                function t(d, props) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        /** @type {boolean} */
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            /** @type {boolean} */
                            descriptor.writable = true;
                        }
                        Object.defineProperty(d, descriptor.key, descriptor);
                    }
                }

                return function (p, n, a) {
                    return n && t(p.prototype, n), a && t(p, a), p;
                };
            }();
            $(12);
            $(13);
            $(14);
            var button2 = $(16);
            var button = function (obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }(button2);
            /** @type {boolean} */
            winstonInstance.debug = false;
            new (function () {
                /**
                 * @return {undefined}
                 */
                function t() {
                    e(this, t);
                    Promise.all([t.domReady()]).then(t.init);
                }

                return i(t, null, [{
                    key: "domReady",
                    value: function () {
                        return new Promise(function (saveProxy) {
                            document.addEventListener("DOMContentLoaded", saveProxy);
                        });
                    }
                }, {
                    key: "init",
                    value: function () {
                        new button.default;
                        t.show();
                    }
                }, {
                    key: "show",
                    value: function () {
                        document.documentElement.classList.add("ready");
                    }
                }]), t;
            }());
        }).call(e, $(4));
    },
    function (canCreateDiscussions, isSlidingUp, i) {
        /** @type {function(!Array): ?} */
        var fn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (object) {
            return typeof object;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        !function (window, document, undefined) {
            /**
             * @param {!Array} obj
             * @param {string} type
             * @return {?}
             */
            function is(obj, type) {
                return (void 0 === obj ? "undefined" : fn(obj)) === type;
            }

            /**
             * @param {!Array} classes
             * @return {undefined}
             */
            function setClasses(classes) {
                var className = docElement.className;
                var classPrefix = Modernizr._config.classPrefix || "";
                if (isSVG && (className = className.baseVal), Modernizr._config.enableJSClass) {
                    /** @type {!RegExp} */
                    var reJS = new RegExp("(^|\\s)" + classPrefix + "no-js(\\s|$)");
                    className = className.replace(reJS, "$1" + classPrefix + "js$2");
                }
                if (Modernizr._config.enableClasses) {
                    className = className + (" " + classPrefix + classes.join(" " + classPrefix));
                    if (isSVG) {
                        docElement.className.baseVal = className;
                    } else {
                        docElement.className = className;
                    }
                }
            }

            /**
             * @return {?}
             */
            function createElement() {
                return "function" != typeof document.createElement ? document.createElement(arguments[0]) : isSVG ? document.createElementNS.call(document, "http://www.w3.org/2000/svg", arguments[0]) : document.createElement.apply(document, arguments);
            }

            /**
             * @return {?}
             */
            function getBody() {
                /** @type {!HTMLBodyElement} */
                var body = document.body;
                return body || (body = createElement(isSVG ? "svg" : "body"), body.fake = true), body;
            }

            /**
             * @param {string} rule
             * @param {!Function} callback
             * @param {number} nodes
             * @param {string} testnames
             * @return {?}
             */
            function injectElementWithStyles(rule, callback, nodes, testnames) {
                var style;
                var ret;
                var node;
                var docOverflow;
                /** @type {string} */
                var mod = "modernizr";
                var div = createElement("div");
                var body = getBody();
                if (parseInt(nodes, 10)) {
                    for (; nodes--;) {
                        node = createElement("div");
                        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
                        div.appendChild(node);
                    }
                }
                return style = createElement("style"), style.type = "text/css", style.id = "s" + mod, (body.fake ? body : div).appendChild(style), body.appendChild(div), style.styleSheet ? style.styleSheet.cssText = rule : style.appendChild(document.createTextNode(rule)), div.id = mod, body.fake && (body.style.background = "", body.style.overflow = "hidden", docOverflow = docElement.style.overflow, docElement.style.overflow = "hidden", docElement.appendChild(body)), ret = callback(div, rule), body.fake ? (body.parentNode.removeChild(body),
                    docElement.style.overflow = docOverflow, docElement.offsetHeight) : div.parentNode.removeChild(div), !!ret;
            }

            /**
             * @param {string} value
             * @param {string} key
             * @return {?}
             */
            function contains(value, key) {
                return !!~("" + value).indexOf(key);
            }

            /**
             * @param {string} name
             * @return {?}
             */
            function cssToDOM(name) {
                return name.replace(/([a-z])-([a-z])/g, function (canCreateDiscussions, isSlidingUp, shortMonthName) {
                    return isSlidingUp + shortMonthName.toUpperCase();
                }).replace(/^-/, "");
            }

            /**
             * @param {!Function} that
             * @param {?} fn
             * @return {?}
             */
            function fnBind(that, fn) {
                return function () {
                    return that.apply(fn, arguments);
                };
            }

            /**
             * @param {!Object} props
             * @param {!Object} obj
             * @param {!Object} elem
             * @return {?}
             */
            function testDOMProps(props, obj, elem) {
                var name;
                var i;
                for (i in props) {
                    if (props[i] in obj) {
                        return false === elem ? props[i] : (name = obj[props[i]], is(name, "function") ? fnBind(name, elem || obj) : name);
                    }
                }
                return false;
            }

            /**
             * @param {string} name
             * @return {?}
             */
            function domToCSS(name) {
                return name.replace(/([A-Z])/g, function (canCreateDiscussions, p_Interval) {
                    return "-" + p_Interval.toLowerCase();
                }).replace(/^ms-/, "-ms-");
            }

            /**
             * @param {!Object} elem
             * @param {string} pseudo
             * @param {string} property
             * @return {?}
             */
            function computedStyle(elem, pseudo, property) {
                var result;
                if ("getComputedStyle" in window) {
                    /** @type {(CSSStyleDeclaration|null)} */
                    result = getComputedStyle.call(window, elem, pseudo);
                    /** @type {!Console} */
                    var console = window.console;
                    if (null !== result) {
                        if (property) {
                            /** @type {string} */
                            result = result.getPropertyValue(property);
                        }
                    } else {
                        if (console) {
                            /** @type {string} */
                            var method = console.error ? "error" : "log";
                            console[method].call(console, "getComputedStyle returning null, its possible modernizr test results are inaccurate");
                        }
                    }
                } else {
                    result = !pseudo && elem.currentStyle && elem.currentStyle[property];
                }
                return result;
            }

            /**
             * @param {!Object} props
             * @param {!Object} value
             * @return {?}
             */
            function nativeTestProps(props, value) {
                var i = props.length;
                if ("CSS" in window && "supports" in window.CSS) {
                    for (; i--;) {
                        if (window.CSS.supports(domToCSS(props[i]), value)) {
                            return true;
                        }
                    }
                    return false;
                }
                if ("CSSSupportsRule" in window) {
                    /** @type {!Array} */
                    var drilldownLevelLabels = [];
                    for (; i--;) {
                        drilldownLevelLabels.push("(" + domToCSS(props[i]) + ":" + value + ")");
                    }
                    return drilldownLevelLabels = drilldownLevelLabels.join(" or "), injectElementWithStyles("@supports (" + drilldownLevelLabels + ") { #modernizr { position: absolute; } }", function (elem) {
                        return "absolute" == computedStyle(elem, null, "position");
                    });
                }
                return undefined;
            }

            /**
             * @param {!Object} props
             * @param {string} prefixed
             * @param {!Object} value
             * @param {!Array} skipValueTest
             * @return {?}
             */
            function testProps(props, prefixed, value, skipValueTest) {
                /**
                 * @return {undefined}
                 */
                function cleanElems() {
                    if (l) {
                        delete mStyle.style;
                        delete mStyle.modElem;
                    }
                }

                if (skipValueTest = !is(skipValueTest, "undefined") && skipValueTest, !is(value, "undefined")) {
                    var result = nativeTestProps(props, value);
                    if (!is(result, "undefined")) {
                        return result;
                    }
                }
                var l;
                var _l;
                var _len3;
                var prop;
                var before;
                /** @type {!Array} */
                var elems = ["modernizr", "tspan", "samp"];
                for (; !mStyle.style && elems.length;) {
                    /** @type {boolean} */
                    l = true;
                    mStyle.modElem = createElement(elems.shift());
                    mStyle.style = mStyle.modElem.style;
                }
                _len3 = props.length;
                /** @type {number} */
                _l = 0;
                for (; _l < _len3; _l++) {
                    if (prop = props[_l], before = mStyle.style[prop], contains(prop, "-") && (prop = cssToDOM(prop)), mStyle.style[prop] !== undefined) {
                        if (skipValueTest || is(value, "undefined")) {
                            return cleanElems(), "pfx" != prefixed || prop;
                        }
                        try {
                            /** @type {!Object} */
                            mStyle.style[prop] = value;
                        } catch (t) {
                        }
                        if (mStyle.style[prop] != before) {
                            return cleanElems(), "pfx" != prefixed || prop;
                        }
                    }
                }
                return cleanElems(), false;
            }

            /**
             * @param {string} prop
             * @param {!Object} prefixed
             * @param {!Object} elem
             * @param {!Object} value
             * @param {!Array} skipValueTest
             * @return {?}
             */
            function testPropsAll(prop, prefixed, elem, value, skipValueTest) {
                var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1);
                /** @type {!Array<string>} */
                var props = (prop + " " + cssomPrefixes.join(ucProp + " ") + ucProp).split(" ");
                return is(prefixed, "string") || is(prefixed, "undefined") ? testProps(props, prefixed, value, skipValueTest) : (props = (prop + " " + domPrefixes.join(ucProp + " ") + ucProp).split(" "), testDOMProps(props, prefixed, elem));
            }

            /**
             * @param {string} prop
             * @param {!Object} value
             * @param {!Array} skipValueTest
             * @return {?}
             */
            function testAllProps(prop, value, skipValueTest) {
                return testPropsAll(prop, undefined, undefined, value, skipValueTest);
            }

            /**
             * @param {?} feature
             * @param {string} callback
             * @return {?}
             */
            function addTest(feature, callback) {
                if ("object" == (void 0 === feature ? "undefined" : fn(feature))) {
                    var key;
                    for (key in feature) {
                        if (hasOwnProperty(feature, key)) {
                            addTest(key, feature[key]);
                        }
                    }
                } else {
                    feature = feature.toLowerCase();
                    var featureNameSplit = feature.split(".");
                    var last = Modernizr[featureNameSplit[0]];
                    if (2 == featureNameSplit.length && (last = last[featureNameSplit[1]]), void 0 !== last) {
                        return Modernizr;
                    }
                    callback = "function" == typeof callback ? callback() : callback;
                    if (1 == featureNameSplit.length) {
                        /** @type {string} */
                        Modernizr[featureNameSplit[0]] = callback;
                    } else {
                        if (!(!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] instanceof Boolean)) {
                            /** @type {!Boolean} */
                            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
                        }
                        /** @type {string} */
                        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = callback;
                    }
                    setClasses([(callback && 0 != callback ? "" : "no-") + featureNameSplit.join("-")]);
                    Modernizr._trigger(feature, callback);
                }
                return Modernizr;
            }

            /** @type {!Array} */
            var classes = [];
            /** @type {!Array} */
            var tests = [];
            var ModernizrProto = {
                _version: "3.5.0",
                _config: {
                    classPrefix: "",
                    enableClasses: true,
                    enableJSClass: true,
                    usePrefixes: true
                },
                _q: [],
                on: function (name, callback) {
                    var model_data_store = this;
                    setTimeout(function () {
                        callback(model_data_store[name]);
                    }, 0);
                },
                addTest: function (feature, test, options) {
                    tests.push({
                        name: feature,
                        fn: test,
                        options: options
                    });
                },
                addAsyncTest: function (fn) {
                    tests.push({
                        name: null,
                        fn: fn
                    });
                }
            };
            /**
             * @return {undefined}
             */
            var Modernizr = function () {
            };
            Modernizr.prototype = ModernizrProto;
            Modernizr = new Modernizr;
            Modernizr.addTest("cookies", function () {
                try {
                    /** @type {string} */
                    document.cookie = "cookietest=1";
                    /** @type {boolean} */
                    var t = -1 != document.cookie.indexOf("cookietest=");
                    return document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT", t;
                } catch (t) {
                    return false;
                }
            });
            Modernizr.addTest("webaudio", function () {
                /** @type {boolean} */
                var prefixed = "webkitAudioContext" in window;
                /** @type {boolean} */
                var unprefixed = "AudioContext" in window;
                return Modernizr._config.usePrefixes ? prefixed || unprefixed : unprefixed;
            });
            /** @type {!Element} */
            var docElement = document.documentElement;
            /** @type {boolean} */
            var isSVG = "svg" === docElement.nodeName.toLowerCase();
            /** @type {!Array} */
            var prefixes = ModernizrProto._config.usePrefixes ? " -webkit- -moz- -o- -ms- ".split(" ") : ["", ""];
            /** @type {!Array} */
            ModernizrProto._prefixes = prefixes;
            /** @type {function(string, !Function, number, string): ?} */
            var testStyles = ModernizrProto.testStyles = injectElementWithStyles;
            Modernizr.addTest("touchevents", function () {
                var i;
                if ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch) {
                    /** @type {boolean} */
                    i = true;
                } else {
                    /** @type {string} */
                    var query = ["@media (", prefixes.join("touch-enabled),("), "heartz", ")", "{#modernizr{top:9px;position:absolute}}"].join("");
                    testStyles(query, function (rootDOM) {
                        /** @type {boolean} */
                        i = 9 === rootDOM.offsetTop;
                    });
                }
                return i;
            });
            /** @type {string} */
            var excludeLink = "Moz O ms Webkit";
            /** @type {!Array} */
            var cssomPrefixes = ModernizrProto._config.usePrefixes ? excludeLink.split(" ") : [];
            /** @type {!Array} */
            ModernizrProto._cssomPrefixes = cssomPrefixes;
            /** @type {!Array} */
            var domPrefixes = ModernizrProto._config.usePrefixes ? excludeLink.toLowerCase().split(" ") : [];
            /** @type {!Array} */
            ModernizrProto._domPrefixes = domPrefixes;
            var modElem = {
                elem: createElement("modernizr")
            };
            Modernizr._q.push(function () {
                delete modElem.elem;
            });
            var mStyle = {
                style: modElem.elem.style
            };
            Modernizr._q.unshift(function () {
                delete mStyle.style;
            });
            /** @type {function(string, !Object, !Object, !Object, !Array): ?} */
            ModernizrProto.testAllProps = testPropsAll;
            /** @type {function(string, !Object, !Array): ?} */
            ModernizrProto.testAllProps = testAllProps;
            Modernizr.addTest("backgroundcliptext", function () {
                return testAllProps("backgroundClip", "text");
            });
            var hasOwnProperty;
            !function () {
                /** @type {function(this:Object, *): boolean} */
                var b = {}.hasOwnProperty;
                /** @type {function(?, string): ?} */
                hasOwnProperty = is(b, "undefined") || is(b.call, "undefined") ? function (object, property) {
                    return property in object && is(object.constructor.prototype[property], "undefined");
                } : function (num, identifier) {
                    return b.call(num, identifier);
                };
            }();
            ModernizrProto._l = {};
            /**
             * @param {string} feature
             * @param {!Array} value
             * @return {undefined}
             */
            ModernizrProto.on = function (feature, value) {
                if (!this._l[feature]) {
                    /** @type {!Array} */
                    this._l[feature] = [];
                }
                this._l[feature].push(value);
                if (Modernizr.hasOwnProperty(feature)) {
                    setTimeout(function () {
                        Modernizr._trigger(feature, Modernizr[feature]);
                    }, 0);
                }
            };
            /**
             * @param {!Object} feature
             * @param {string} data
             * @return {undefined}
             */
            ModernizrProto._trigger = function (feature, data) {
                if (this._l[feature]) {
                    var cbs = this._l[feature];
                    setTimeout(function () {
                        var i;
                        /** @type {number} */
                        i = 0;
                        for (; i < cbs.length; i++) {
                            (0, cbs[i])(data);
                        }
                    }, 0);
                    delete this._l[feature];
                }
            };
            Modernizr._q.push(function () {
                /** @type {function(?, string): ?} */
                ModernizrProto.addTest = addTest;
            });
            (function () {
                var ThetaGrad;
                var feature;
                var aliasIdx;
                var result;
                var i;
                var subwiki;
                var featureNameSplit;
                var featureIdx;
                for (featureIdx in tests) {
                    if (tests.hasOwnProperty(featureIdx)) {
                        if (ThetaGrad = [], feature = tests[featureIdx], feature.name && (ThetaGrad.push(feature.name.toLowerCase()), feature.options && feature.options.aliases && feature.options.aliases.length)) {
                            /** @type {number} */
                            aliasIdx = 0;
                            for (; aliasIdx < feature.options.aliases.length; aliasIdx++) {
                                ThetaGrad.push(feature.options.aliases[aliasIdx].toLowerCase());
                            }
                        }
                        result = is(feature.fn, "function") ? feature.fn() : feature.fn;
                        /** @type {number} */
                        i = 0;
                        for (; i < ThetaGrad.length; i++) {
                            subwiki = ThetaGrad[i];
                            featureNameSplit = subwiki.split(".");
                            if (1 === featureNameSplit.length) {
                                Modernizr[featureNameSplit[0]] = result;
                            } else {
                                if (!(!Modernizr[featureNameSplit[0]] || Modernizr[featureNameSplit[0]] instanceof Boolean)) {
                                    /** @type {!Boolean} */
                                    Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);
                                }
                                Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;
                            }
                            classes.push((result ? "" : "no-") + featureNameSplit.join("-"));
                        }
                    }
                }
            })();
            setClasses(classes);
            delete ModernizrProto.addTest;
            delete ModernizrProto.addAsyncTest;
            /** @type {number} */
            var i = 0;
            for (; i < Modernizr._q.length; i++) {
                Modernizr._q[i]();
            }
            window.Modernizr = Modernizr;
        }(window, document);
    },
    function (canCreateDiscussions, isSlidingUp, i) {
        window.Detectizr = function (window, navigator, doc, undefined) {
            /**
             * @param {!Array} o
             * @param {(Object|string)} o2
             * @return {?}
             */
            function extend(o, o2) {
                var i;
                var argumentCount;
                var j;
                if (arguments.length > 2) {
                    /** @type {number} */
                    i = 1;
                    /** @type {number} */
                    argumentCount = arguments.length;
                    for (; i < argumentCount; i = i + 1) {
                        extend(o, arguments[i]);
                    }
                } else {
                    for (j in o2) {
                        if (o2.hasOwnProperty(j)) {
                            o[j] = o2[j];
                        }
                    }
                }
                return o;
            }

            /**
             * @param {string} key
             * @return {?}
             */
            function is(key) {
                return Detectizr.browser.userAgent.indexOf(key) > -1;
            }

            /**
             * @param {!RegExp} regex
             * @return {?}
             */
            function test(regex) {
                return regex.test(Detectizr.browser.userAgent);
            }

            /**
             * @param {!RegExp} regex
             * @return {?}
             */
            function exec(regex) {
                return regex.exec(Detectizr.browser.userAgent);
            }

            /**
             * @param {!Object} string
             * @return {?}
             */
            function trim(string) {
                return string.replace(/^\s+|\s+$/g, "");
            }

            /**
             * @param {!Object} value
             * @return {?}
             */
            function toCamel(value) {
                return null === value || value === undefined ? "" : String(value).replace(/((\s|\-|\.)+[a-z0-9])/g, function (shortMonthName) {
                    return shortMonthName.toUpperCase().replace(/(\s|\-|\.)/g, "");
                });
            }

            /**
             * @param {!Object} elem
             * @param {string} value
             * @return {undefined}
             */
            function removeClass(elem, value) {
                var initVal = value || "";
                /** @type {(boolean|string)} */
                var html = 1 === elem.nodeType && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                if (html) {
                    for (; html.indexOf(" " + initVal + " ") >= 0;) {
                        /** @type {string} */
                        html = html.replace(" " + initVal + " ", " ");
                    }
                    elem.className = value ? trim(html) : "";
                }
            }

            /**
             * @param {!Object} version
             * @param {!Object} major
             * @param {string} minor
             * @return {undefined}
             */
            function addVersionTest(version, major, minor) {
                if (version) {
                    version = toCamel(version);
                    if (major) {
                        major = toCamel(major);
                        addConditionalTest(version + major, true);
                        if (minor) {
                            addConditionalTest(version + major + "_" + minor, true);
                        }
                    }
                }
            }

            /**
             * @param {!Object} feature
             * @param {boolean} test
             * @return {undefined}
             */
            function addConditionalTest(feature, test) {
                if (feature && Modernizr) {
                    if (options.addAllFeaturesAsClass) {
                        Modernizr.addTest(feature, test);
                    } else {
                        test = "function" == typeof test ? test() : test;
                        if (test) {
                            Modernizr.addTest(feature, true);
                        } else {
                            delete Modernizr[feature];
                            removeClass(docElem, feature);
                        }
                    }
                }
            }

            /**
             * @param {!Object} versionType
             * @param {string} versionFull
             * @return {undefined}
             */
            function setVersion(versionType, versionFull) {
                /** @type {string} */
                versionType.version = versionFull;
                var i = versionFull.split(".");
                if (i.length > 0) {
                    i = i.reverse();
                    versionType.major = i.pop();
                    if (i.length > 0) {
                        versionType.minor = i.pop();
                        if (i.length > 0) {
                            i = i.reverse();
                            versionType.patch = i.join(".");
                        } else {
                            /** @type {string} */
                            versionType.patch = "0";
                        }
                    } else {
                        /** @type {string} */
                        versionType.minor = "0";
                    }
                } else {
                    /** @type {string} */
                    versionType.major = "0";
                }
            }

            /**
             * @return {undefined}
             */
            function checkOrientation() {
                window.clearTimeout(showAboveTimeout);
                showAboveTimeout = window.setTimeout(function () {
                    oldOrientation = Detectizr.device.orientation;
                    if (window.innerHeight > window.innerWidth) {
                        /** @type {string} */
                        Detectizr.device.orientation = "portrait";
                    } else {
                        /** @type {string} */
                        Detectizr.device.orientation = "landscape";
                    }
                    addConditionalTest(Detectizr.device.orientation, true);
                    if (oldOrientation !== Detectizr.device.orientation) {
                        addConditionalTest(oldOrientation, false);
                    }
                }, 10);
            }

            /**
             * @param {!Object} substrs
             * @return {?}
             */
            function detectPlugin(substrs) {
                var plugin;
                var haystack;
                var found;
                var i;
                var k;
                /** @type {!PluginArray} */
                var plugins = navigator.plugins;
                /** @type {number} */
                i = plugins.length - 1;
                for (; i >= 0; i--) {
                    /** @type {!Plugin} */
                    plugin = plugins[i];
                    /** @type {string} */
                    haystack = plugin.name + plugin.description;
                    /** @type {number} */
                    found = 0;
                    k = substrs.length;
                    for (; k >= 0; k--) {
                        if (-1 !== haystack.indexOf(substrs[k])) {
                            /** @type {number} */
                            found = found + 1;
                        }
                    }
                    if (found === substrs.length) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * @param {!Array} progIds
             * @return {?}
             */
            function detectObject(progIds) {
                var i;
                /** @type {number} */
                i = progIds.length - 1;
                for (; i >= 0; i--) {
                    try {
                        new ActiveXObject(progIds[i]);
                    } catch (t) {
                    }
                }
                return false;
            }

            /**
             * @param {number} query
             * @return {undefined}
             */
            function detect(query) {
                var i;
                var j;
                var device;
                var os;
                var browser;
                var plugin2detect;
                var pluginFound;
                if (options = extend({}, options, query || {}), options.detectDevice) {
                    Detectizr.device = {
                        type: "",
                        model: "",
                        orientation: ""
                    };
                    device = Detectizr.device;
                    if (test(/googletv|smarttv|smart-tv|internet.tv|netcast|nettv|appletv|boxee|kylo|roku|dlnadoc|roku|pov_tv|hbbtv|ce\-html/)) {
                        device.type = deviceTypes[0];
                        /** @type {string} */
                        device.model = "smartTv";
                    } else {
                        if (test(/xbox|playstation.3|wii/)) {
                            device.type = deviceTypes[0];
                            /** @type {string} */
                            device.model = "gameConsole";
                        } else {
                            if (test(/ip(a|ro)d/)) {
                                device.type = deviceTypes[1];
                                /** @type {string} */
                                device.model = "ipad";
                            } else {
                                if (test(/tablet/) && !test(/rx-34/) || test(/folio/)) {
                                    device.type = deviceTypes[1];
                                    /** @type {string} */
                                    device.model = String(exec(/playbook/) || "");
                                } else {
                                    if (test(/linux/) && test(/android/) && !test(/fennec|mobi|htc.magic|htcX06ht|nexus.one|sc-02b|fone.945/)) {
                                        device.type = deviceTypes[1];
                                        /** @type {string} */
                                        device.model = "android";
                                    } else {
                                        if (test(/kindle/) || test(/mac.os/) && test(/silk/)) {
                                            device.type = deviceTypes[1];
                                            /** @type {string} */
                                            device.model = "kindle";
                                        } else {
                                            if (test(/gt-p10|sc-01c|shw-m180s|sgh-t849|sch-i800|shw-m180l|sph-p100|sgh-i987|zt180|htc(.flyer|_flyer)|sprint.atp51|viewpad7|pandigital(sprnova|nova)|ideos.s7|dell.streak.7|advent.vega|a101it|a70bht|mid7015|next2|nook/) || test(/mb511/) && test(/rutem/)) {
                                                device.type = deviceTypes[1];
                                                /** @type {string} */
                                                device.model = "android";
                                            } else {
                                                if (test(/bb10/)) {
                                                    device.type = deviceTypes[1];
                                                    /** @type {string} */
                                                    device.model = "blackberry";
                                                } else {
                                                    device.model = exec(/iphone|ipod|android|blackberry|opera mini|opera mobi|skyfire|maemo|windows phone|palm|iemobile|symbian|symbianos|fennec|j2me/);
                                                    if (null !== device.model) {
                                                        device.type = deviceTypes[2];
                                                        /** @type {string} */
                                                        device.model = String(device.model);
                                                    } else {
                                                        /** @type {string} */
                                                        device.model = "";
                                                        if (test(/bolt|fennec|iris|maemo|minimo|mobi|mowser|netfront|novarra|prism|rx-34|skyfire|tear|xv6875|xv6975|google.wireless.transcoder/)) {
                                                            device.type = deviceTypes[2];
                                                        } else {
                                                            if (test(/opera/) && test(/windows.nt.5/) && test(/htc|xda|mini|vario|samsung\-gt\-i8000|samsung\-sgh\-i9/)) {
                                                                device.type = deviceTypes[2];
                                                            } else {
                                                                if (test(/windows.(nt|xp|me|9)/) && !test(/phone/) || test(/win(9|.9|nt)/) || test(/\(windows 8\)/)) {
                                                                    device.type = deviceTypes[3];
                                                                } else {
                                                                    if (test(/macintosh|powerpc/) && !test(/silk/)) {
                                                                        device.type = deviceTypes[3];
                                                                        /** @type {string} */
                                                                        device.model = "mac";
                                                                    } else {
                                                                        if (test(/linux/) && test(/x11/)) {
                                                                            device.type = deviceTypes[3];
                                                                        } else {
                                                                            if (test(/solaris|sunos|bsd/)) {
                                                                                device.type = deviceTypes[3];
                                                                            } else {
                                                                                if (test(/cros/)) {
                                                                                    device.type = deviceTypes[3];
                                                                                } else {
                                                                                    if (test(/bot|crawler|spider|yahoo|ia_archiver|covario-ids|findlinks|dataparksearch|larbin|mediapartners-google|ng-search|snappy|teoma|jeeves|tineye/) && !test(/mobile/)) {
                                                                                        device.type = deviceTypes[3];
                                                                                        /** @type {string} */
                                                                                        device.model = "crawler";
                                                                                    } else {
                                                                                        device.type = deviceTypes[2];
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /** @type {number} */
                    i = 0;
                    /** @type {number} */
                    j = deviceTypes.length;
                    for (; i < j; i = i + 1) {
                        addConditionalTest(deviceTypes[i], device.type === deviceTypes[i]);
                    }
                    if (options.detectDeviceModel) {
                        addConditionalTest(toCamel(device.model), true);
                    }
                }
                if (options.detectScreen && (device.screen = {}, Modernizr && Modernizr.mq && (Modernizr.mq("only screen and (max-width: 240px)") ? (device.screen.size = "veryVerySmall", addConditionalTest("veryVerySmallScreen", true)) : Modernizr.mq("only screen and (max-width: 320px)") ? (device.screen.size = "verySmall", addConditionalTest("verySmallScreen", true)) : Modernizr.mq("only screen and (max-width: 480px)") && (device.screen.size = "small", addConditionalTest("smallScreen", true)), device.type !==
                    deviceTypes[1] && device.type !== deviceTypes[2] || Modernizr.mq("only screen and (-moz-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 2.6/2), only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen  and (min-device-pixel-ratio: 1.3), only screen and (min-resolution: 1.3dppx)") && (device.screen.resolution = "high", addConditionalTest("highresolution", true))), device.type === deviceTypes[1] || device.type === deviceTypes[2] ? (window.onresize = function (event) {
                        checkOrientation(event);
                    }, checkOrientation()) : (device.orientation = "landscape", addConditionalTest(device.orientation, true))), options.detectOS && (Detectizr.os = {}, os = Detectizr.os, "" !== device.model && ("ipad" === device.model || "iphone" === device.model || "ipod" === device.model ? (os.name = "ios", setVersion(os, (test(/os\s([\d_]+)/) ? RegExp.$1 : "").replace(/_/g, "."))) : "android" === device.model ? (os.name = "android", setVersion(os, test(/android\s([\d\.]+)/) ? RegExp.$1 : "")) : "blackberry" ===
                    device.model ? (os.name = "blackberry", setVersion(os, test(/version\/([^\s]+)/) ? RegExp.$1 : "")) : "playbook" === device.model && (os.name = "blackberry", setVersion(os, test(/os ([^\s]+)/) ? RegExp.$1.replace(";", "") : ""))), os.name || (is("win") || is("16bit") ? (os.name = "windows", is("windows nt 10") ? setVersion(os, "10") : is("windows nt 6.3") ? setVersion(os, "8.1") : is("windows nt 6.2") || test(/\(windows 8\)/) ? setVersion(os, "8") : is("windows nt 6.1") ? setVersion(os, "7") :
                        is("windows nt 6.0") ? setVersion(os, "vista") : is("windows nt 5.2") || is("windows nt 5.1") || is("windows xp") ? setVersion(os, "xp") : is("windows nt 5.0") || is("windows 2000") ? setVersion(os, "2k") : is("winnt") || is("windows nt") ? setVersion(os, "nt") : is("win98") || is("windows 98") ? setVersion(os, "98") : (is("win95") || is("windows 95")) && setVersion(os, "95")) : is("mac") || is("darwin") ? (os.name = "mac os", is("68k") || is("68000") ? setVersion(os, "68k") : is("ppc") ||
                    is("powerpc") ? setVersion(os, "ppc") : is("os x") && setVersion(os, (test(/os\sx\s([\d_]+)/) ? RegExp.$1 : "os x").replace(/_/g, "."))) : is("webtv") ? os.name = "webtv" : is("x11") || is("inux") ? os.name = "linux" : is("sunos") ? os.name = "sun" : is("irix") ? os.name = "irix" : is("freebsd") ? os.name = "freebsd" : is("bsd") && (os.name = "bsd")), os.name && (addConditionalTest(os.name, true), os.major && (addVersionTest(os.name, os.major), os.minor && addVersionTest(os.name, os.major,
                        os.minor))), test(/\sx64|\sx86|\swin64|\swow64|\samd64/) ? os.addressRegisterSize = "64bit" : os.addressRegisterSize = "32bit", addConditionalTest(os.addressRegisterSize, true)), options.detectBrowser && (browser = Detectizr.browser, test(/opera|webtv/) || !test(/msie\s([\d\w\.]+)/) && !is("trident") ? is("firefox") ? (browser.engine = "gecko", browser.name = "firefox", setVersion(browser, test(/firefox\/([\d\w\.]+)/) ? RegExp.$1 : "")) : is("gecko/") ? browser.engine = "gecko" : is("opera") ?
                        (browser.name = "opera", browser.engine = "presto", setVersion(browser, test(/version\/([\d\.]+)/) ? RegExp.$1 : test(/opera(\s|\/)([\d\.]+)/) ? RegExp.$2 : "")) : is("konqueror") ? browser.name = "konqueror" : is("edge") ? (browser.engine = "webkit", browser.name = "edge", setVersion(browser, test(/edge\/([\d\.]+)/) ? RegExp.$1 : "")) : is("chrome") ? (browser.engine = "webkit", browser.name = "chrome", setVersion(browser, test(/chrome\/([\d\.]+)/) ? RegExp.$1 : "")) : is("iron") ? (browser.engine =
                            "webkit", browser.name = "iron") : is("crios") ? (browser.name = "chrome", browser.engine = "webkit", setVersion(browser, test(/crios\/([\d\.]+)/) ? RegExp.$1 : "")) : is("applewebkit/") ? (browser.name = "safari", browser.engine = "webkit", setVersion(browser, test(/version\/([\d\.]+)/) ? RegExp.$1 : "")) : is("mozilla/") && (browser.engine = "gecko") : (browser.engine = "trident", browser.name = "ie", !window.addEventListener && doc.documentMode && 7 === doc.documentMode ? setVersion(browser,
                        "8.compat") : test(/trident.*rv[ :](\d+)\./) ? setVersion(browser, RegExp.$1) : setVersion(browser, test(/trident\/4\.0/) ? "8" : RegExp.$1)), browser.name && (addConditionalTest(browser.name, true), browser.major && (addVersionTest(browser.name, browser.major), browser.minor && addVersionTest(browser.name, browser.major, browser.minor))), addConditionalTest(browser.engine, true), browser.language = navigator.userLanguage || navigator.language, addConditionalTest(browser.language, true)), options.detectPlugins) {
                    /** @type {!Array} */
                    browser.plugins = [];
                    /** @type {number} */
                    i = plugins2detect.length - 1;
                    for (; i >= 0; i--) {
                        plugin2detect = plugins2detect[i];
                        /** @type {boolean} */
                        pluginFound = false;
                        if (window.ActiveXObject) {
                            pluginFound = detectObject(plugin2detect.progIds);
                        } else {
                            if (navigator.plugins) {
                                pluginFound = detectPlugin(plugin2detect.substrs);
                            }
                        }
                        if (pluginFound) {
                            browser.plugins.push(plugin2detect.name);
                            addConditionalTest(plugin2detect.name, true);
                        }
                    }
                    if (navigator.javaEnabled()) {
                        browser.plugins.push("java");
                        addConditionalTest("java", true);
                    }
                }
            }

            var showAboveTimeout;
            var oldOrientation;
            var Detectizr = {};
            var Modernizr = window.Modernizr;
            /** @type {!Array} */
            var deviceTypes = ["tv", "tablet", "mobile", "desktop"];
            var options = {
                addAllFeaturesAsClass: false,
                detectDevice: true,
                detectDeviceModel: true,
                detectScreen: true,
                detectOS: true,
                detectBrowser: true,
                detectPlugins: true
            };
            /** @type {!Array} */
            var plugins2detect = [{
                name: "adobereader",
                substrs: ["Adobe", "Acrobat"],
                progIds: ["AcroPDF.PDF", "PDF.PDFCtrl.5"]
            }, {
                name: "flash",
                substrs: ["Shockwave Flash"],
                progIds: ["ShockwaveFlash.ShockwaveFlash.1"]
            }, {
                name: "wmplayer",
                substrs: ["Windows Media"],
                progIds: ["wmplayer.ocx"]
            }, {
                name: "silverlight",
                substrs: ["Silverlight"],
                progIds: ["AgControl.AgControl"]
            }, {
                name: "quicktime",
                substrs: ["QuickTime"],
                progIds: ["QuickTime.QuickTime"]
            }];
            /** @type {!RegExp} */
            var rclass = /[\t\r\n]/g;
            var docElem = doc.documentElement;
            return Detectizr.detect = function (settings) {
                return detect(settings);
            }, Detectizr.init = function () {
                if (Detectizr !== undefined) {
                    Detectizr.browser = {
                        userAgent: (navigator.userAgent || navigator.vendor || window.opera).toLowerCase()
                    };
                    Detectizr.detect();
                }
            }, Detectizr.init(), Detectizr;
        }(window, window.navigator, window.document);
    },
    function (canCreateDiscussions, isSlidingUp, saveNotifs) {
        saveNotifs(15)();
    },
    function (config, canCreateDiscussions, i) {
        /**
         * @param {string} editor
         * @param {string} text
         * @return {?}
         */
        function createPlaceholder(editor, text) {
            return "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + editor + "' height='" + text + "'%3E%3C/svg%3E";
        }

        /**
         * @param {!Object} el
         * @return {undefined}
         */
        function polyfillCurrentSrc(el) {
            if (el.srcset && !supportsCurrentSrc && window.picturefill) {
                var pf = window.picturefill._;
                if (!(el[pf.ns] && el[pf.ns].evaled)) {
                    pf.fillImg(el, {
                        reselect: true
                    });
                }
                if (!el[pf.ns].curSrc) {
                    /** @type {boolean} */
                    el[pf.ns].supported = false;
                    pf.fillImg(el, {
                        reselect: true
                    });
                }
                el.currentSrc = el[pf.ns].curSrc || el.src;
            }
        }

        /**
         * @param {!Object} el
         * @return {?}
         */
        function getStyle(el) {
            var a;
            /** @type {string} */
            var options = getComputedStyle(el).fontFamily;
            var r = {};
            for (; null !== (a = exp.exec(options));) {
                /** @type {string} */
                r[a[1]] = a[2];
            }
            return r;
        }

        /**
         * @param {(Object|string)} img
         * @param {number} width
         * @param {number} height
         * @return {undefined}
         */
        function setPlaceholder(img, width, height) {
            var placeholder = createPlaceholder(width || 1, height || 0);
            if (nativeGetAttribute.call(img, "src") !== placeholder) {
                nativeSetAttribute.call(img, "src", placeholder);
            }
        }

        /**
         * @param {!Object} data
         * @param {!Function} callback
         * @return {undefined}
         */
        function onImageReady(data, callback) {
            if (data.naturalWidth) {
                callback(data);
            } else {
                setTimeout(onImageReady, 100, data, callback);
            }
        }

        /**
         * @param {!Object} el
         * @return {undefined}
         */
        function fixOne(el) {
            var style = getStyle(el);
            var ofi = el[OFI];
            if (style["object-fit"] = style["object-fit"] || "fill", !ofi.img) {
                if ("fill" === style["object-fit"]) {
                    return;
                }
                if (!ofi.skipTest && supportsObjectFit && !style["object-position"]) {
                    return;
                }
            }
            if (!ofi.img) {
                /** @type {!Image} */
                ofi.img = new Image(el.width, el.height);
                ofi.img.srcset = nativeGetAttribute.call(el, "data-ofi-srcset") || el.srcset;
                ofi.img.src = nativeGetAttribute.call(el, "data-ofi-src") || el.src;
                nativeSetAttribute.call(el, "data-ofi-src", el.src);
                if (el.srcset) {
                    nativeSetAttribute.call(el, "data-ofi-srcset", el.srcset);
                }
                setPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);
                if (el.srcset) {
                    /** @type {string} */
                    el.srcset = "";
                }
                try {
                    keepSrcUsable(el);
                } catch (t) {
                    window.console;
                }
            }
            polyfillCurrentSrc(ofi.img);
            /** @type {string} */
            el.style.backgroundImage = 'url("' + (ofi.img.currentSrc || ofi.img.src).replace(/"/g, '\\"') + '")';
            el.style.backgroundPosition = style["object-position"] || "center";
            /** @type {string} */
            el.style.backgroundRepeat = "no-repeat";
            /** @type {string} */
            el.style.backgroundOrigin = "content-box";
            if (/scale-down/.test(style["object-fit"])) {
                onImageReady(ofi.img, function () {
                    if (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {
                        /** @type {string} */
                        el.style.backgroundSize = "contain";
                    } else {
                        /** @type {string} */
                        el.style.backgroundSize = "auto";
                    }
                });
            } else {
                el.style.backgroundSize = style["object-fit"].replace("none", "auto").replace("fill", "100% 100%");
            }
            onImageReady(ofi.img, function (img) {
                setPlaceholder(el, img.naturalWidth, img.naturalHeight);
            });
        }

        /**
         * @param {(Object|string)} el
         * @return {undefined}
         */
        function keepSrcUsable(el) {
            var descriptors = {
                get: function (name) {
                    return el[OFI].img[name || "src"];
                },
                set: function (value, name) {
                    return el[OFI].img[name || "src"] = value, nativeSetAttribute.call(el, "data-ofi-" + name, value), fixOne(el), value;
                }
            };
            Object.defineProperty(el, "src", descriptors);
            Object.defineProperty(el, "currentSrc", {
                get: function () {
                    return descriptors.get("currentSrc");
                }
            });
            Object.defineProperty(el, "srcset", {
                get: function () {
                    return descriptors.get("srcset");
                },
                set: function (name) {
                    return descriptors.set(name, "srcset");
                }
            });
        }

        /**
         * @param {!Object} type
         * @param {string} name
         * @return {?}
         */
        function fix(type, name) {
            /** @type {boolean} */
            var j = !thing && !type;
            if (name = name || {}, type = type || "img", supportsObjectPosition && !name.skipTest || !supportsOFI) {
                return false;
            }
            if ("img" === type) {
                /** @type {!NodeList<Element>} */
                type = document.getElementsByTagName("img");
            } else {
                if ("string" == typeof type) {
                    /** @type {!NodeList<Element>} */
                    type = document.querySelectorAll(type);
                } else {
                    if (!("length" in type)) {
                        /** @type {!Array} */
                        type = [type];
                    }
                }
            }
            /** @type {number} */
            var i = 0;
            for (; i < type.length; i++) {
                type[i][OFI] = type[i][OFI] || {
                    skipTest: name.skipTest
                };
                fixOne(type[i]);
            }
            if (j) {
                document.body.addEventListener("load", function (a) {
                    if ("IMG" === a.target.tagName) {
                        fix(a.target, {
                            skipTest: name.skipTest
                        });
                    }
                }, true);
                /** @type {boolean} */
                thing = true;
                /** @type {string} */
                type = "img";
            }
            if (name.watchMQ) {
                window.addEventListener("resize", fix.bind(null, type, {
                    skipTest: name.skipTest
                }));
            }
        }

        /** @type {string} */
        var OFI = "bfred-it:object-fit-images";
        /** @type {!RegExp} */
        var exp = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g;
        /** @type {(Image|{style: {object-position: number}})} */
        var testImg = "undefined" == typeof Image ? {
            style: {
                "object-position": 1
            }
        } : new Image;
        /** @type {boolean} */
        var supportsObjectFit = "object-fit" in testImg.style;
        /** @type {boolean} */
        var supportsObjectPosition = "object-position" in testImg.style;
        /** @type {boolean} */
        var supportsOFI = "background-size" in testImg.style;
        /** @type {boolean} */
        var supportsCurrentSrc = "string" == typeof testImg.currentSrc;
        /** @type {function(this:HTMLImageElement, string, (null|number)=): string} */
        var nativeGetAttribute = testImg.getAttribute;
        /** @type {function(this:HTMLImageElement, string, (boolean|number|string)): undefined} */
        var nativeSetAttribute = testImg.setAttribute;
        /** @type {boolean} */
        var thing = false;
        /** @type {boolean} */
        fix.supportsObjectFit = supportsObjectFit;
        /** @type {boolean} */
        fix.supportsObjectPosition = supportsObjectPosition;
        (function () {
            /**
             * @param {!Object} el
             * @param {string} name
             * @return {?}
             */
            function getOfiImageMaybe(el, name) {
                return el[OFI] && el[OFI].img && ("src" === name || "srcset" === name) ? el[OFI].img : el;
            }

            if (!supportsObjectPosition) {
                /**
                 * @param {string} name
                 * @param {(null|number)=} p1
                 * @return {string}
                 */
                HTMLImageElement.prototype.getAttribute = function (name) {
                    return nativeGetAttribute.call(getOfiImageMaybe(this, name), name);
                };
                /**
                 * @param {string} name
                 * @param {(boolean|number|string)} value
                 * @return {undefined}
                 */
                HTMLImageElement.prototype.setAttribute = function (name, value) {
                    return nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));
                };
            }
        })();
        /** @type {function(!Object, string): ?} */
        config.exports = fix;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function addListener(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var _normalizeDataUri = __webpack_require__(6);
        var _AboutPage = (_interopRequireDefault(_normalizeDataUri), __webpack_require__(5));
        var _AppDownload = (_interopRequireDefault(_AboutPage), __webpack_require__(19));
        var F = (_interopRequireDefault(_AppDownload), __webpack_require__(1));
        var _prepareStyleProperties = __webpack_require__(0);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _UiRippleInk = __webpack_require__(25);
        var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
        var _buildPageNumber = __webpack_require__(26);
        var _buildPageNumber2 = _interopRequireDefault(_buildPageNumber);
        var _deepAssign = __webpack_require__(43);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _UiIcon = __webpack_require__(53);
        var _UiIcon2 = _interopRequireDefault(_UiIcon);
        var _toHyphenCase = __webpack_require__(54);
        var _toHyphenCase2 = _interopRequireDefault(_toHyphenCase);
        var _classlist = __webpack_require__(55);
        var _classlist2 = _interopRequireDefault(_classlist);
        var _noframeworkWaypoints = __webpack_require__(59);
        var _noframeworkWaypoints2 = _interopRequireDefault(_noframeworkWaypoints);
        var _custom = __webpack_require__(60);
        var _custom2 = _interopRequireDefault(_custom);
        var newOrg = function () {
            /**
             * @return {undefined}
             */
            function show() {
                addListener(this, show);
                this.$refs = {
                    loader: (0, F.qs)(".loader"),
                    ui: (0, F.qs)(".ui"),
                    pagination: (0, F.qs)(".pagination")
                };
                this.ready = this.ready.bind(this);
                this.init();
            }

            return debug(show, [{
                key: "init",
                value: function () {
                    var states = this;
                    if (_UiRippleInk2.default && !window.location.href.match(/fallback/)) {
                        _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.WORLD_READY, this.ready);
                        this.home = new _toHyphenCase2.default((0, F.qs)('[data-panel="home"]'));
                        this.world = new _buildPageNumber2.default;
                        this.sound = new _classlist2.default((0, F.qs)('[data-component="sound"]'));
                    } else {
                        /** @type {boolean} */
                        window.EVS_FALLBACK = true;
                        document.documentElement.classList.add("is-fallback");
                        this.fallback = new _custom2.default((0, F.qs)('[data-component="canvas"]'));
                        this.fallback.init().then(function () {
                            states.home = new _toHyphenCase2.default((0, F.qs)('[data-panel="home"]'));
                            _prepareStyleProperties2.default.emit(_prepareStyleProperties2.default.HOME_READY);
                            states.ready();
                        });
                    }
                }
            }, {
                key: "ready",
                value: function () {
                    this.panels = new _deepAssign2.default((0, F.qs)('[data-component="panel"]'));
                    this.ui = new _UiIcon2.default((0, F.qs)('[data-component="ui"]'));
                    this.form = new _noframeworkWaypoints2.default((0, F.qs)('[data-component="form"]'));
                    this.show();
                }
            }, {
                key: "show",
                value: function () {
                    this.$refs.loader.remove();
                    this.ui.show();
                }
            }]), show;
        }();
        e.default = newOrg;
    },
    function (module, canCreateDiscussions, i) {
        /**
         * @return {undefined}
         */
        function Events() {
        }

        /**
         * @param {!Function} fn
         * @param {!Object} context
         * @param {!Object} once
         * @return {undefined}
         */
        function EE(fn, context, once) {
            /** @type {!Function} */
            this.fn = fn;
            /** @type {!Object} */
            this.context = context;
            this.once = once || false;
        }

        /**
         * @return {undefined}
         */
        function EventEmitter() {
            this._events = new Events;
            /** @type {number} */
            this._eventsCount = 0;
        }

        /** @type {function(this:Object, *): boolean} */
        var has = Object.prototype.hasOwnProperty;
        /** @type {string} */
        var prefix = "~";
        if (Object.create) {
            /** @type {!Object} */
            Events.prototype = Object.create(null);
            if (!(new Events).__proto__) {
                /** @type {boolean} */
                prefix = false;
            }
        }
        /**
         * @return {?}
         */
        EventEmitter.prototype.eventNames = function () {
            var events;
            var name;
            /** @type {!Array} */
            var names = [];
            if (0 === this._eventsCount) {
                return names;
            }
            for (name in events = this._events) {
                if (has.call(events, name)) {
                    names.push(prefix ? name.slice(1) : name);
                }
            }
            return Object.getOwnPropertySymbols ? names.concat(Object.getOwnPropertySymbols(events)) : names;
        };
        /**
         * @param {string} event
         * @param {?} exists
         * @return {?}
         */
        EventEmitter.prototype.listeners = function (event, exists) {
            var evt = prefix ? prefix + event : event;
            var available = this._events[evt];
            if (exists) {
                return !!available;
            }
            if (!available) {
                return [];
            }
            if (available.fn) {
                return [available.fn];
            }
            /** @type {number} */
            var i = 0;
            var l = available.length;
            /** @type {!Array} */
            var ee = new Array(l);
            for (; i < l; i++) {
                ee[i] = available[i].fn;
            }
            return ee;
        };
        /**
         * @param {!Object} key
         * @param {!Object} string
         * @param {string} level
         * @param {!Function} name
         * @param {?} a4
         * @param {?} a5
         * @return {?}
         */
        EventEmitter.prototype.emit = function (key, string, level, name, a4, a5) {
            var name = prefix ? prefix + key : key;
            if (!this._events[name]) {
                return false;
            }
            var args;
            var i;
            var listeners = this._events[name];
            /** @type {number} */
            var len = arguments.length;
            if (listeners.fn) {
                switch (listeners.once && this.removeListener(key, listeners.fn, void 0, true), len) {
                    case 1:
                        return listeners.fn.call(listeners.context), true;
                    case 2:
                        return listeners.fn.call(listeners.context, string), true;
                    case 3:
                        return listeners.fn.call(listeners.context, string, level), true;
                    case 4:
                        return listeners.fn.call(listeners.context, string, level, name), true;
                    case 5:
                        return listeners.fn.call(listeners.context, string, level, name, a4), true;
                    case 6:
                        return listeners.fn.call(listeners.context, string, level, name, a4, a5), true;
                }
                /** @type {number} */
                i = 1;
                /** @type {!Array} */
                args = new Array(len - 1);
                for (; i < len; i++) {
                    args[i - 1] = arguments[i];
                }
                listeners.fn.apply(listeners.context, args);
            } else {
                var j;
                var l = listeners.length;
                /** @type {number} */
                i = 0;
                for (; i < l; i++) {
                    switch (listeners[i].once && this.removeListener(key, listeners[i].fn, void 0, true), len) {
                        case 1:
                            listeners[i].fn.call(listeners[i].context);
                            break;
                        case 2:
                            listeners[i].fn.call(listeners[i].context, string);
                            break;
                        case 3:
                            listeners[i].fn.call(listeners[i].context, string, level);
                            break;
                        case 4:
                            listeners[i].fn.call(listeners[i].context, string, level, name);
                            break;
                        default:
                            if (!args) {
                                /** @type {number} */
                                j = 1;
                                /** @type {!Array} */
                                args = new Array(len - 1);
                                for (; j < len; j++) {
                                    args[j - 1] = arguments[j];
                                }
                            }
                            listeners[i].fn.apply(listeners[i].context, args);
                    }
                }
            }
            return true;
        };
        /**
         * @param {string} a
         * @param {!Object} fn
         * @param {string} context
         * @return {?}
         */
        EventEmitter.prototype.on = function (a, fn, context) {
            var result = new EE(fn, context || this);
            var name = prefix ? prefix + a : a;
            return this._events[name] ? this._events[name].fn ? this._events[name] = [this._events[name], result] : this._events[name].push(result) : (this._events[name] = result, this._eventsCount++), this;
        };
        /**
         * @param {string} path
         * @param {string} event
         * @param {string} context
         * @return {?}
         */
        EventEmitter.prototype.once = function (path, event, context) {
            var fn = new EE(event, context || this, true);
            var name = prefix ? prefix + path : path;
            return this._events[name] ? this._events[name].fn ? this._events[name] = [this._events[name], fn] : this._events[name].push(fn) : (this._events[name] = fn, this._eventsCount++), this;
        };
        /**
         * @param {!Object} event
         * @param {?} fn
         * @param {string} context
         * @param {string} once
         * @return {?}
         */
        EventEmitter.prototype.removeListener = function (event, fn, context, once) {
            var evt = prefix ? prefix + event : event;
            if (!this._events[evt]) {
                return this;
            }
            if (!fn) {
                return 0 == --this._eventsCount ? this._events = new Events : delete this._events[evt], this;
            }
            var listeners = this._events[evt];
            if (listeners.fn) {
                if (!(listeners.fn !== fn || once && !listeners.once || context && listeners.context !== context)) {
                    if (0 == --this._eventsCount) {
                        this._events = new Events;
                    } else {
                        delete this._events[evt];
                    }
                }
            } else {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var events = [];
                var l = listeners.length;
                for (; i < l; i++) {
                    if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                        events.push(listeners[i]);
                    }
                }
                if (events.length) {
                    this._events[evt] = 1 === events.length ? events[0] : events;
                } else {
                    if (0 == --this._eventsCount) {
                        this._events = new Events;
                    } else {
                        delete this._events[evt];
                    }
                }
            }
            return this;
        };
        /**
         * @param {number} name
         * @return {?}
         */
        EventEmitter.prototype.removeAllListeners = function (name) {
            var type;
            return name ? (type = prefix ? prefix + name : name, this._events[type] && (0 == --this._eventsCount ? this._events = new Events : delete this._events[type])) : (this._events = new Events, this._eventsCount = 0), this;
        };
        /** @type {function(!Object, ?, string, string): ?} */
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        /** @type {function(string, !Object, string): ?} */
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;
        /**
         * @return {?}
         */
        EventEmitter.prototype.setMaxListeners = function () {
            return this;
        };
        /** @type {(boolean|string)} */
        EventEmitter.prefixed = prefix;
        /** @type {function(): undefined} */
        EventEmitter.EventEmitter = EventEmitter;
        /** @type {function(): undefined} */
        module.exports = EventEmitter;
    },
    function (root, canCreateDiscussions) {
        !function (root, addedRenderer, factory) {
            if (void 0 !== root && root.exports) {
                root.exports = factory();
            } else {
                root.verge = factory();
            }
        }(this, 0, function () {
            /**
             * @return {?}
             */
            function viewport() {
                return {
                    width: viewportW(),
                    height: viewportH()
                };
            }

            /**
             * @param {!ClientRect} options
             * @param {number} value
             * @return {?}
             */
            function animate(options, value) {
                var i = {};
                return value = +value || 0, i.width = (i.right = options.right + value) - (i.left = options.left - value), i.height = (i.bottom = options.bottom + value) - (i.top = options.top - value), i;
            }

            /**
             * @param {!Object} el
             * @param {number} verge
             * @return {?}
             */
            function rectangle(el, verge) {
                return !(!(el = el && !el.nodeType ? el[0] : el) || 1 !== el.nodeType) && animate(el.getBoundingClientRect(), verge);
            }

            /**
             * @param {?} o
             * @return {?}
             */
            function draw(o) {
                o = null == o ? viewport() : 1 === o.nodeType ? rectangle(o) : o;
                var h = o.height;
                var callback = o.width;
                return h = "function" == typeof h ? h.call(o) : h, (callback = "function" == typeof callback ? callback.call(o) : callback) / h;
            }

            var self = {};
            /** @type {(Window|boolean)} */
            var win = "undefined" != typeof window && window;
            /** @type {(HTMLDocument|boolean)} */
            var doc = "undefined" != typeof document && document;
            /** @type {(Element|boolean)} */
            var docElem = doc && doc.documentElement;
            /** @type {function(this:Window, string): (MediaQueryList|null)} */
            var matchMedia = win.matchMedia || win.msMatchMedia;
            /** @type {!Function} */
            var mq = matchMedia ? function (q) {
                return !!matchMedia.call(win, q).matches;
            } : function () {
                return false;
            };
            /** @type {function(): ?} */
            var viewportW = self.viewportW = function () {
                /** @type {number} */
                var width = docElem.clientWidth;
                /** @type {number} */
                var height = win.innerWidth;
                return width < height ? height : width;
            };
            /** @type {function(): ?} */
            var viewportH = self.viewportH = function () {
                /** @type {number} */
                var width = docElem.clientHeight;
                /** @type {number} */
                var height = win.innerHeight;
                return width < height ? height : width;
            };
            return self.mq = mq, self.matchMedia = matchMedia ? function () {
                return matchMedia.apply(win, arguments);
            } : function () {
                return {};
            }, self.viewport = viewport, self.scrollX = function () {
                return win.pageXOffset || docElem.scrollLeft;
            }, self.scrollY = function () {
                return win.pageYOffset || docElem.scrollTop;
            }, self.rectangle = rectangle, self.aspect = draw, self.inX = function (el, verge) {
                var r = rectangle(el, verge);
                return !!r && r.right >= 0 && r.left <= viewportW();
            }, self.inY = function (el, verge) {
                var r = rectangle(el, verge);
                return !!r && r.bottom >= 0 && r.top <= viewportH();
            }, self.inViewport = function (el, verge) {
                var r = rectangle(el, verge);
                return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= viewportH() && r.left <= viewportW();
            }, self;
        });
    },
    function (canCreateDiscussions, e, interpret) {
        /**
         * @param {!Array} array
         * @return {?}
         */
        function makeArray(array) {
            if (Array.isArray(array)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var ret = Array(array.length);
                for (; i < array.length; i++) {
                    ret[i] = array[i];
                }
                return ret;
            }
            return Array.from(array);
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} m
         * @return {undefined}
         */
        function r(t, m) {
            if (!(t instanceof m)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var i = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var root = interpret(1);
        var SwaggerAuthorizations = function () {
            /**
             * @return {undefined}
             */
            function t() {
                r(this, t);
                /** @type {boolean} */
                this.supportsWebShare = Boolean(navigator.share);
                this.$refs = {
                    items: [].concat(makeArray((0, root.qsa)("[data-share]")))
                };
                this.init();
            }

            return i(t, [{
                key: "init",
                value: function () {
                    this.bind();
                }
            }, {
                key: "bind",
                value: function () {
                    this.$refs.items.forEach(function (e) {
                        (0, root.$on)(e, "click", t.onClick);
                    });
                }
            }], [{
                key: "onClick",
                value: function (args) {
                    args.preventDefault();
                    t[args.currentTarget.dataset.share]();
                }
            }, {
                key: "facebook",
                value: function () {
                    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.location.href;
                    var AlarmLabel = t.e(value);
                    /** @type {string} */
                    var element = "https://www.facebook.com/sharer.php?u=" + AlarmLabel;
                    return t.openPopup(element, "Share on facebook", 575, 300);
                }
            }, {
                key: "twitter",
                value: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.location.href;
                    var AlarmLabel = t.e("Happy New Year! Are you ready to immerse yourself with EVS into 2018?");
                    var this_area = t.e(e);
                    /** @type {string} */
                    var element = "https://twitter.com/intent/tweet?url=" + this_area + "&text=" + AlarmLabel;
                    return t.openPopup(element, "Share on Twitter", 550, 255);
                }
            }, {
                key: "linkedin",
                value: function () {
                    var value = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : window.location.href;
                    var AlarmLabel = t.e(value);
                    /** @type {string} */
                    var element = "https://www.linkedin.com/shareArticle?mini=true&url=" + AlarmLabel;
                    return t.openPopup(element, "Share on Linkedin", 550, 255);
                }
            }, {
                key: "e",
                value: function (type) {
                    return encodeURIComponent(type);
                }
            }, {
                key: "openPopup",
                value: function (v, name, x, n) {
                    /** @type {number} */
                    var r = (window.screen.width - x) / 2;
                    /** @type {number} */
                    var o = (window.screen.height - n) / 2;
                    return window.open(v, name, "status=no,resizable=yes,height=" + n + ",width=" + x + ",top=" + o + ",left=" + r + ",toolbar=no,menubar=no,scrollbars=no,location=no,directories=no");
                }
            }]), t;
        }();
        e.default = new SwaggerAuthorizations;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {string} hasTouch
         * @param {string} anyHover
         * @param {string} anyFine
         * @param {?} state
         * @return {?}
         */
        function determineDeviceType(hasTouch, anyHover, anyFine, state) {
            return hasTouch && (anyHover || anyFine) ? "hybrid" : hasTouch && Object.keys(state.detectHover).filter(function (undefined) {
                return "update" !== undefined;
            }).every(function (key) {
                return false === state.detectHover[key];
            }) && Object.keys(state.detectPointer).filter(function (undefined) {
                return "update" !== undefined;
            }).every(function (key) {
                return false === state.detectPointer[key];
            }) ? window.navigator && /android/.test(window.navigator.userAgent.toLowerCase()) ? "touchOnly" : "hybrid" : hasTouch ? "touchOnly" : "mouseOnly";
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var _deepAssign = __webpack_require__(21);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _prepareStyleProperties = __webpack_require__(22);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _normalizeDataUri = __webpack_require__(23);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var _UiIcon = __webpack_require__(24);
        var _UiIcon2 = _interopRequireDefault(_UiIcon);
        var detectIt = {
            state: {
                detectHover: _deepAssign2.default,
                detectPointer: _prepareStyleProperties2.default,
                detectTouchEvents: _normalizeDataUri2.default,
                detectPassiveEvents: _UiIcon2.default
            },
            update: function () {
                detectIt.state.detectHover.update();
                detectIt.state.detectPointer.update();
                detectIt.state.detectTouchEvents.update();
                detectIt.state.detectPassiveEvents.update();
                detectIt.updateOnlyOwnProperties();
            },
            updateOnlyOwnProperties: function () {
                if ("undefined" != typeof window) {
                    detectIt.passiveEvents = detectIt.state.detectPassiveEvents.hasSupport || false;
                    detectIt.hasTouch = detectIt.state.detectTouchEvents.hasSupport || false;
                    detectIt.deviceType = determineDeviceType(detectIt.hasTouch, detectIt.state.detectHover.anyHover, detectIt.state.detectPointer.anyFine, detectIt.state);
                    /** @type {boolean} */
                    detectIt.hasMouse = "touchOnly" !== detectIt.deviceType;
                    detectIt.primaryInput = "mouseOnly" === detectIt.deviceType && "mouse" || "touchOnly" === detectIt.deviceType && "touch" || detectIt.state.detectHover.hover && "mouse" || detectIt.state.detectHover.none && "touch" || "mouse";
                    if (/windows/.test(window.navigator.userAgent.toLowerCase()) && /chrome/.test(window.navigator.userAgent.toLowerCase()) && function (size) {
                            return size >= 59 && size < 62;
                        }(parseInt(/Chrome\/([0-9.]+)/.exec(navigator.userAgent)[1], 10)) && detectIt.hasTouch) {
                        /** @type {string} */
                        detectIt.deviceType = "hybrid";
                        /** @type {boolean} */
                        detectIt.hasMouse = true;
                        /** @type {string} */
                        detectIt.primaryInput = "mouse";
                    }
                }
            }
        };
        detectIt.updateOnlyOwnProperties();
        e.default = detectIt;
    },
    function (canCreateDiscussions, e, i) {
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var self = {
            update: function () {
                if ("undefined" != typeof window && "function" == typeof window.matchMedia) {
                    /** @type {boolean} */
                    self.hover = window.matchMedia("(hover: hover)").matches;
                    /** @type {boolean} */
                    self.none = window.matchMedia("(hover: none)").matches || window.matchMedia("(hover: on-demand)").matches;
                    /** @type {boolean} */
                    self.anyHover = window.matchMedia("(any-hover: hover)").matches;
                    /** @type {boolean} */
                    self.anyNone = window.matchMedia("(any-hover: none)").matches || window.matchMedia("(any-hover: on-demand)").matches;
                }
            }
        };
        self.update();
        e.default = self;
    },
    function (canCreateDiscussions, exports, i) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var self = {
            update: function () {
                if ("undefined" != typeof window && "function" == typeof window.matchMedia) {
                    /** @type {boolean} */
                    self.fine = window.matchMedia("(pointer: fine)").matches;
                    /** @type {boolean} */
                    self.coarse = window.matchMedia("(pointer: coarse)").matches;
                    /** @type {boolean} */
                    self.none = window.matchMedia("(pointer: none)").matches;
                    /** @type {boolean} */
                    self.anyFine = window.matchMedia("(any-pointer: fine)").matches;
                    /** @type {boolean} */
                    self.anyCoarse = window.matchMedia("(any-pointer: coarse)").matches;
                    /** @type {boolean} */
                    self.anyNone = window.matchMedia("(any-pointer: none)").matches;
                }
            }
        };
        self.update();
        exports.default = self;
    },
    function (canCreateDiscussions, e, i) {
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var self = {
            update: function () {
                if ("undefined" != typeof window) {
                    /** @type {boolean} */
                    self.hasSupport = "ontouchstart" in window;
                    /** @type {boolean} */
                    self.browserSupportsApi = Boolean(window.TouchEvent);
                }
            }
        };
        self.update();
        e.default = self;
    },
    function (canCreateDiscussions, e, i) {
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var self = {
            update: function () {
                if ("undefined" != typeof window && "function" == typeof window.addEventListener) {
                    /** @type {boolean} */
                    var tickZoom = false;
                    /** @type {!Object} */
                    var options = Object.defineProperty({}, "passive", {
                        get: function () {
                            /** @type {boolean} */
                            tickZoom = true;
                        }
                    });
                    /**
                     * @return {undefined}
                     */
                    var i = function () {
                    };
                    window.addEventListener("testPassiveEventSupport", i, options);
                    window.removeEventListener("testPassiveEventSupport", i, options);
                    self.hasSupport = tickZoom;
                }
            }
        };
        self.update();
        e.default = self;
    },
    function (canCreateDiscussions, e, i) {
        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var newOrg = function () {
            try {
                /** @type {!Element} */
                var canvas = document.createElement("canvas");
                var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
                return Boolean(window.WebGLRenderingContext) && gl && gl.getExtension("OES_texture_float") && 0 !== gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
            } catch (t) {
                return false;
            }
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function addListener(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = __webpack_require__(3);
        var _globals = __webpack_require__(2);
        var _UiIcon = __webpack_require__(6);
        var _AboutPage = (_interopRequireDefault(_UiIcon), __webpack_require__(5));
        var _AboutPage2 = _interopRequireDefault(_AboutPage);
        var _normalizeDataUri = __webpack_require__(0);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var _AppDownload = __webpack_require__(27);
        var _AppDownload2 = _interopRequireDefault(_AppDownload);
        var _buildPageNumber = __webpack_require__(28);
        var _buildPageNumber2 = _interopRequireDefault(_buildPageNumber);
        var _classlist = __webpack_require__(29);
        var _classlist2 = _interopRequireDefault(_classlist);
        var _deepAssign = __webpack_require__(38);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _UiRippleInk = __webpack_require__(39);
        var _UiRippleInk2 = _interopRequireDefault(_UiRippleInk);
        var _prepareStyleProperties = __webpack_require__(40);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var newOrg = function () {
            /**
             * @return {undefined}
             */
            function show() {
                addListener(this, show);
                this.width = _AboutPage2.default.width;
                this.height = _AboutPage2.default.height;
                /** @type {boolean} */
                this.hasIllus = false;
                this.update = this.update.bind(this);
                this.onMouseMove = this.onMouseMove.bind(this);
                this.onDeviceMove = this.onDeviceMove.bind(this);
                this.init();
                this.bind();
            }

            return debug(show, [{
                key: "init",
                value: function () {
                    var t = this;
                    this.renderer = new _AppDownload2.default;
                    this.camera = new _buildPageNumber2.default;
                    this.cameraGroup = new THREE.Object3D;
                    this.scene = new THREE.Scene;
                    this.cameraGroup.add(this.camera);
                    this.scene.add(this.cameraGroup);
                    this.illus = new _classlist2.default(this.renderer, this.camera, this.scene);
                    this.circle = new _deepAssign2.default(this.renderer, this.camera, this.scene);
                    this.particles = new _UiRippleInk2.default(this.renderer, this.camera, this.scene);
                    this.background = new _prepareStyleProperties2.default(this.renderer, this.camera, this.scene);
                    Promise.all([this.circle.init(), this.particles.init(), this.background.init()]).then(function () {
                        return t.render(), _normalizeDataUri2.default.emit(_normalizeDataUri2.default.HOME_READY), t.illus.init();
                    }).then(this.ready.bind(this));
                }
            }, {
                key: "bind",
                value: function () {
                    _normalizeDataUri2.default.on(_normalizeDataUri2.default.MOUSE_MOVE, this.onMouseMove);
                    _normalizeDataUri2.default.on(_normalizeDataUri2.default.DEVICE_MOVE, this.onDeviceMove);
                }
            }, {
                key: "ready",
                value: function () {
                    _normalizeDataUri2.default.emit(_normalizeDataUri2.default.WORLD_READY);
                    /** @type {boolean} */
                    this.hasIllus = true;
                }
            }, {
                key: "render",
                value: function () {
                    this.update();
                }
            }, {
                key: "update",
                value: function (t) {
                    requestAnimationFrame(this.update);
                    /** @type {number} */
                    var stripeW = (t - (this.last || t)) / 1e3;
                    /** @type {number} */
                    var mockBusinessNetwork = Math.round(1 / stripeW);
                    /** @type {!Object} */
                    this.last = t;
                    if (this.hasIllus) {
                        this.illus.update();
                    }
                    this.background.update();
                    this.circle.update();
                    this.particles.update(t, mockBusinessNetwork);
                    this.renderer.render(this.scene, this.camera);
                }
            }, {
                key: "onMouseMove",
                value: function (type, name) {
                    this.move(.75 * name, .75 * type);
                }
            }, {
                key: "onDeviceMove",
                value: function (type, name) {
                    this.move(.25 * name, .25 * type);
                }
            }, {
                key: "move",
                value: function (v, name) {
                    _globals.TweenLite.to(this.cameraGroup.rotation, 2, {
                        x: v,
                        y: name,
                        ease: _globals.Power2.easeOut
                    });
                }
            }]), show;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} view
         * @param {!Function} obj
         * @return {undefined}
         */
        function filter(view, obj) {
            if (!(view instanceof obj)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        /**
         * @param {string} self
         * @param {string} call
         * @return {?}
         */
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return !call || "object" != typeof call && "function" != typeof call ? self : call;
        }

        /**
         * @param {!Object} subClass
         * @param {!Object} superClass
         * @return {undefined}
         */
        function _inherits(subClass, superClass) {
            if ("function" != typeof superClass && null !== superClass) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            /** @type {!Object} */
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(subClass, superClass);
                } else {
                    /** @type {!Object} */
                    subClass.__proto__ = superClass;
                }
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var _createClass = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var core = __webpack_require__(3);
        var _prepareStyleProperties = __webpack_require__(5);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _normalizeDataUri = __webpack_require__(0);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var parse = __webpack_require__(1);
        var newOrg = function (_EventEmitter) {
            /**
             * @return {?}
             */
            function Layer() {
                filter(this, Layer);
                var renderer = _possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, {
                    antialias: window.devicePixelRatio <= 1,
                    alpha: true
                }));
                return (0, parse.qs)(".canvas").appendChild(renderer.domElement), renderer.setSize(_prepareStyleProperties2.default.width, _prepareStyleProperties2.default.height), renderer.setPixelRatio(window.devicePixelRatio), renderer.setClearColor(0, 1), renderer.autoClear = false, renderer.onResize = renderer.onResize.bind(renderer), renderer.bind(), renderer;
            }

            return _inherits(Layer, _EventEmitter), _createClass(Layer, [{
                key: "bind",
                value: function () {
                    _normalizeDataUri2.default.on(_normalizeDataUri2.default.RESIZE, this.onResize);
                }
            }, {
                key: "onResize",
                value: function (value, name) {
                    this.setSize(value, name);
                }
            }]), Layer;
        }(core.WebGLRenderer);
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} instance
         * @param {!Function} Constructor
         * @return {undefined}
         */
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        /**
         * @param {string} self
         * @param {string} call
         * @return {?}
         */
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return !call || "object" != typeof call && "function" != typeof call ? self : call;
        }

        /**
         * @param {!Object} subClass
         * @param {!Object} superClass
         * @return {undefined}
         */
        function _inherits(subClass, superClass) {
            if ("function" != typeof superClass && null !== superClass) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            /** @type {!Object} */
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(subClass, superClass);
                } else {
                    /** @type {!Object} */
                    subClass.__proto__ = superClass;
                }
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var _createClass = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = __webpack_require__(3);
        var _deepAssign = __webpack_require__(5);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _prepareStyleProperties = __webpack_require__(0);
        var config = _interopRequireDefault(_prepareStyleProperties);
        var newOrg = function (_EventEmitter) {
            /**
             * @return {?}
             */
            function Agent() {
                _classCallCheck(this, Agent);
                var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this, 60, _deepAssign2.default.ratio, .1, 2e3));
                return _this.lookAt(new THREE.Vector3), _this.position.x = 0, _this.position.y = 0, _this.position.z = 1, _this.onResize = _this.onResize.bind(_this), _this.bind(), _this;
            }

            return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                key: "bind",
                value: function () {
                    config.default.on(config.default.RESIZE, this.onResize);
                }
            }, {
                key: "onResize",
                value: function (type, name, start) {
                    /** @type {!Object} */
                    this.aspect = start;
                    this.updateProjectionMatrix();
                    config.default.emit(config.default.CAMERA_UPDATE);
                }
            }]), Agent;
        }(THREE.PerspectiveCamera);
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!Array} array
         * @return {?}
         */
        function makeArray(array) {
            if (Array.isArray(array)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var ret = Array(array.length);
                for (; i < array.length; i++) {
                    ret[i] = array[i];
                }
                return ret;
            }
            return Array.from(array);
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function _get(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var eqPartial = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = __webpack_require__(3);
        var _globals = __webpack_require__(2);
        var _prepareStyleProperties = __webpack_require__(0);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _normalizeDataUri = __webpack_require__(7);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var _UiIcon = __webpack_require__(30);
        var _deepAssign = __webpack_require__(33);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _classlist = __webpack_require__(34);
        var fs = __webpack_require__(35);
        var _UiRippleInk = __webpack_require__(36);
        var updateFrag = __webpack_require__(37);
        var newOrg = function () {
            /**
             * @param {!Object} renderer
             * @param {!Object} data
             * @param {string} a
             * @return {undefined}
             */
            function render(renderer, data, a) {
                _get(this, render);
                /** @type {!Object} */
                this.renderer = renderer;
                /** @type {!Object} */
                this.camera = data;
                /** @type {string} */
                this.scene = a;
                /** @type {number} */
                this.time = 0;
                /** @type {number} */
                this.textureWidth = 256;
                /** @type {number} */
                this.textureHeight = 256;
                /** @type {boolean} */
                this.isAnimating = false;
                this.data = {
                    brain: {
                        camera: [0, 0, 2],
                        color: .5,
                        position: [.5, 0, 0]
                    },
                    gloves: {
                        camera: [.5, 0, 1],
                        color: .95,
                        position: [-.25, 0, 0]
                    },
                    stadium: {
                        camera: [-.75, .8, .8],
                        color: 0,
                        position: [.15, -.15, .15]
                    },
                    lsm: {
                        camera: [1.5, .8, 1],
                        color: .85,
                        position: [-.5, 0, 0]
                    }
                };
                this.mousePos = new THREE.Vector2(0, 0);
                this.targetMousePos = new THREE.Vector2(0, 0);
                this.impactVector = new THREE.Vector3(0, 0, 0);
                this.targetImpact = new THREE.Vector3(0, 0, 0);
                /** @type {number} */
                this.impactFollowSpeed = .1;
                this.colliderMaterial = new THREE.MeshPhongMaterial({
                    color: 16711680,
                    transparent: true,
                    depthWrite: false,
                    opacity: 0
                });
                this.cameraTarget = new THREE.Vector3;
                this.update = this.update.bind(this);
                this.onChange = this.onChange.bind(this);
                this.mouseMove = this.mouseMove.bind(this);
            }

            return eqPartial(render, [{
                key: "init",
                value: function () {
                    return Promise.all([this.loadTextures(), this.loadColliders()]).then(this.afterInit.bind(this));
                }
            }, {
                key: "loadTextures",
                value: function () {
                    var context = this;
                    return Promise.all(Object.keys(this.data).map(function (value) {
                        return context.loadTexture(value);
                    })).then(function (wrappersTemplates) {
                        wrappersTemplates.forEach(function (data) {
                            context.data[data.name].texture = data.texture;
                        });
                    });
                }
            }, {
                key: "loadTexture",
                value: function (type) {
                    var options = this;
                    return fetch("assets/data/" + type + "_pos.json").then(function (rawResp) {
                        return rawResp.json();
                    }).then(function (state) {
                        return {
                            texture: render.createTexture(state.positions, options.textureWidth, options.textureHeight, type, 1),
                            name: type
                        };
                    });
                }
            }, {
                key: "loadColliders",
                value: function () {
                    var self = this;
                    return Promise.all(Object.keys(this.data).map(function (status) {
                        return render.loadCollider(status);
                    })).then(function (wrappersTemplates) {
                        wrappersTemplates.forEach(function (mesh) {
                            var i = mesh.name;
                            var n = new THREE.Mesh(mesh.geometry, self.colliderMaterial);
                            /** @type {boolean} */
                            n.visible = false;
                            n.name = i;
                            /** @type {number} */
                            n.position.z = .01;
                            self.scene.add(n);
                            self.data[i].collider = n;
                        });
                    });
                }
            }, {
                key: "afterInit",
                value: function () {
                    var obj1;
                    this.data.home = {
                        camera: [0, 0, 1],
                        collider: null,
                        color: .5,
                        position: [0, 0, 0],
                        texture: render.createTexture([], this.textureWidth, this.textureHeight, "home", 1)
                    };
                    this.data.end = {
                        camera: [0, 0, 1],
                        collider: null,
                        color: .5,
                        position: [0, 0, 0],
                        texture: render.createTexture([], this.textureWidth, this.textureHeight, "home", 1)
                    };
                    /** @type {string} */
                    this.currentName = "home";
                    (obj1 = this.camera.position).set.apply(obj1, makeArray(this.data[this.currentName].camera));
                    this.simulationShader = new THREE.ShaderMaterial({
                        uniforms: {
                            tFrom: {
                                value: this.data[this.currentName].texture
                            },
                            tTo: {
                                value: this.data[this.currentName].texture
                            },
                            tMorph: {
                                value: 0
                            },
                            timer: {
                                value: 0
                            },
                            mousePosition: {
                                value: this.mousePos
                            },
                            impactPosition: {
                                value: this.impactVector
                            }
                        },
                        vertexShader: _UiRippleInk,
                        fragmentShader: updateFrag
                    });
                    this.fbo = new _deepAssign2.default(this.textureWidth, this.renderer, this.simulationShader);
                    var geometry = new THREE.Geometry;
                    /** @type {number} */
                    var y = 0;
                    /** @type {number} */
                    var blockCountY = this.textureWidth * this.textureHeight;
                    for (; y < blockCountY; y++) {
                        var a = new THREE.Vector3;
                        /** @type {number} */
                        a.x = y % this.textureWidth / this.textureWidth;
                        /** @type {number} */
                        a.y = Math.floor(y / this.textureWidth) / this.textureHeight;
                        geometry.vertices.push(a);
                    }
                    this.renderShader = new THREE.ShaderMaterial({
                        uniforms: {
                            map: {
                                value: this.fbo.rtt.texture
                            },
                            width: {
                                value: this.textureWidth
                            },
                            height: {
                                value: this.textureHeight
                            },
                            pointSize: {
                                value: 1
                            },
                            effector: {
                                value: 0
                            },
                            density: {
                                value: _normalizeDataUri2.default.dpr
                            },
                            timer: {
                                value: 0
                            },
                            tMorph: {
                                value: 0
                            },
                            color: {
                                value: 0
                            },
                            texture: {
                                value: (new THREE.TextureLoader).load("assets/3d/particle.png", function (texture) {
                                    texture.wrapS = THREE.RepeatWrapping;
                                    texture.wrapT = THREE.RepeatWrapping;
                                })
                            }
                        },
                        vertexShader: _classlist,
                        fragmentShader: fs,
                        depthTest: true,
                        transparent: true
                    });
                    this.mesh = new THREE.Points(geometry, this.renderShader);
                    this.scene.add(this.mesh);
                    this.raycaster = new THREE.Raycaster;
                    this.mouseV2 = new THREE.Vector2;
                    this.currentCollider = this.data[this.currentName].collider;
                    this.bind();
                }
            }, {
                key: "bind",
                value: function () {
                    var options = this;
                    _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.MOUSE_MOVE, this.mouseMove);
                    _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.PANEL_CHANGE, this.onChange);
                    (0, _UiIcon.register)("m", {
                        match: function () {
                            options.updateMeshPosition(1, options.currentName);
                        },
                        unmatch: function () {
                            options.updateMeshPosition(1, options.currentName);
                        }
                    });
                }
            }, {
                key: "getMeshPosition",
                value: function (type, name) {
                    return (0, _UiIcon.isMoreThan)("m") ? this.data[type].position[name] : [0, -.25, 0][name];
                }
            }, {
                key: "updateMeshPosition",
                value: function (value, name) {
                    var scope = this;
                    _globals.TweenMax.to([this.cameraTarget], value, {
                        x: this.getMeshPosition(name, 0),
                        y: this.getMeshPosition(name, 1),
                        z: this.getMeshPosition(name, 2),
                        ease: _globals.Back.easeOut,
                        onUpdate: function () {
                            scope.camera.lookAt(scope.cameraTarget);
                        }
                    });
                }
            }, {
                key: "onChange",
                value: function (type, name, prop, i) {
                    var state = this;
                    if (!this.isAnimating) {
                        /** @type {boolean} */
                        this.isAnimating = true;
                        if (this.currentCollider) {
                            /** @type {boolean} */
                            this.currentCollider.visible = false;
                        }
                        this.currentCollider = this.data[i].collider;
                        if (this.currentCollider) {
                            /** @type {boolean} */
                            this.currentCollider.visible = true;
                        }
                        this.simulationShader.uniforms.tFrom.value = this.data[prop].texture;
                        this.simulationShader.uniforms.tTo.value = this.data[i].texture;
                        /** @type {number} */
                        this.simulationShader.uniforms.tMorph.value = 0;
                        /** @type {number} */
                        this.renderShader.uniforms.tMorph.value = 0;
                        (new _globals.TimelineLite({
                            onComplete: function () {
                                var obj1;
                                (obj1 = state.camera.position).set.apply(obj1, makeArray(state.data[i].camera));
                                _prepareStyleProperties2.default.emit(_prepareStyleProperties2.default.PANEL_END);
                                /** @type {boolean} */
                                state.isAnimating = false;
                                /** @type {string} */
                                state.currentName = i;
                            }
                        })).add("start").to([this.simulationShader.uniforms.tMorph, this.renderShader.uniforms.tMorph], 6, {
                            value: 1,
                            ease: _globals.Linear.easeNone
                        }, "start").to(this.camera.position, 6, {
                            x: this.data[i].camera[0],
                            y: this.data[i].camera[1],
                            z: this.data[i].camera[2],
                            ease: _globals.Back.easeOut
                        }, "start").to(this.renderShader.uniforms.color, 6, {
                            value: this.data[i].color,
                            ease: _globals.Power4.easeInOut
                        }, "start");
                        this.updateMeshPosition(6, i);
                    }
                }
            }, {
                key: "mouseMove",
                value: function (value, name) {
                    /** @type {number} */
                    this.targetMousePos.x = value;
                    /** @type {number} */
                    this.targetMousePos.y = -name;
                    /** @type {number} */
                    this.mouseV2.x = 2 * value;
                    /** @type {number} */
                    this.mouseV2.y = 2 * -name;
                    if (this.currentCollider) {
                        /** @type {number} */
                        this.impactFollowSpeed = .1;
                        this.raycaster.setFromCamera(this.mouseV2, this.camera);
                        this.intersects = this.raycaster.intersectObjects([this.currentCollider]);
                        if (this.intersects.length) {
                            this.targetImpact.x = this.intersects[0].point.x;
                            this.targetImpact.y = this.intersects[0].point.y;
                            this.targetImpact.z = this.intersects[0].point.z;
                        } else {
                            /** @type {number} */
                            this.targetImpact.z = 1;
                            /** @type {number} */
                            this.impactFollowSpeed = .01;
                        }
                    }
                }
            }, {
                key: "update",
                value: function () {
                    this.time += 1;
                    this.simulationShader.uniforms.timer.value = this.time;
                    this.renderShader.uniforms.timer.value = this.time;
                    this.mousePos.x += .1 * (this.targetMousePos.x - this.mousePos.x);
                    this.mousePos.y += .1 * (this.targetMousePos.y - this.mousePos.y);
                    this.simulationShader.uniforms.mousePosition.value = this.mousePos;
                    this.impactVector.x += (this.targetImpact.x - this.impactVector.x) * this.impactFollowSpeed;
                    this.impactVector.y += (this.targetImpact.y - this.impactVector.y) * this.impactFollowSpeed;
                    this.impactVector.z += (this.targetImpact.z - this.impactVector.z) * this.impactFollowSpeed;
                    this.simulationShader.uniforms.impactPosition.value = this.impactVector;
                    this.fbo.update();
                }
            }], [{
                key: "loadCollider",
                value: function (type) {
                    return new Promise(function (resolve) {
                        (new THREE.BufferGeometryLoader).load("assets/data/" + type + "_low.json", function (geojsonGeom) {
                            resolve({
                                geometry: geojsonGeom,
                                name: type
                            });
                        });
                    });
                }
            }, {
                key: "createTexture",
                value: function (obj, name, width, target) {
                    var h = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;
                    var data = render.getTextureData(obj, name, width, h);
                    var texture = new THREE.DataTexture(data, name, width, THREE.RGBFormat, THREE.FloatType);
                    return texture.minFilter = THREE.NearestFilter, texture.magFilter = THREE.NearestFilter, texture.name = target, texture.needsUpdate = true, texture;
                }
            }, {
                key: "getTextureData",
                value: function (type, name, result, min) {
                    /** @type {number} */
                    var bufferSize = name * result * 3;
                    var i = type.length;
                    /** @type {!Float32Array} */
                    var buffer = new Float32Array(bufferSize);
                    /** @type {number} */
                    var j = 0;
                    for (; j < bufferSize; j++) {
                        /** @type {number} */
                        buffer[j] = j < i ? type[j] * min : 0;
                    }
                    return buffer;
                }
            }]), render;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, exports, i) {
        /**
         * @param {!Object} p1
         * @return {undefined}
         */
        function define(p1) {
            var j = void 0;
            var p = void 0;
            var result = void 0;
            /** @type {string} */
            result = "screen and (min-width:" + a[p1] + ")";
            /** @type {number} */
            var length = arguments.length;
            /** @type {!Array} */
            var args = Array(length > 1 ? length - 1 : 0);
            /** @type {number} */
            var i = 1;
            for (; i < length; i++) {
                args[i - 1] = arguments[i];
            }
            if ("string" == typeof args[0]) {
                j = args[0];
                p = args[1];
                /** @type {string} */
                result = result + (" and (max-width:" + set(a[j]) + ")");
            } else {
                /** @type {boolean} */
                j = false;
                /** @type {!Array} */
                p = args;
            }
            m.register(result, p);
        }

        /**
         * @param {!Object} id
         * @param {boolean} name
         * @return {undefined}
         */
        function unregister(id, name) {
            var j = void 0;
            var dep = void 0;
            /** @type {string} */
            dep = "screen and (min-width:" + a[id] + ")";
            if ("string" == typeof(arguments.length <= 2 ? void 0 : arguments[2])) {
                j = arguments.length <= 2 ? void 0 : arguments[2];
                /** @type {string} */
                dep = dep + (" and (max-width:" + set(a[j]) + ")");
            } else {
                /** @type {boolean} */
                j = false;
            }
            m.unregister(dep, name);
        }

        /**
         * @param {?} region
         * @return {?}
         */
        function info(region) {
            /** @type {number} */
            var i = parseInt(a[region], 10);
            return window.innerWidth >= i;
        }

        /**
         * @param {?} id
         * @return {?}
         */
        function DemoNode(id) {
            /** @type {number} */
            var w = parseInt(a[id], 10);
            return window.innerWidth < w;
        }

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        /** @type {function(!Object): undefined} */
        exports.register = define;
        /** @type {function(!Object, boolean): undefined} */
        exports.unregister = unregister;
        /** @type {function(?): ?} */
        exports.isMoreThan = info;
        /** @type {function(?): ?} */
        exports.isLessThan = DemoNode;
        var m = i(31);
        var a = i(32);
        /**
         * @param {string} transform
         * @return {?}
         */
        var update = function (transform) {
            /** @type {number} */
            var e = parseInt(transform.replace("px", ""), 10);
            return Math.round(e / 16) + "em";
        };
        /**
         * @param {string} t
         * @return {?}
         */
        var set = function (t) {
            var a = update(t);
            var paddingBottom = a.replace("em", "");
            return parseInt(paddingBottom, 10) - .01 + "em";
        };
    },
    function (module, exp, valueNode) {
        var ret;
        !function (addedRenderer, module, factory) {
            /** @type {function(this:Window, string): (MediaQueryList|null)} */
            var matchMedia = window.matchMedia;
            if (void 0 !== module && module.exports) {
                module.exports = factory(matchMedia);
            } else {
                if (void 0 !== (ret = function () {
                        return module.enquire = factory(matchMedia);
                    }.call(exp, valueNode, exp, module))) {
                    module.exports = ret;
                }
            }
        }(0, void 0, function (matchMedia) {
            /**
             * @param {string} value
             * @param {!Function} e
             * @return {undefined}
             */
            function b(value, e) {
                /** @type {number} */
                var i = 0;
                var valueLength = value.length;
                i;
                for (; i < valueLength && false !== e(value[i], i); i++) {
                }
            }

            /**
             * @param {string} fn
             * @return {?}
             */
            function c(fn) {
                return "[object Array]" === Object.prototype.toString.apply(fn);
            }

            /**
             * @param {string} b
             * @return {?}
             */
            function d(b) {
                return "function" == typeof b;
            }

            /**
             * @param {!Object} options
             * @return {undefined}
             */
            function QueryHandler(options) {
                /** @type {!Object} */
                this.options = options;
                if (!options.deferSetup) {
                    this.setup();
                }
            }

            /**
             * @param {string} query
             * @param {string} isUnconditional
             * @return {undefined}
             */
            function MediaQuery(query, isUnconditional) {
                /** @type {string} */
                this.query = query;
                /** @type {string} */
                this.isUnconditional = isUnconditional;
                /** @type {!Array} */
                this.handlers = [];
                this.mql = matchMedia(query);
                var d = this;
                /**
                 * @param {!Object} a
                 * @return {undefined}
                 */
                this.listener = function (a) {
                    /** @type {!Object} */
                    d.mql = a;
                    d.assess();
                };
                this.mql.addListener(this.listener);
            }

            /**
             * @return {undefined}
             */
            function MediaQueryDispatch() {
                if (!matchMedia) {
                    throw new Error("matchMedia not present, legacy browsers require a polyfill");
                }
                this.queries = {};
                /** @type {boolean} */
                this.browserIsIncapable = !matchMedia("only all").matches;
            }

            return QueryHandler.prototype = {
                setup: function () {
                    if (this.options.setup) {
                        this.options.setup();
                    }
                    /** @type {boolean} */
                    this.initialised = true;
                },
                on: function () {
                    if (!this.initialised) {
                        this.setup();
                    }
                    if (this.options.match) {
                        this.options.match();
                    }
                },
                off: function () {
                    if (this.options.unmatch) {
                        this.options.unmatch();
                    }
                },
                destroy: function () {
                    if (this.options.destroy) {
                        this.options.destroy();
                    } else {
                        this.off();
                    }
                },
                equals: function (target) {
                    return this.options === target || this.options.match === target;
                }
            }, MediaQuery.prototype = {
                addHandler: function (options) {
                    var b = new QueryHandler(options);
                    this.handlers.push(b);
                    if (this.matches()) {
                        b.on();
                    }
                },
                removeHandler: function (type) {
                    var handlers = this.handlers;
                    b(handlers, function (e, bufinfo) {
                        if (e.equals(type)) {
                            return e.destroy(), !handlers.splice(bufinfo, 1);
                        }
                    });
                },
                matches: function () {
                    return this.mql.matches || this.isUnconditional;
                },
                clear: function () {
                    b(this.handlers, function (anAlertDialog) {
                        anAlertDialog.destroy();
                    });
                    this.mql.removeListener(this.listener);
                    /** @type {number} */
                    this.handlers.length = 0;
                },
                assess: function () {
                    /** @type {string} */
                    var action = this.matches() ? "on" : "off";
                    b(this.handlers, function (intentFilter) {
                        intentFilter[action]();
                    });
                }
            }, MediaQueryDispatch.prototype = {
                register: function (q, e, shouldDegrade) {
                    var queries = this.queries;
                    var isUnconditional = shouldDegrade && this.browserIsIncapable;
                    return queries[q] || (queries[q] = new MediaQuery(q, isUnconditional)), d(e) && (e = {
                        match: e
                    }), c(e) || (e = [e]), b(e, function (b) {
                        if (d(b)) {
                            b = {
                                match: b
                            };
                        }
                        queries[q].addHandler(b);
                    }), this;
                },
                unregister: function (a, b) {
                    var c = this.queries[a];
                    return c && (b ? c.removeHandler(b) : (c.clear(), delete this.queries[a])), this;
                }
            }, new MediaQueryDispatch;
        });
    },
    function (module, canCreateDiscussions) {
        module.exports = {
            xxxs: "240px",
            xxs: "320px",
            xs: "400px",
            s: "600px",
            nav: "768px",
            m: "768px",
            l: "1024px",
            xl: "1280px",
            xxl: "1440px",
            xxxl: "1600px"
        };
    },
    function (canCreateDiscussions, e, require) {
        /**
         * @param {!AudioNode} service
         * @param {!Function} name
         * @return {undefined}
         */
        function _get(service, name) {
            if (!(service instanceof name)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var calculateFloatContainerPos = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = require(3);
        var newOrg = function () {
            /**
             * @param {number} width
             * @param {!Object} renderer
             * @param {?} scene
             * @return {undefined}
             */
            function init(width, renderer, scene) {
                _get(this, init);
                var gl = renderer.getContext();
                if (!gl.getExtension("OES_texture_float")) {
                    throw new Error("float textures not supported");
                }
                if (0 === gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)) {
                    throw new Error("vertex shader cannot read textures");
                }
                this.scene = new THREE.Scene;
                this.orthoCamera = new THREE.OrthographicCamera(-width / 2, width / 2, width / 2, -width / 2, -1e6, 1e6);
                /** @type {number} */
                this.orthoCamera.position.z = 100;
                this.scene.add(this.orthoCamera);
                this.rtt = new THREE.WebGLRenderTarget(width, width, {
                    wrapS: THREE.RepeatWrapping,
                    wrapT: THREE.RepeatWrapping,
                    minFilter: THREE.NearestFilter,
                    magFilter: THREE.NearestFilter,
                    format: THREE.RGBAFormat,
                    type: "desktop" === Detectizr.device.type ? THREE.FloatType : THREE.HalfFloatType,
                    stencilBuffer: false
                });
                var canvas = new THREE.PlaneBufferGeometry(width, width);
                var view = new THREE.Mesh(canvas, scene);
                /** @type {number} */
                view.position.z = -5e3;
                this.scene.add(view);
                /** @type {!Object} */
                this.renderer = renderer;
            }

            return calculateFloatContainerPos(init, [{
                key: "update",
                value: function () {
                    this.renderer.render(this.scene, this.orthoCamera, this.rtt, false);
                }
            }]), init;
        }();
        e.default = newOrg;
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\nuniform sampler2D map;\nuniform float timer;\nuniform float tMorph;\nuniform float width;\nuniform float height;\nuniform float color;\nuniform float pointSize;\nuniform float density;\n\n\n// varying vec2 vUv;\nvarying vec3 vPos;\n// varying float vColor;\nvarying float vPointSize;\n\n\n// Pseudo random number generator\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat noise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0)) / 6.0\n                      0.366025403784439, // 0.5 * (sqrt(3.0) - 1.0)\n                     -0.577350269189626, // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n  // First corner\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n\n  // Other corners\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  // Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute(permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n\n  // Compute final noise value at P\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n  return 130.0 * dot(m, g);\n}\n\nvec3 curl(float x, float y, float z, float timer) {\n  float eps = 1.0, eps2 = 2.0 * eps;\n  float n1, n2, a, b;\n\n  x += timer * 0.05;\n  y += timer * 0.05;\n  z += timer * 0.05;\n\n  vec3 curl = vec3(0.);\n\n  n1 = noise(vec2(x, y + eps));\n  n2 = noise(vec2(x, y - eps));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(x, z + eps));\n  n2 = noise(vec2(x, z - eps));\n  b = (n1 - n2) / eps2;\n\n  curl.x = a - b;\n\n  n1 = noise(vec2(y, z + eps));\n  n2 = noise(vec2(y, z - eps));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(x + eps, z));\n  n2 = noise(vec2(x + eps, z));\n  b = (n1 - n2) / eps2;\n\n  curl.y = a - b;\n\n  n1 = noise(vec2(x + eps, y));\n  n2 = noise(vec2(x - eps, y));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(y + eps, z));\n  n2 = noise(vec2(y - eps, z));\n  b = (n1 - n2) / eps2;\n\n  curl.z = a - b;\n\n  return curl;\n}\n\nvoid main() {\n  vec3 position = texture2D(map, position.xy).xyz;\n  vPos = position;\n  vPointSize = 0.0 +  abs(curl (position.x, position.y, position.z, timer * 0.05).z * 2.0);\n  vPointSize *= (1.0 - sin(tMorph * 3.14));\n  gl_PointSize = vPointSize * density;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n";
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\nuniform sampler2D map;\nuniform sampler2D texture;\nuniform float tMorph;\nuniform float effector;\nuniform float color;\n\n// varying vec2 vUv;\nvarying vec3 vPos;\nvarying float vColor;\nvarying float vPointSize;\n\nfloat hue2rgb(float f1, float f2, float hue) {\n  if (hue < 0.0) {\n    hue += 1.0;\n  } else if (hue > 1.0) {\n    hue -= 1.0;\n  }\n\n  float res;\n  if ((6.0 * hue) < 1.0) {\n    res = f1 + (f2 - f1) * 6.0 * hue;\n  } else if ((2.0 * hue) < 1.0) {\n    res = f2;\n  } else if ((3.0 * hue) < 2.0) {\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n  } else {\n    res = f1;\n  }\n\n  return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n  vec3 rgb;\n\n  if (hsl.y == 0.0) {\n    rgb = vec3(hsl.z); // Luminance\n  } else {\n    float f2;\n\n    if (hsl.z < 0.5) {\n        f2 = hsl.z * (1.0 + hsl.y);\n    } else {\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n    }\n\n    float f1 = 2.0 * hsl.z - f2;\n\n    rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n    rgb.g = hue2rgb(f1, f2, hsl.x);\n    rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n  }\n\n  return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  return hsl2rgb(vec3(h, s, l));\n}\n\nvoid main() {\n  // In this step, it is certainly also possible to allocate any constant color.\n  // Instead, each particle gets an individual color, which results from its position in space\n  // float depth = smoothstep(750.0, -500.0, gl_FragCoord.z / gl_FragCoord.w);\n  // gl_FragColor = vec4(texture2D(map, vUv).xyz, depth);\n  // gl_FragColor = vec4(1.0, 0.2, 0.5, depth);\n  // gl_FragColor *= (1.0 + (effector * 1.0)); // The intensity of the color can be controlled here via the effector.\n  //gl_FragColor *= 1.5; // Whiteness Increase for Glow\n\n  // vec2 uv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y);\n  vec2 uv = vec2(vPos.x, vPos.y);\n  vec4 tex = texture2D(texture, uv);\n\n  float colDistance = 0.0;\n  float pointDistance = length(vPos);\n\n  if (pointDistance < .65 ){\n    colDistance = (-.2 + pointDistance * .4);\n  } else if (tMorph < 0.01 && tMorph > 0.09){\n    colDistance += pointDistance * .4;\n  }\n\n  float colPointSize = min( .1, vPointSize * .02);\n\n  float hue = color + colDistance + colPointSize;\n  float saturation = 1.0;\n  float light = 0.5;\n\n  vec3 col = hsl2rgb(hue, saturation, light);\n  tex.rgb = col;\n  tex.a = smoothstep(0.03, 0.09, length(vPos)) * max(0.25, (1.0 - sin(tMorph * 3.14) * .6) * vPointSize * 0.25);\n\n  gl_FragColor = tex;\n}\n";
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n  // The origin of a texture in WebGL is in the bottom, corner.\n  // So that with the previously in the main program\n  // In order to match the generated indices of the particles,\n  // the vertical components (y) of the UV coordinates must be inverted\n  // The changed UV value will later be displayed in the fragment shader\n  // the position of the particle is read out of the FBO. BUT DOES NOT HAVE AN EFFECT TO HAVE DISABLED.\n  // vUv = vec2(uv.x, 1.0 - uv.y);\n  vUv = vec2(uv.x, uv.y);\n\n  // Transformation of coordinates in eye coordinates and then in clip coordinates\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat backIn_1_0(float t) {\n  return pow(t, 3.0) - t * sin(t * PI);\n}\n\n\n\nfloat map_2_1(float value, float inMin, float inMax, float outMin, float outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec2 map_2_1(vec2 value, vec2 inMin, vec2 inMax, vec2 outMin, vec2 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec3 map_2_1(vec3 value, vec3 inMin, vec3 inMax, vec3 outMin, vec3 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\nvec4 map_2_1(vec4 value, vec4 inMin, vec4 inMax, vec4 outMin, vec4 outMax) {\n  return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n\n\n\nuniform sampler2D tFrom;\nuniform sampler2D tTo;\nuniform float tMorph;\nuniform float timer;\nuniform vec3 impactPosition;\n// uniform vec3 velocity;\n\nvarying vec2 vUv;\n\n// Pseudo random number generator\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat noise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0)) / 6.0\n                      0.366025403784439, // 0.5 * (sqrt(3.0) - 1.0)\n                     -0.577350269189626, // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n  // First corner\n  vec2 i = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n\n  // Other corners\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  // Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute(permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n\n  // Compute final noise value at P\n  vec3 g;\n  g.x = a0.x * x0.x + h.x * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n\n  return 130.0 * dot(m, g);\n}\n\nvec3 curl(float x, float y, float z, float timer) {\n  float eps = 1.0, eps2 = 2.0 * eps;\n  float n1, n2, a, b;\n\n  x += timer * 0.05;\n  y += timer * 0.05;\n  z += timer * 0.05;\n\n  vec3 curl = vec3(0.);\n\n  n1 = noise(vec2(x, y + eps));\n  n2 = noise(vec2(x, y - eps));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(x, z + eps));\n  n2 = noise(vec2(x, z - eps));\n  b = (n1 - n2) / eps2;\n\n  curl.x = a - b;\n\n  n1 = noise(vec2(y, z + eps));\n  n2 = noise(vec2(y, z - eps));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(x + eps, z));\n  n2 = noise(vec2(x + eps, z));\n  b = (n1 - n2) / eps2;\n\n  curl.y = a - b;\n\n  n1 = noise(vec2(x + eps, y));\n  n2 = noise(vec2(x - eps, y));\n  a = (n1 - n2) / eps2;\n\n  n1 = noise(vec2(y + eps, z));\n  n2 = noise(vec2(y - eps, z));\n  b = (n1 - n2) / eps2;\n\n  curl.z = a - b;\n\n  return curl;\n}\n\n// Tests\u2026\n#ifndef PI\n#define PI 3.141592653589793\n#endif\n\nfloat backIn(float t) {\n  return pow(t, 20.0) - t * sin(t * PI);\n}\n\n// https://www.shadertoy.com/view/4sV3zt\n// https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\n// http://www.geeks3d.com/20140205/glsl-simple-morph-target-animation-opengl-glslhacker-demo/\nvec3 slerp(vec3 start, vec3 end, float t) {\n     // Dot product - the cosine of the angle between 2 vectors.\n     float dot = dot(start, end);\n     // Clamp it to be in the range of Acos()\n     // This may be unnecessary, but floating point\n     // precision can be a fickle mistress.\n     dot = clamp(dot, -1.0, 1.0);\n     // Acos(dot) returns the angle between start and end,\n     // And multiplying that by time returns the angle between\n     // start and the final result.\n     float theta = acos(dot) * t;\n     vec3 RelativeVec = normalize(end - start * dot);\n\n     return ((start * cos(theta)) + (RelativeVec * sin(theta)));\n}\n\nvec3 anime(vec3 start, vec3 end, float t) {\n  vec3 pos;\n  float back = 0.5;\n  float multiplier = 0.75;\n\n  // pos = slerp(start, end, t);\n\n  if (t <= back) {\n    pos = slerp(start, end, t * multiplier);\n  } else {\n    pos = slerp(start, end, back * multiplier);\n    pos = mix(pos, end, map_2_1(t, 0.5, 1.0, 0.0, 1.0));\n  }\n\n  return pos;\n}\n\nvoid main() {\n\n  vec3 origin = texture2D(tFrom, vUv).rgb;\n  vec3 destination = texture2D(tTo, vUv).rgb;\n\n  //get particle order from 0 to 1\n  float order = (vUv.y + vUv.x / 10.0) / 10.0;\n  // make the order less linear\n  order = pow(order, .3);\n\n  // make the particles move with some delay depending on their order\n  // particle0 start moving at time0, particle1 start moving at time0.5 ...\n  // so calculate morphRatio for each particle\n  float morphRatio = smoothstep (0.0, 1.0, tMorph * 2.0 - order);\n\n  // mix positions\n  vec3 vPos = mix(origin, destination, morphRatio);\n\n  //if (tMorph > .99 || tMorph < 0.01){\n    // mouse attractor\n    float mouseDistance = length(impactPosition - vPos);\n    float attractionMinLimit = 0.0;// + sin(325.0 + timer * 0.05 * 3.14 * 2.0) * .1;\n    float attractionMaxLimit = .35;// + sin(timer * 0.01 * 3.14 * 2.0) * .1;\n    float mouseAttraction = 1.0 - smoothstep(attractionMinLimit, attractionMaxLimit, mouseDistance);\n    mouseAttraction = pow( mouseAttraction, 3.0);\n    vec3 posNormal = normalize(vPos);\n    vPos += posNormal * mouseAttraction * .2;\n    vPos += mouseAttraction *  abs(curl (posNormal.x, posNormal.y, posNormal.z, timer * 0.1) * .2);\n\n    //vPos += pow( mouseAttraction, 2.0) * abs(curl(posNormal.x, posNormal.y, posNormal.z, timer * 0.05) * 1.5);//( .7 + sin(timer * 0.01 * 3.14) * .2 );\n\n  //} else { // while transition\n    // line attractor\n    vec3 attractor1 = vec3(order, 0.0, 0.0);\n    attractor1.y += sin(morphRatio * 3.14 + timer * 0.001) * .5;\n    attractor1.z += cos(morphRatio * 3.14 + 1.0 + timer * 0.003) * .5;\n    attractor1.x += sin(morphRatio * 3.14 + 2.0 + timer * 0.0025) * .2;\n    vPos += (attractor1 - vPos) * sin(morphRatio * 3.14);\n\n    // attractor per vertex\n    vec3 attractor3 = (vPos * .8) + curl(vPos.x, vPos.y, vPos.z, timer * .01);\n    attractor3.x += cos(morphRatio * 3.14) * .25;\n    attractor3.y += sin(morphRatio * 3.14) * .25;\n    vPos += (attractor3 - vPos) * sin(morphRatio * 3.14) * .5;\n  //}\n\n  // make a small wave (always applied)\n  vPos.y += (cos(timer * 0.05 + vPos.x * 3.0 + vPos.z * 3.0) * 0.04 ) * vPos.x;\n\n  // make a big wave (applied from time to time)\n  // decide if we launch a big wave, depending on a noise function\n  float n = noise(vec2( (vPos.x * vPos.z) + timer * 0.002, vPos.y + timer * 0.005));\n  float waveRatio = smoothstep(0.5, 0.9, n);\n\n  // apply big wave\n  vec3 cnoise = curl(vPos.x * 2.0, vPos.y * 2.0, vPos.z * 2.0, timer * 0.05) * waveRatio * 1.5;\n\n  // mix waves and positions\n  vec3 tar = vPos + cnoise;\n  float d = length(vPos - tar) * 0.2;\n  vPos = mix(vPos, tar, pow(d, 2.0));\n  // gl_PointSize = noise( vec2(position.x + position.y + position.z, timer * 0.005)) * 3.0;\n\n  gl_FragColor = vec4(vPos, 1.0);\n}\n";
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function r(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var dispatch = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = __webpack_require__(3);
        var TweenTransition = __webpack_require__(2);
        var _prepareStyleProperties = __webpack_require__(8);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _deepAssign = __webpack_require__(0);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var newOrg = function () {
            /**
             * @param {!Object} opts
             * @param {!Object} data
             * @param {string} a
             * @return {undefined}
             */
            function action(opts, data, a) {
                r(this, action);
                /** @type {!Object} */
                this.renderer = opts;
                /** @type {!Object} */
                this.camera = data;
                /** @type {string} */
                this.scene = a;
                /** @type {number} */
                this.angle = 0;
                /** @type {number} */
                this.distance = .2;
                this.onChange = this.onChange.bind(this);
            }

            return dispatch(action, [{
                key: "init",
                value: function () {
                    return this.clock = new THREE.Clock, this.tick = 0, this.options = {
                        position: new THREE.Vector3,
                        positionRandomness: 5e-5,
                        velocity: new THREE.Vector3,
                        velocityRandomness: .0045,
                        color: 11176191,
                        colorRandomness: .65,
                        turbulence: 0,
                        lifetime: 8.5,
                        size: 2.5,
                        sizeRandomness: 6
                    }, this.spawnerOptions = {
                        spawnRate: 0,
                        horizontalSpeed: -2,
                        verticalSpeed: -2,
                        timeScale: 1
                    }, this.system = new _prepareStyleProperties2.default({
                        maxParticles: 25e3
                    }), this.scene.add(this.system), this.in(), this.bind(), Promise.resolve();
                }
            }, {
                key: "bind",
                value: function () {
                    _deepAssign2.default.on(_deepAssign2.default.PANEL_CHANGE, this.onChange);
                }
            }, {
                key: "onChange",
                value: function (type, name) {
                    if (0 === name) {
                        this.in(3);
                    } else {
                        this.out();
                    }
                }
            }, {
                key: "in",
                value: function () {
                    var silentOptions = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                    /** @type {boolean} */
                    this.system.visible = true;
                    TweenTransition.TweenMax.set(this.system.scale, {
                        x: 1,
                        y: 1,
                        ease: TweenTransition.Power4.easeIn
                    });
                    (new TweenTransition.TimelineLite).add("start").delay(silentOptions).set(this.options, {
                        positionRandomness: 5e-5
                    }).to(this.spawnerOptions, 6, {
                        spawnRate: 2e3,
                        ease: TweenTransition.Power2.easeIn
                    }, "start").to(this.options, 5, {
                        lifetime: 8.5
                    }, "start").to(this.options, 5, {
                        positionRandomness: .01,
                        ease: TweenTransition.Power4.easeOut
                    }, "start+=4");
                }
            }, {
                key: "out",
                value: function () {
                    var db = this;
                    TweenTransition.TweenMax.set(this.options, {
                        lifetime: 0
                    });
                    (new TweenTransition.TimelineLite({
                        onComplete: function () {
                            /** @type {boolean} */
                            db.system.visible = false;
                        }
                    })).add("start").to(this.system.scale, 1, {
                        x: 5,
                        y: 5,
                        ease: TweenTransition.Power4.easeIn
                    }, "start").to(this.spawnerOptions, 1, {
                        spawnRate: 0,
                        ease: TweenTransition.Power4.easeIn
                    }, "start").to(this.options, .5, {
                        positionRandomness: 1
                    }, "start");
                }
            }, {
                key: "update",
                value: function () {
                    /** @type {number} */
                    var delta = this.clock.getDelta() * this.spawnerOptions.timeScale;
                    if (this.tick += delta, this.tick < 0 && (this.tick = 0), delta > 0) {
                        /** @type {number} */
                        this.options.position.x = .2 * Math.cos(this.tick * this.spawnerOptions.horizontalSpeed);
                        /** @type {number} */
                        this.options.position.y = .2 * Math.sin(this.tick * this.spawnerOptions.verticalSpeed);
                        /** @type {number} */
                        var fsNew = 0;
                        for (; fsNew < this.spawnerOptions.spawnRate * delta; fsNew++) {
                            this.system.spawnParticle(this.options);
                        }
                    }
                    this.system.update(this.tick);
                }
            }]), action;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function r(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var dispatch = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var THREE = __webpack_require__(3);
        var _prepareStyleProperties = __webpack_require__(8);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _deepAssign = __webpack_require__(0);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var newOrg = function () {
            /**
             * @param {!Object} opts
             * @param {!Object} data
             * @param {string} a
             * @return {undefined}
             */
            function action(opts, data, a) {
                r(this, action);
                /** @type {!Object} */
                this.renderer = opts;
                /** @type {!Object} */
                this.camera = data;
                /** @type {string} */
                this.scene = a;
                this.onChange = this.onChange.bind(this);
            }

            return dispatch(action, [{
                key: "init",
                value: function () {
                    return this.clock = new THREE.Clock, this.tick = 0, this.timer = 0, this.pps = 30, this.options = {
                        position: new THREE.Vector3,
                        positionRandomness: 1,
                        velocity: new THREE.Vector3(0, 0, .025),
                        velocityRandomness: .025,
                        color: 15102124,
                        colorRandomness: .65,
                        turbulence: 2e-4,
                        lifetime: 5,
                        size: 8,
                        sizeRandomness: 20
                    }, this.spawnerOptions = {
                        spawnRate: 20,
                        speed: 1,
                        horizontalSpeed: -2,
                        verticalSpeed: -2,
                        timeScale: 1
                    }, this.system = new _prepareStyleProperties2.default({
                        maxParticles: 25e3
                    }), this.scene.add(this.system), this.bind(), Promise.resolve();
                }
            }, {
                key: "bind",
                value: function () {
                    _deepAssign2.default.on(_deepAssign2.default.PANEL_CHANGE, this.onChange);
                }
            }, {
                key: "onChange",
                value: function (type, name, start, id) {
                    switch ("home" === id || "end" === id ? (this.pps = 30, this.options.size = 8) : (this.pps = 20, this.options.size = 8), id) {
                        case "brain":
                            /** @type {number} */
                            this.options.color = 12716074;
                            this.options.position = new THREE.Vector3(.35, 0, 0);
                            this.options.velocity = new THREE.Vector3(0, 0, -.025);
                            break;
                        case "gloves":
                            /** @type {number} */
                            this.options.color = 9030492;
                            this.options.position = new THREE.Vector3(.5, 0, 0);
                            this.options.velocity = new THREE.Vector3(.0125, 0, .0125);
                            break;
                        case "stadium":
                            /** @type {number} */
                            this.options.color = 5226477;
                            this.options.position = new THREE.Vector3(-.5, 0, 0);
                            this.options.velocity = new THREE.Vector3(0, 0, 0);
                            break;
                        case "lsm":
                            /** @type {number} */
                            this.options.color = 15102124;
                            this.options.position = new THREE.Vector3(.25, .15, 0);
                            this.options.velocity = new THREE.Vector3(.0125, 0, 0);
                            break;
                        case "end":
                            /** @type {number} */
                            this.options.color = 15346232;
                            this.options.position = new THREE.Vector3;
                            this.options.velocity = new THREE.Vector3(0, 0, .025);
                            break;
                        case "home":
                        default:
                            /** @type {number} */
                            this.options.color = 15102124;
                            this.options.position = new THREE.Vector3;
                            this.options.velocity = new THREE.Vector3(0, 0, .025);
                    }
                }
            }, {
                key: "update",
                value: function (type, name) {
                    /** @type {number} */
                    var delta = this.clock.getDelta() * this.spawnerOptions.timeScale;
                    this.tick += delta;
                    this.timer += 1;
                    if (this.tick < 0) {
                        /** @type {number} */
                        this.tick = 0;
                    }
                    /** @type {number} */
                    var rowIndex = this.timer / name * this.pps || 0;
                    if (delta > 0 && rowIndex >= 1) {
                        /** @type {number} */
                        var fsNew = 0;
                        for (; fsNew < this.spawnerOptions.spawnRate * delta; fsNew++) {
                            this.system.spawnParticle(this.options);
                        }
                        /** @type {number} */
                        this.timer = 0;
                    }
                    this.system.update(this.tick);
                }
            }]), action;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, require) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireWildcard(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} e
         * @return {undefined}
         */
        function addListener(t, e) {
            if (!(t instanceof e)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var three = require(3);
        var Y = require(2);
        var _constants = require(0);
        var c = _interopRequireWildcard(_constants);
        var _selectorExtra = require(7);
        var materialVertexShaderRow = (_interopRequireWildcard(_selectorExtra), require(41));
        var fs = require(42);
        var newOrg = function () {
            /**
             * @param {!Object} renderer
             * @param {!Object} data
             * @param {string} a
             * @return {undefined}
             */
            function show(renderer, data, a) {
                addListener(this, show);
                /** @type {!Object} */
                this.renderer = renderer;
                /** @type {!Object} */
                this.camera = data;
                /** @type {string} */
                this.scene = a;
                this.settings = {
                    home: {
                        color: .66
                    },
                    brain: {
                        color: .5
                    },
                    gloves: {
                        color: .85
                    },
                    stadium: {
                        color: .95
                    },
                    lsm: {
                        color: .7
                    },
                    end: {
                        color: .9
                    }
                };
                this.update = this.update.bind(this);
                this.onChange = this.onChange.bind(this);
                this.updateSize = this.updateSize.bind(this);
                this.mouseMove = this.mouseMove.bind(this);
                this.bind();
            }

            return debug(show, [{
                key: "init",
                value: function () {
                    return this.geometry = new three.PlaneBufferGeometry(1, 1, 1, 1), this.material = new three.ShaderMaterial({
                        uniforms: {
                            color: {
                                value: this.settings.home.color
                            },
                            timer: {
                                value: 0
                            },
                            transition: {
                                value: 0
                            },
                            mousePosition: {
                                value: this.mousePos
                            }
                        },
                        vertexShader: materialVertexShaderRow,
                        fragmentShader: fs
                    }), this.time = 0, this.mousePos = new three.Vector2(0, 0), this.targetMousePos = new three.Vector2(0, 0), this.mesh = new three.Mesh(this.geometry, this.material), this.mesh.position.z = -10, this.camera.add(this.mesh), this.updateSize(), Promise.resolve();
                }
            }, {
                key: "bind",
                value: function () {
                    c.default.on(c.default.PANEL_CHANGE, this.onChange);
                    c.default.on(c.default.CAMERA_UPDATE, this.updateSize);
                    c.default.on(c.default.MOUSE_MOVE, this.mouseMove);
                }
            }, {
                key: "updateSize",
                value: function () {
                    /** @type {number} */
                    var utcDayCalib = this.camera.position.z - this.mesh.position.z;
                    /** @type {number} */
                    var df = this.camera.fov * Math.PI / 180;
                    /** @type {number} */
                    var h = 2 * Math.tan(df / 2) * Math.abs(utcDayCalib);
                    /** @type {number} */
                    var w = h * this.camera.aspect;
                    /** @type {number} */
                    this.mesh.scale.x = w;
                    /** @type {number} */
                    this.mesh.scale.y = h;
                }
            }, {
                key: "mouseMove",
                value: function (value, name) {
                    this.targetMousePos.x = value + .5;
                    /** @type {number} */
                    this.targetMousePos.y = .5 - name;
                }
            }, {
                key: "onChange",
                value: function (type, name, key, x) {
                    var bg_fb = this;
                    Y.TweenMax.to(this.material.uniforms.color, 6, {
                        value: this.settings[x].color,
                        ease: Y.Power4.easeOut
                    });
                    Y.TweenMax.to(this.material.uniforms.transition, 3, {
                        value: 1,
                        ease: Y.Linear.easeNone,
                        onComplete: function () {
                            /** @type {number} */
                            bg_fb.material.uniforms.transition.value = 0;
                        }
                    });
                }
            }, {
                key: "update",
                value: function () {
                    this.time += 1;
                    this.material.uniforms.timer.value = this.time;
                    this.mousePos.x += .1 * (this.targetMousePos.x - this.mousePos.x);
                    this.mousePos.y += .1 * (this.targetMousePos.y - this.mousePos.y);
                    this.material.uniforms.mousePosition.value = this.mousePos;
                }
            }]), show;
        }();
        e.default = newOrg;
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\nvarying vec2 vUv;\nuniform float color;\nuniform float timer;\n\nvoid main() {\n  vUv = vec2(uv.x, uv.y);\n\n  // Transformation of coordinates in eye coordinates and then in clip coordinates\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
    },
    function (mixin, canCreateDiscussions) {
        /** @type {string} */
        mixin.exports = "#define GLSLIFY 1\nuniform float color;\nuniform float timer;\nuniform float transition;\nuniform vec2 mousePosition;\nvarying vec2 vUv;\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n  if (hue < 0.0) {\n    hue += 1.0;\n  } else if (hue > 1.0) {\n    hue -= 1.0;\n  }\n\n  float res;\n  if ((6.0 * hue) < 1.0) {\n    res = f1 + (f2 - f1) * 6.0 * hue;\n  } else if ((2.0 * hue) < 1.0) {\n    res = f2;\n  } else if ((3.0 * hue) < 2.0) {\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n  } else {\n    res = f1;\n  }\n\n  return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n  vec3 rgb;\n\n  if (hsl.y == 0.0) {\n    rgb = vec3(hsl.z); // Luminance\n  } else {\n    float f2;\n\n    if (hsl.z < 0.5) {\n        f2 = hsl.z * (1.0 + hsl.y);\n    } else {\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n    }\n\n    float f1 = 2.0 * hsl.z - f2;\n\n    rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n    rgb.g = hue2rgb(f1, f2, hsl.x);\n    rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n  }\n\n  return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  return hsl2rgb(vec3(h, s, l));\n}\n\nfloat fbm(vec2 pos, float t){\n  float r;\n        r \t= \tnoise( vec3( pos, t ) * 01.0 ) * 01.0000;\n        r \t+= \tnoise( vec3( pos, t ) * 02.0 ) * 00.5000;\n        r \t+= \tnoise( vec3( pos, t ) * 04.0 ) * 00.2500;\n        //r \t+= \tnoise( vec3( pos, t ) * 08.0 ) * 00.1250;\n        //r \t+= \tnoise( vec3( pos, t ) * 16.0 ) * 00.0625;\n  return r / 1.75;\n}\n\n\nvoid main() {\n\n  vec2 pos = vUv;\n  float p = fbm( pos * 1.0, timer * .001);\n\tvec2 pos2 = pos + vec2(p);\n  float q = fbm( pos2 * 2.0, timer * .002);\n\tvec2 pos3 = pos + vec2(q);\n\n  float hue = color - .05 + length(pos3) * .1;//color  -.05 + pos3.x * .1;\n  float saturation = 1.0;//1.0 - sin(transition * 3.14) * .3;\n\n\n  // Light\n  float normX = vUv.x * 2.0 -1.0;\n  float normY = vUv.y * 2.0 -1.0;\n  float dist = length(vec2(normX, normY));\n  float vignette = 1.0 - dist * .5;\n  float highlightClouds = pos3.x * 0.02;\n  float baseLight = .15;\n  float transitionLight = sin(transition * 3.14 * 2.0) * .2;\n  float mouseDistance = length( mousePosition - vUv );\n  float radiusBase = 0.1;\n  float mouseShadow = 1.0 - smoothstep( 0.0, radiusBase, mouseDistance )  ;\n\n  float light = baseLight + highlightClouds;\n  light *= vignette + transitionLight;\n  light += mouseShadow * 0.05;\n  hue += mouseShadow * .01;\n\n  vec3 col = hsl2rgb(hue, saturation, light);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n";
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!Array} arr
         * @return {?}
         */
        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var arr2 = Array(arr.length);
                for (; i < arr.length; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            }
            return Array.from(arr);
        }

        /**
         * @param {!AudioNode} error
         * @param {!Function} type
         * @return {undefined}
         */
        function handle(error, type) {
            if (!(error instanceof type)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var d = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var root = __webpack_require__(2);
        var has = __webpack_require__(1);
        var _prepareStyleProperties = __webpack_require__(0);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _UiIcon = __webpack_require__(44);
        var _UiIcon2 = _interopRequireDefault(_UiIcon);
        var _deepAssign = __webpack_require__(45);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var _normalizeDataUri = __webpack_require__(48);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var _className = __webpack_require__(50);
        var _className2 = _interopRequireDefault(_className);
        var _ = __webpack_require__(52);
        var values = _interopRequireDefault(_);
        var newOrg = function () {
            /**
             * @param {!Object} $el
             * @return {undefined}
             */
            function focus($el) {
                handle(this, focus);
                /** @type {!Object} */
                this.$el = $el;
                this.$refs = {
                    panels: []
                };
                /** @type {number} */
                this.current = 0;
                /** @type {boolean} */
                this.isAnimating = false;
                this.next = this.next.bind(this);
                this.prev = this.prev.bind(this);
                this.onEnd = this.onEnd.bind(this);
                this.init();
            }

            return d(focus, [{
                key: "init",
                value: function () {
                    var me = this;
                    [].concat(_toConsumableArray((0, has.qsa)("[data-panel]", this.$el))).forEach(function (opts) {
                        me.$refs.panels.push(new _className2.default(opts));
                    });
                    this.pagination = new values.default(this.$refs.panels.length);
                    this.bind();
                }
            }, {
                key: "bind",
                value: function () {
                    this.keyboard = new _UiIcon2.default([{
                        key: 40,
                        callback: this.next
                    }, {
                        key: 38,
                        callback: this.prev
                    }]);
                    this.mouse = new _deepAssign2.default(this.prev, this.next);
                    this.swipe = new _normalizeDataUri2.default(this.prev, this.next);
                    _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.PANEL_NEXT, this.next);
                    _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.PANEL_PREV, this.prev);
                }
            }, {
                key: "next",
                value: function () {
                    this.jump(this.current + 1);
                }
            }, {
                key: "prev",
                value: function () {
                    this.jump(this.current - 1);
                }
            }, {
                key: "jump",
                value: function (value) {
                    var animation = this;
                    if (!this.isAnimating && !(this.current === value || value >= this.$refs.panels.length || value < 0)) {
                        /** @type {boolean} */
                        this.isAnimating = true;
                        var old = this.current;
                        var p = this.getPanel();
                        var data = this.getPanel(value);
                        /** @type {string} */
                        var update = value > old ? "next" : "prev";
                        this.pagination.jump(value, p.name, data.name);
                        document.body.classList.add("is-" + data.name);
                        document.body.classList.remove("is-" + p.name);
                        _prepareStyleProperties2.default.emit(_prepareStyleProperties2.default.PANEL_CHANGE, old, value, p.name, data.name);
                        data.activate();
                        if (!window.EVS_FALLBACK) {
                            _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.PANEL_END, this.onEnd);
                        }
                        var app = new root.TimelineMax({
                            onComplete: function () {
                                p.deactivate();
                                p.clean();
                                if (window.EVS_FALLBACK) {
                                    /** @type {boolean} */
                                    animation.isAnimating = false;
                                }
                            }
                        });
                        var val = p["to" + data.name];
                        var c = data["from" + p.name];
                        if (!val) {
                            val = p.out;
                        }
                        if (!c) {
                            c = data.in;
                        }
                        app.add("start");
                        app.add(val.call(p, update), "start");
                        app.add(c.call(data, update), "start");
                        /** @type {string} */
                        this.current = value;
                    }
                }
            }, {
                key: "getPanel",
                value: function () {
                    var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.current;
                    return this.$refs.panels[i];
                }
            }, {
                key: "onEnd",
                value: function () {
                    /** @type {boolean} */
                    this.isAnimating = false;
                    _prepareStyleProperties2.default.off(_prepareStyleProperties2.default.PANEL_END, this.onEnd);
                }
            }]), focus;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, getRootScope) {
        /**
         * @param {!AudioNode} value
         * @param {!Function} type
         * @return {undefined}
         */
        function n(value, type) {
            if (!(value instanceof type)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var i = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var $rootScope = getRootScope(1);
        var newOrg = function () {
            /**
             * @param {!Object} gotoEnd
             * @return {undefined}
             */
            function t(gotoEnd) {
                n(this, t);
                /** @type {!Object} */
                this.binds = gotoEnd;
                this.onKeyDown = this.onKeyDown.bind(this);
                this.init();
            }

            return i(t, [{
                key: "init",
                value: function () {
                    this.bind();
                }
            }, {
                key: "destroy",
                value: function () {
                    this.unbind();
                }
            }, {
                key: "bind",
                value: function () {
                    (0, $rootScope.$on)(document, "keydown", this.onKeyDown);
                }
            }, {
                key: "unbind",
                value: function () {
                    (0, $rootScope.$off)(document, "keydown", this.onKeyDown);
                }
            }, {
                key: "onKeyDown",
                value: function (type) {
                    var key = type.keyCode;
                    /** @type {number} */
                    var i = 0;
                    for (; i < this.binds.length; i++) {
                        var e = this.binds[i];
                        if (key === e.key) {
                            type.preventDefault();
                            e.callback();
                            break;
                        }
                    }
                }
            }]), t;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} instance
         * @param {!Function} Constructor
         * @return {undefined}
         */
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var _createClass = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var root = __webpack_require__(46);
        var s = __webpack_require__(47);
        var object = __webpack_require__(1);
        var _prepareStyleProperties = __webpack_require__(5);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _deepAssign = __webpack_require__(0);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var newOrg = function () {
            /**
             * @param {?} value
             * @param {(Array|string)} view
             * @return {undefined}
             */
            function Slider(value, view) {
                _classCallCheck(this, Slider);
                this.prev = value;
                /** @type {(Array|string)} */
                this.next = view;
                this.onWheel = this.onWheel.bind(this);
                this.init();
            }

            return _createClass(Slider, [{
                key: "init",
                value: function () {
                    this.lethargy = new root.Lethargy;
                    this.bind();
                }
            }, {
                key: "destroy",
                value: function () {
                    this.unbind();
                }
            }, {
                key: "bind",
                value: function () {
                    (0, object.$on)(document, "mousewheel", this.onWheel, {
                        capture: false,
                        passive: true
                    });
                    (0, object.$on)(document, "wheel", this.onWheel, {
                        capture: false,
                        passive: true
                    });
                    (0, object.$on)(document, "mousemove", Slider.onMove);
                }
            }, {
                key: "unbind",
                value: function () {
                    (0, object.$off)(document, "mousewheel", this.onWheel);
                    (0, object.$off)(document, "wheel", this.onWheel);
                    (0, object.$off)(document, "mousemove", Slider.onMove);
                }
            }, {
                key: "onWheel",
                value: function (obj) {
                    var allObservablesForObject = this.lethargy.check(obj);
                    if (false !== allObservablesForObject) {
                        if (-1 === allObservablesForObject) {
                            this.next();
                        }
                        if (1 === allObservablesForObject) {
                            this.prev();
                        }
                    }
                }
            }], [{
                key: "onMove",
                value: function (t) {
                    /** @type {number} */
                    var sx = _prepareStyleProperties2.default.width / 2;
                    /** @type {number} */
                    var startY = _prepareStyleProperties2.default.height / 2;
                    /** @type {number} */
                    var d = t.clientX - sx;
                    /** @type {number} */
                    var diff = t.clientY - startY;
                    var o = (0, s.map)(d, -sx, sx, -.5, .5);
                    var path = (0, s.map)(diff, -startY, startY, -.5, .5);
                    _deepAssign2.default.emit(_deepAssign2.default.MOUSE_MOVE, o, path);
                }
            }]), Slider;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, data) {
        (function () {
            var root;
            root = void 0 !== data && null !== data ? data : this;
            root.Lethargy = function () {
                /**
                 * @param {?} stability
                 * @param {?} sensitivity
                 * @param {?} tolerance
                 * @param {number} delay
                 * @return {undefined}
                 */
                function Lethargy(stability, sensitivity, tolerance, delay) {
                    /** @type {number} */
                    this.stability = null != stability ? Math.abs(stability) : 8;
                    /** @type {number} */
                    this.sensitivity = null != sensitivity ? 1 + Math.abs(sensitivity) : 100;
                    /** @type {number} */
                    this.tolerance = null != tolerance ? 1 + Math.abs(tolerance) : 1.1;
                    this.delay = null != delay ? delay : 150;
                    this.lastUpDeltas = function () {
                        var _l;
                        var timeoutIndex;
                        var results;
                        /** @type {!Array} */
                        results = [];
                        /** @type {number} */
                        _l = 1;
                        /** @type {number} */
                        timeoutIndex = 2 * this.stability;
                        for (; 1 <= timeoutIndex ? _l <= timeoutIndex : _l >= timeoutIndex; 1 <= timeoutIndex ? _l++ : _l--) {
                            results.push(null);
                        }
                        return results;
                    }.call(this);
                    this.lastDownDeltas = function () {
                        var _l;
                        var timeoutIndex;
                        var results;
                        /** @type {!Array} */
                        results = [];
                        /** @type {number} */
                        _l = 1;
                        /** @type {number} */
                        timeoutIndex = 2 * this.stability;
                        for (; 1 <= timeoutIndex ? _l <= timeoutIndex : _l >= timeoutIndex; 1 <= timeoutIndex ? _l++ : _l--) {
                            results.push(null);
                        }
                        return results;
                    }.call(this);
                    this.deltasTimestamp = function () {
                        var _l;
                        var timeoutIndex;
                        var results;
                        /** @type {!Array} */
                        results = [];
                        /** @type {number} */
                        _l = 1;
                        /** @type {number} */
                        timeoutIndex = 2 * this.stability;
                        for (; 1 <= timeoutIndex ? _l <= timeoutIndex : _l >= timeoutIndex; 1 <= timeoutIndex ? _l++ : _l--) {
                            results.push(null);
                        }
                        return results;
                    }.call(this);
                }

                return Lethargy.prototype.check = function (event) {
                    var d;
                    return event = event.originalEvent || event, null != event.wheelDelta ? d = event.wheelDelta : null != event.deltaY ? d = -40 * event.deltaY : null == event.detail && 0 !== event.detail || (d = -40 * event.detail), this.deltasTimestamp.push(Date.now()), this.deltasTimestamp.shift(), d > 0 ? (this.lastUpDeltas.push(d), this.lastUpDeltas.shift(), this.isInertia(1)) : (this.lastDownDeltas.push(d), this.lastDownDeltas.shift(), this.isInertia(-1));
                }, Lethargy.prototype.isInertia = function (direction) {
                    var lastDeltas;
                    var lastDeltasNew;
                    var lastDeltasOld;
                    var newAverage;
                    var newSum;
                    var oldAverage;
                    var oldSum;
                    return lastDeltas = -1 === direction ? this.lastDownDeltas : this.lastUpDeltas, null === lastDeltas[0] ? direction : !(this.deltasTimestamp[2 * this.stability - 2] + this.delay > Date.now() && lastDeltas[0] === lastDeltas[2 * this.stability - 1]) && (lastDeltasOld = lastDeltas.slice(0, this.stability), lastDeltasNew = lastDeltas.slice(this.stability, 2 * this.stability), oldSum = lastDeltasOld.reduce(function (buckets, name) {
                        return buckets + name;
                    }), newSum = lastDeltasNew.reduce(function (buckets, name) {
                        return buckets + name;
                    }), oldAverage = oldSum / lastDeltasOld.length, newAverage = newSum / lastDeltasNew.length, Math.abs(oldAverage) < Math.abs(newAverage * this.tolerance) && this.sensitivity < Math.abs(newAverage) && direction);
                }, Lethargy.prototype.showLastUpDeltas = function () {
                    return this.lastUpDeltas;
                }, Lethargy.prototype.showLastDownDeltas = function () {
                    return this.lastDownDeltas;
                }, Lethargy;
            }();
        }).call(this);
    },
    function (canCreateDiscussions, a, self) {
        /**
         * @param {?} scale
         * @param {?} step
         * @param {?} ratio
         * @return {?}
         */
        function value(scale, step, ratio) {
            return Math.min(step, Math.max(scale, ratio));
        }

        /**
         * @param {number} start
         * @return {?}
         */
        function offsetFromTag(start) {
            return start < 0 ? 0 : start > 1 ? 1 : start;
        }

        /**
         * @param {(boolean|number|string)} s
         * @param {(boolean|number|string)} p
         * @return {?}
         */
        function findAnagrams(s, p) {
            return p < s ? 0 : 1;
        }

        /**
         * @param {(boolean|number|string)} val
         * @param {(boolean|number|string)} start
         * @param {(boolean|number|string)} stop
         * @param {number} type
         * @param {string} numberStr
         * @return {?}
         */
        function getDigit(val, start, stop, type, numberStr) {
            return (val - start) / (stop - start) * (numberStr - type) + type;
        }

        /**
         * @param {?} argR
         * @param {?} arg
         * @return {?}
         */
        function distanceBetweenTwoPoints(argR, arg) {
            return Math.sqrt(argR * argR + arg * arg);
        }

        /**
         * @param {(boolean|number|string)} x
         * @param {(boolean|number|string)} y
         * @param {(boolean|number|string)} dx
         * @param {(boolean|number|string)} dy
         * @return {?}
         */
        function invperspT(x, y, dx, dy) {
            /** @type {number} */
            var longX = x - dx;
            /** @type {number} */
            var longY = y - dy;
            return Math.sqrt(longX * longX + longY * longY);
        }

        /**
         * @param {(boolean|number|string)} s
         * @param {(boolean|number|string)} e
         * @param {(boolean|number|string)} t
         * @return {?}
         */
        function cellDblClicked(s, e, t) {
            /** @type {number} */
            var sxy = Math.max(0, Math.min(1, (t - s) / (e - s)));
            return sxy * sxy * (3 - 2 * sxy);
        }

        /**
         * @param {number} start
         * @param {string} end
         * @param {number} value
         * @return {?}
         */
        function copy(start, end, value) {
            return start + (end - start) * value;
        }

        /**
         * @param {(boolean|number|string)} s
         * @param {(boolean|number|string)} e
         * @param {(boolean|number|string)} t
         * @return {?}
         */
        function l(s, e, t) {
            return (t - s) / (e - s);
        }

        /**
         * @param {number} p
         * @param {string} r
         * @return {?}
         */
        function tryFixed(p, r) {
            var expected_decimals = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 2;
            return parseFloat(Math.min(p + Math.random() * (r - p), r).toFixed(expected_decimals));
        }

        /**
         * @param {number} d
         * @param {string} now
         * @return {?}
         */
        function f(d, now) {
            return Math.floor(Math.random() * (now - d + 1) + d);
        }

        /**
         * @return {?}
         */
        function setupRouteTest() {
            return Math.random() > .5 ? 1 : -1;
        }

        /**
         * @param {string} x
         * @param {number} i
         * @param {string} offset
         * @return {?}
         */
        function testElemOffset(x, i, offset) {
            /** @type {number} */
            var n = offset - i;
            if (n <= 0) {
                return 0;
            }
            /** @type {number} */
            var number = (x - i) % n;
            return number < 0 && (number = number + n), number + i;
        }

        /**
         * @param {number} stack
         * @return {?}
         */
        function generate(stack) {
            return stack * Math.PI / 180;
        }

        /**
         * @param {number} value
         * @return {?}
         */
        function getField(value) {
            return 180 * value / Math.PI;
        }

        /**
         * @param {?} t
         * @return {?}
         */
        function daysFrom1970(t) {
            var inbetweenTolerance = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e-4;
            return Math.floor(t + inbetweenTolerance);
        }

        /**
         * @param {?} h
         * @return {?}
         */
        function truncate(h) {
            var aT = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e-4;
            return Math.ceil(h + aT);
        }

        /**
         * @param {(boolean|number|string)} p
         * @param {(boolean|number|string)} n
         * @return {?}
         */
        function x(p, n) {
            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e-4;
            return Math.abs(p - n) < i;
        }

        /**
         * @param {number} downcodeFunc
         * @param {?} firebaseRef
         * @return {?}
         */
        function wxmlToFirebase(downcodeFunc, firebaseRef) {
            return downcodeFunc > firebaseRef - (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e-4);
        }

        /**
         * @param {?} i
         * @param {?} t
         * @return {?}
         */
        function y(i, t) {
            return i < t + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1e-4);
        }

        /**
         * @param {(Object|number)} t
         * @param {!Object} i
         * @param {?} e
         * @return {?}
         */
        function enterEdge(t, i, e) {
            return Math.min(t + i, e);
        }

        /**
         * @param {(boolean|number|string)} d
         * @param {(boolean|number|string)} y
         * @param {?} x
         * @return {?}
         */
        function T(d, y, x) {
            return Math.max(d - y, x);
        }

        /**
         * @param {number} canCreateDiscussions
         * @return {?}
         */
        function prefetchGroupsInfo(canCreateDiscussions) {
            return !!(1 & canCreateDiscussions);
        }

        /**
         * @param {number} arcLarge
         * @return {?}
         */
        function A(arcLarge) {
            return !(1 & arcLarge);
        }

        /**
         * @param {number} height
         * @return {?}
         */
        function justinImageSize(height) {
            return 0 !== height && 0 == (height & height - 1);
        }

        /**
         * @param {?} sigma
         * @return {?}
         */
        function fn(sigma) {
            return Math.pow(2, Math.round(Math.log(sigma) / Math.log(2)));
        }

        /**
         * @param {?} value
         * @return {?}
         */
        function roundPow10(value) {
            return Math.pow(2, Math.ceil(Math.log(value) / Math.log(2)));
        }

        /**
         * @param {number} i
         * @param {number} x
         * @return {?}
         */
        function windowToSpaceWrapper(i, x) {
            var j = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
            return i > x || j > x ? 1 : i < j || j > i ? 0 : (i - j) / x;
        }

        /**
         * @return {?}
         */
        function runSteps() {
            /** @type {number} */
            var b = 0;
            /** @type {number} */
            var _len9 = arguments.length;
            /** @type {!Array} */
            var edges = Array(_len9);
            /** @type {number} */
            var _key9 = 0;
            for (; _key9 < _len9; _key9++) {
                edges[_key9] = arguments[_key9];
            }
            /** @type {boolean} */
            var _iteratorNormalCompletion3 = true;
            /** @type {boolean} */
            var o = false;
            var a = void 0;
            try {
                var $__6;
                var _iterator3 = edges[Symbol.iterator]();
                for (; !(_iteratorNormalCompletion3 = ($__6 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    /** @type {number} */
                    b = b + +$__6.value;
                }
            } catch (nativeObjectObject) {
                /** @type {boolean} */
                o = true;
                a = nativeObjectObject;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (o) {
                        throw a;
                    }
                }
            }
            return b / edges.length;
        }

        /**
         * @param {(boolean|number|string)} e
         * @param {(boolean|number|string)} s
         * @return {?}
         */
        function hash(e, s) {
            return Math.abs(e - s);
        }

        /**
         * @param {(boolean|number|string)} s
         * @param {(boolean|number|string)} e
         * @param {number} ellipseMode
         * @return {?}
         */
        function ellipse(s, e, ellipseMode) {
            return Math.abs(s - e) <= ellipseMode;
        }

        /**
         * @param {(boolean|number|string)} s
         * @param {(boolean|number|string)} e
         * @param {(boolean|number|string)} t
         * @return {?}
         */
        function doSplay(s, e, t) {
            return (t - s) / (e - s);
        }

        /**
         * @param {number} min
         * @param {number} max
         * @param {number} value
         * @return {?}
         */
        function wrappingClamp(min, max, value) {
            return value <= 0 ? min : value >= 1 ? max : min + value * (max - min);
        }

        /**
         * @param {string} year
         * @param {string} date
         * @return {?}
         */
        function getDaysInMonth(year, date) {
            var t = test(date - year, 360);
            return t > 180 && (t = Math.abs(t - 360)), t;
        }

        /**
         * @param {undefined} arg
         * @param {undefined} context
         * @return {?}
         */
        function _set(arg, context) {
            return generate(getDaysInMonth(getField(arg), getField(context)));
        }

        /**
         * @param {number} a
         * @return {?}
         */
        function makeColorMaterial(a) {
            return a - Math.floor(a);
        }

        /**
         * @param {number} i
         * @param {number} n
         * @return {?}
         */
        function test(i, n) {
            return (i % n + n) % n;
        }

        /**
         * @param {string} year
         * @param {string} month
         * @param {number} type
         * @return {?}
         */
        function parse(year, month, type) {
            return test(year + copy(0, getDaysInMonth(year, month), type), 360);
        }

        /**
         * @param {undefined} name
         * @param {undefined} obj
         * @param {undefined} media
         * @return {?}
         */
        function select(name, obj, media) {
            return generate(parse(getField(name), getField(obj), media));
        }

        /**
         * @param {?} radius
         * @return {?}
         */
        function calculate(radius) {
            return Math.pow(radius, 2.2);
        }

        /**
         * @param {?} sigma
         * @return {?}
         */
        function variance(sigma) {
            return Math.pow(sigma, 1 / 2.2);
        }

        /**
         * @param {number} s
         * @param {number} e
         * @param {number} i
         * @return {?}
         */
        function bv_trim(s, e, i) {
            if (s > e) {
                return s;
            }
            /** @type {number} */
            var j = 2 * i - e;
            /** @type {number} */
            var start = 2 * e - 3 * i;
            /** @type {number} */
            var r = s / e;
            return (j * r + start) * r * r + i;
        }

        /**
         * @param {number} problem
         * @param {number} starred
         * @return {?}
         */
        function simulatedAnnealing(problem, starred) {
            /** @type {number} */
            var log_x = problem * starred;
            return log_x * Math.exp(1 - log_x);
        }

        /**
         * @param {number} b
         * @param {number} x
         * @param {number} y
         * @return {?}
         */
        function _scaleObject(b, x, y) {
            return (y = Math.abs(y - b)) > x ? 0 : 1 - (y = y / x) * y * (3 - 2 * y);
        }

        /**
         * @param {?} s
         * @param {?} p
         * @param {?} n
         * @return {?}
         */
        function mgf(s, p, n) {
            return Math.exp(-p * Math.pow(s, n));
        }

        /**
         * @param {number} number
         * @param {?} howManyToRound
         * @return {?}
         */
        function roundAndPad(number, howManyToRound) {
            return Math.pow(4 * number * (1 - number), howManyToRound);
        }

        /**
         * @param {number} a
         * @param {(Object|number)} i
         * @param {!Object} j
         * @return {?}
         */
        function createAdderMap(a, i, j) {
            return Math.pow(i + j, i + j) / (Math.pow(i, i) * Math.pow(j, j)) * Math.pow(a, i) * Math.pow(1 - a, j);
        }

        /**
         * @param {number} max
         * @param {number} logBase
         * @param {number} opt_canModifyMin
         * @return {?}
         */
        function setupLogarithmic_(max, logBase, opt_canModifyMin) {
            /** @type {number} */
            var maxend = Math.exp(-opt_canModifyMin * max) + Math.exp(-opt_canModifyMin * logBase);
            return -Math.log(maxend) / opt_canModifyMin;
        }

        /**
         * @param {?} n
         * @param {?} p
         * @param {number} altCss
         * @return {?}
         */
        function _subt(n, p, altCss) {
            return Math.log(Math.exp(n) + Math.exp(p)) / altCss;
        }

        /**
         * @param {?} elem
         * @return {?}
         */
        function delayStateChange(elem) {
            return (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Date.now()) - elem;
        }

        /**
         * @param {number} a
         * @param {number} b
         * @return {?}
         */
        function gcd(a, b) {
            return 0 === b ? a : gcd(b, a % b);
        }

        /**
         * @param {(boolean|number|string)} range1_max
         * @param {(boolean|number|string)} range2_min
         * @param {(boolean|number|string)} _bY
         * @param {(boolean|number|string)} range2_max
         * @param {(boolean|number|string)} _aY
         * @param {(boolean|number|string)} range1_min
         * @param {(boolean|number|string)} value
         * @param {(boolean|number|string)} target_val
         * @return {?}
         */
        function extrapolate_range_clamp(range1_max, range2_min, _bY, range2_max, _aY, range1_min, value, target_val) {
            return (_bY - range1_max) * (value - _aY) + (range2_max - range2_min) * (target_val - range1_min);
        }

        Object.defineProperty(a, "__esModule", {
            value: true
        });
        self.d(a, "clamp", function () {
            return value;
        });
        self.d(a, "clamp01", function () {
            return offsetFromTag;
        });
        self.d(a, "step", function () {
            return findAnagrams;
        });
        self.d(a, "map", function () {
            return getDigit;
        });
        self.d(a, "diagonal", function () {
            return distanceBetweenTwoPoints;
        });
        self.d(a, "distance", function () {
            return invperspT;
        });
        self.d(a, "smoothStep", function () {
            return cellDblClicked;
        });
        self.d(a, "lerp", function () {
            return copy;
        });
        self.d(a, "mix", function () {
            return copy;
        });
        self.d(a, "normalize", function () {
            return l;
        });
        self.d(a, "randomFloat", function () {
            return tryFixed;
        });
        self.d(a, "randomInt", function () {
            return f;
        });
        self.d(a, "randomSign", function () {
            return setupRouteTest;
        });
        self.d(a, "wrap", function () {
            return testElemOffset;
        });
        self.d(a, "degToRad", function () {
            return generate;
        });
        self.d(a, "toRadians", function () {
            return generate;
        });
        self.d(a, "radToDeg", function () {
            return getField;
        });
        self.d(a, "toDegrees", function () {
            return getField;
        });
        self.d(a, "fuzzyFloor", function () {
            return daysFrom1970;
        });
        self.d(a, "fuzzyCeil", function () {
            return truncate;
        });
        self.d(a, "fuzzyEqual", function () {
            return x;
        });
        self.d(a, "fuzzyGreaterThan", function () {
            return wxmlToFirebase;
        });
        self.d(a, "fuzzyLessThan", function () {
            return y;
        });
        self.d(a, "maxAdd", function () {
            return enterEdge;
        });
        self.d(a, "minSub", function () {
            return T;
        });
        self.d(a, "isOdd", function () {
            return prefetchGroupsInfo;
        });
        self.d(a, "isEven", function () {
            return A;
        });
        self.d(a, "isPowerOfTwo", function () {
            return justinImageSize;
        });
        self.d(a, "closestPowerOfTwo", function () {
            return fn;
        });
        self.d(a, "nextPowerOfTwo", function () {
            return roundPow10;
        });
        self.d(a, "percent01", function () {
            return windowToSpaceWrapper;
        });
        self.d(a, "average", function () {
            return runSteps;
        });
        self.d(a, "difference", function () {
            return hash;
        });
        self.d(a, "within", function () {
            return ellipse;
        });
        self.d(a, "inverseLerp", function () {
            return doSplay;
        });
        self.d(a, "inverseMix", function () {
            return doSplay;
        });
        self.d(a, "lerpUnclamped", function () {
            return wrappingClamp;
        });
        self.d(a, "mixUnclamped", function () {
            return wrappingClamp;
        });
        self.d(a, "deltaAngleDeg", function () {
            return getDaysInMonth;
        });
        self.d(a, "deltaAngle", function () {
            return getDaysInMonth;
        });
        self.d(a, "deltaAngleRad", function () {
            return _set;
        });
        self.d(a, "fract", function () {
            return makeColorMaterial;
        });
        self.d(a, "mod", function () {
            return test;
        });
        self.d(a, "lerpAngleDeg", function () {
            return parse;
        });
        self.d(a, "lerpAngle", function () {
            return parse;
        });
        self.d(a, "lerpAngleRad", function () {
            return select;
        });
        self.d(a, "gammaToLinearSpace", function () {
            return calculate;
        });
        self.d(a, "linearToGammaSpace", function () {
            return variance;
        });
        self.d(a, "almostIdentity", function () {
            return bv_trim;
        });
        self.d(a, "impulse", function () {
            return simulatedAnnealing;
        });
        self.d(a, "cubicPulse", function () {
            return _scaleObject;
        });
        self.d(a, "expStep", function () {
            return mgf;
        });
        self.d(a, "parabola", function () {
            return roundAndPad;
        });
        self.d(a, "powerCurve", function () {
            return createAdderMap;
        });
        self.d(a, "smoothMin", function () {
            return setupLogarithmic_;
        });
        self.d(a, "smoothMax", function () {
            return _subt;
        });
        self.d(a, "deltaTime", function () {
            return delayStateChange;
        });
        self.d(a, "gcd", function () {
            return gcd;
        });
        self.d(a, "dotProduct", function () {
            return extrapolate_range_clamp;
        });
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!AudioNode} event
         * @param {!Function} expression
         * @return {undefined}
         */
        function assert(event, expression) {
            if (!(event instanceof expression)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var error = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var _chart = __webpack_require__(49);
        var _chart2 = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(_chart);
        var newOrg = function () {
            /**
             * @param {?} item
             * @param {(Array|string)} next
             * @return {undefined}
             */
            function text(item, next) {
                var newRoot = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : document.body;
                var horizontal = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
                assert(this, text);
                this.$el = newRoot;
                this.horizontal = horizontal;
                this.prev = item;
                /** @type {(Array|string)} */
                this.next = next;
                this.onSwipe = this.onSwipe.bind(this);
                this.init();
            }

            return error(text, [{
                key: "init",
                value: function () {
                    this.mc = new _chart2.default(this.$el);
                    this.mc.get("swipe").set({
                        direction: this.horizontal ? _chart2.default.DIRECTION_HORIZONTAL : _chart2.default.DIRECTION_VERTICAL
                    });
                    this.bind();
                }
            }, {
                key: "destroy",
                value: function () {
                    this.mc.destroy();
                }
            }, {
                key: "bind",
                value: function () {
                    if (this.horizontal) {
                        this.mc.on("swipeleft swiperight", this.onSwipe);
                    } else {
                        this.mc.on("swipeup swipedown", this.onSwipe);
                    }
                }
            }, {
                key: "onSwipe",
                value: function (type) {
                    return "swipeup" === type.type ? this.next() : "swipedown" === type.type ? this.prev() : "swipeleft" === type.type ? this.next() : "swiperight" === type.type && this.prev();
                }
            }]), text;
        }();
        e.default = newOrg;
    },
    function (module, exp, valueNode) {
        var ret;
        !function (window, doc, a, undefined) {
            /**
             * @param {!Function} fn
             * @param {?} timeout
             * @param {?} context
             * @return {?}
             */
            function setTimeoutContext(fn, timeout, context) {
                return setTimeout(bindFn(fn, context), timeout);
            }

            /**
             * @param {!Object} arg
             * @param {string} fn
             * @param {undefined} context
             * @return {?}
             */
            function invokeArrayArg(arg, fn, context) {
                return !!Array.isArray(arg) && (each(arg, context[fn], context), true);
            }

            /**
             * @param {!Object} array
             * @param {!Function} fn
             * @param {boolean} context
             * @return {undefined}
             */
            function each(array, fn, context) {
                var i;
                if (array) {
                    if (array.forEach) {
                        array.forEach(fn, context);
                    } else {
                        if (array.length !== undefined) {
                            /** @type {number} */
                            i = 0;
                            for (; i < array.length;) {
                                fn.call(context, array[i], i, array);
                                i++;
                            }
                        } else {
                            for (i in array) {
                                if (array.hasOwnProperty(i)) {
                                    fn.call(context, array[i], i, array);
                                }
                            }
                        }
                    }
                }
            }

            /**
             * @param {!Function} callback
             * @param {string} fn
             * @param {string} deprecationWarning
             * @return {?}
             */
            function deprecate(callback, fn, deprecationWarning) {
                /** @type {string} */
                var item = "DEPRECATED METHOD: " + fn + "\n" + deprecationWarning + " AT \n";
                return function () {
                    /** @type {!Error} */
                    var e = new Error("get-stack-trace");
                    /** @type {string} */
                    var i = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
                    /** @type {function(this:Console, ...*): undefined} */
                    var func = window.console && (window.console.warn || window.console.log);
                    return func && func.call(window.console, item, i), callback.apply(this, arguments);
                };
            }

            /**
             * @param {!Function} child
             * @param {!Function} base
             * @param {?} prototype
             * @return {undefined}
             */
            function inherit(child, base, prototype) {
                var childP;
                var baseP = base.prototype;
                /** @type {!Object} */
                childP = child.prototype = Object.create(baseP);
                /** @type {!Function} */
                childP.constructor = child;
                childP._super = baseP;
                if (prototype) {
                    assign(childP, prototype);
                }
            }

            /**
             * @param {!Function} fn
             * @param {?} context
             * @return {?}
             */
            function bindFn(fn, context) {
                return function () {
                    return fn.apply(context, arguments);
                };
            }

            /**
             * @param {!Function} val
             * @param {!Array} args
             * @return {?}
             */
            function boolOrFn(val, args) {
                return typeof val == string ? val.apply(args ? args[0] || undefined : undefined, args) : val;
            }

            /**
             * @param {!Array} val1
             * @param {?} val2
             * @return {?}
             */
            function ifUndefined(val1, val2) {
                return val1 === undefined ? val2 : val1;
            }

            /**
             * @param {string} target
             * @param {!Object} data
             * @param {string} fn
             * @return {undefined}
             */
            function addEventListeners(target, data, fn) {
                each($(data), function (e) {
                    target.addEventListener(e, fn, false);
                });
            }

            /**
             * @param {!Object} events
             * @param {!Object} target
             * @param {!Object} callback
             * @return {undefined}
             */
            function removeEventListeners(events, target, callback) {
                each($(target), function (e) {
                    events.removeEventListener(e, callback, false);
                });
            }

            /**
             * @param {!Object} parent
             * @param {!Object} node
             * @return {?}
             */
            function hasParent(parent, node) {
                for (; parent;) {
                    if (parent == node) {
                        return true;
                    }
                    parent = parent.parentNode;
                }
                return false;
            }

            /**
             * @param {string} str
             * @param {string} find
             * @return {?}
             */
            function inStr(str, find) {
                return str.indexOf(find) > -1;
            }

            /**
             * @param {!Object} s
             * @return {?}
             */
            function $(s) {
                return s.trim().split(/\s+/g);
            }

            /**
             * @param {!Array} array
             * @param {!Object} object
             * @param {string} value
             * @return {?}
             */
            function inArray(array, object, value) {
                if (array.indexOf && !value) {
                    return array.indexOf(object);
                }
                /** @type {number} */
                var i = 0;
                for (; i < array.length;) {
                    if (value && array[i][value] == object || !value && array[i] === object) {
                        return i;
                    }
                    i++;
                }
                return -1;
            }

            /**
             * @param {?} store
             * @return {?}
             */
            function toArray(store) {
                return Array.prototype.slice.call(store, 0);
            }

            /**
             * @param {!NodeList} deps
             * @param {string} d
             * @param {boolean} e
             * @return {?}
             */
            function build(deps, d, e) {
                /** @type {!Array} */
                var t = [];
                /** @type {!Array} */
                var values = [];
                /** @type {number} */
                var i = 0;
                for (; i < deps.length;) {
                    var val = d ? deps[i][d] : deps[i];
                    if (inArray(values, val) < 0) {
                        t.push(deps[i]);
                    }
                    values[i] = val;
                    i++;
                }
                return e && (t = d ? t.sort(function (BBoxMin, pt) {
                    return BBoxMin[d] > pt[d];
                }) : t.sort()), t;
            }

            /**
             * @param {!Object} name
             * @param {string} property
             * @return {?}
             */
            function prefixed(name, property) {
                var prefix;
                var prop;
                var id = property[0].toUpperCase() + property.slice(1);
                /** @type {number} */
                var i = 0;
                for (; i < VENDOR_PREFIXES.length;) {
                    if (prefix = VENDOR_PREFIXES[i], (prop = prefix ? prefix + id : property) in name) {
                        return prop;
                    }
                    i++;
                }
                return undefined;
            }

            /**
             * @return {?}
             */
            function uniqueId() {
                return Mt++;
            }

            /**
             * @param {!Node} element
             * @return {?}
             */
            function getWindowForElement(element) {
                var doc = element.ownerDocument || element;
                return doc.defaultView || doc.parentWindow || window;
            }

            /**
             * @param {!Object} manager
             * @param {!Function} callback
             * @return {undefined}
             */
            function Input(manager, callback) {
                var thisHandler = this;
                /** @type {!Object} */
                this.manager = manager;
                /** @type {!Function} */
                this.callback = callback;
                this.element = manager.element;
                this.target = manager.options.inputTarget;
                /**
                 * @param {undefined} e
                 * @return {undefined}
                 */
                this.domHandler = function (e) {
                    if (boolOrFn(manager.options.enable, [manager])) {
                        thisHandler.handler(e);
                    }
                };
                this.init();
            }

            /**
             * @param {!Object} manager
             * @return {?}
             */
            function createInputInstance(manager) {
                var ua = manager.options.inputClass;
                return new (ua || (isBrowser ? PointerEventInput : isWorker ? TouchInput : IS_TOUCH_ENABLED ? TouchMouseInput : MouseInput))(manager, inputHandler);
            }

            /**
             * @param {?} manager
             * @param {string} eventType
             * @param {!Object} input
             * @return {undefined}
             */
            function inputHandler(manager, eventType, input) {
                var maxNrStages = input.pointers.length;
                var nrStages = input.changedPointers.length;
                /** @type {(boolean|number)} */
                var o = eventType & INPUT_START && maxNrStages - nrStages == 0;
                /** @type {(boolean|number)} */
                var a = eventType & (INPUT_END | INPUT_CANCEL) && maxNrStages - nrStages == 0;
                /** @type {boolean} */
                input.isFirst = !!o;
                /** @type {boolean} */
                input.isFinal = !!a;
                if (o) {
                    manager.session = {};
                }
                /** @type {string} */
                input.eventType = eventType;
                computeInputData(manager, input);
                manager.emit("hammer.input", input);
                manager.recognize(input);
                /** @type {!Object} */
                manager.session.prevInput = input;
            }

            /**
             * @param {!Object} manager
             * @param {!Object} input
             * @return {undefined}
             */
            function computeInputData(manager, input) {
                var session = manager.session;
                var pointers = input.pointers;
                var pointersLength = pointers.length;
                if (!session.firstInput) {
                    session.firstInput = simpleCloneInputData(input);
                }
                if (pointersLength > 1 && !session.firstMultiple) {
                    session.firstMultiple = simpleCloneInputData(input);
                } else {
                    if (1 === pointersLength) {
                        /** @type {boolean} */
                        session.firstMultiple = false;
                    }
                }
                var firstInput = session.firstInput;
                var firstMultiple = session.firstMultiple;
                var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
                var center = input.center = getCenter(pointers);
                /** @type {number} */
                input.timeStamp = now();
                /** @type {number} */
                input.deltaTime = input.timeStamp - firstInput.timeStamp;
                input.angle = getAngle(offsetCenter, center);
                input.distance = getDistance(offsetCenter, center);
                computeDeltaXY(session, input);
                input.offsetDirection = getDirection(input.deltaX, input.deltaY);
                var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
                input.overallVelocityX = overallVelocity.x;
                input.overallVelocityY = overallVelocity.y;
                input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
                input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
                input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
                input.maxPointers = session.prevInput ? input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers : input.pointers.length;
                computeIntervalInputData(session, input);
                var target = manager.element;
                if (hasParent(input.srcEvent.target, target)) {
                    target = input.srcEvent.target;
                }
                input.target = target;
            }

            /**
             * @param {?} session
             * @param {!Object} input
             * @return {undefined}
             */
            function computeDeltaXY(session, input) {
                var c = input.center;
                var b = session.offsetDelta || {};
                var xhair = session.prevDelta || {};
                var prevInput = session.prevInput || {};
                if (!(input.eventType !== INPUT_START && prevInput.eventType !== INPUT_END)) {
                    xhair = session.prevDelta = {
                        x: prevInput.deltaX || 0,
                        y: prevInput.deltaY || 0
                    };
                    b = session.offsetDelta = {
                        x: c.x,
                        y: c.y
                    };
                }
                input.deltaX = xhair.x + (c.x - b.x);
                input.deltaY = xhair.y + (c.y - b.y);
            }

            /**
             * @param {!Object} session
             * @param {!Object} input
             * @return {undefined}
             */
            function computeIntervalInputData(session, input) {
                var velocity;
                var velocityX;
                var velocityY;
                var direction;
                var last = session.lastInterval || input;
                /** @type {number} */
                var deltaTime = input.timeStamp - last.timeStamp;
                if (input.eventType != INPUT_CANCEL && (deltaTime > CAL_INTERVAL || last.velocity === undefined)) {
                    /** @type {number} */
                    var deltaX = input.deltaX - last.deltaX;
                    /** @type {number} */
                    var deltaY = input.deltaY - last.deltaY;
                    var v = getVelocity(deltaTime, deltaX, deltaY);
                    velocityX = v.x;
                    velocityY = v.y;
                    velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
                    direction = getDirection(deltaX, deltaY);
                    /** @type {!Object} */
                    session.lastInterval = input;
                } else {
                    velocity = last.velocity;
                    velocityX = last.velocityX;
                    velocityY = last.velocityY;
                    direction = last.direction;
                }
                input.velocity = velocity;
                input.velocityX = velocityX;
                input.velocityY = velocityY;
                input.direction = direction;
            }

            /**
             * @param {!Object} input
             * @return {?}
             */
            function simpleCloneInputData(input) {
                /** @type {!Array} */
                var pointers = [];
                /** @type {number} */
                var i = 0;
                for (; i < input.pointers.length;) {
                    pointers[i] = {
                        clientX: round(input.pointers[i].clientX),
                        clientY: round(input.pointers[i].clientY)
                    };
                    i++;
                }
                return {
                    timeStamp: now(),
                    pointers: pointers,
                    center: getCenter(pointers),
                    deltaX: input.deltaX,
                    deltaY: input.deltaY
                };
            }

            /**
             * @param {!Array} pointers
             * @return {?}
             */
            function getCenter(pointers) {
                var pointersLength = pointers.length;
                if (1 === pointersLength) {
                    return {
                        x: round(pointers[0].clientX),
                        y: round(pointers[0].clientY)
                    };
                }
                /** @type {number} */
                var x = 0;
                /** @type {number} */
                var y = 0;
                /** @type {number} */
                var i = 0;
                for (; i < pointersLength;) {
                    x = x + pointers[i].clientX;
                    y = y + pointers[i].clientY;
                    i++;
                }
                return {
                    x: round(x / pointersLength),
                    y: round(y / pointersLength)
                };
            }

            /**
             * @param {number} deltaTime
             * @param {number} x
             * @param {number} y
             * @return {?}
             */
            function getVelocity(deltaTime, x, y) {
                return {
                    x: x / deltaTime || 0,
                    y: y / deltaTime || 0
                };
            }

            /**
             * @param {number} x
             * @param {number} y
             * @return {?}
             */
            function getDirection(x, y) {
                return x === y ? DIRECTION_NONE : abs(x) >= abs(y) ? x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
            }

            /**
             * @param {?} p1
             * @param {?} p2
             * @param {!Array} props
             * @return {?}
             */
            function getDistance(p1, p2, props) {
                if (!props) {
                    /** @type {!Array} */
                    props = PROPS_XY;
                }
                /** @type {number} */
                var lightI = p2[props[0]] - p1[props[0]];
                /** @type {number} */
                var lightJ = p2[props[1]] - p1[props[1]];
                return Math.sqrt(lightI * lightI + lightJ * lightJ);
            }

            /**
             * @param {?} p1
             * @param {?} p2
             * @param {!Array} props
             * @return {?}
             */
            function getAngle(p1, p2, props) {
                if (!props) {
                    /** @type {!Array} */
                    props = PROPS_XY;
                }
                /** @type {number} */
                var mouseStartXFromCentre = p2[props[0]] - p1[props[0]];
                /** @type {number} */
                var trueAnomalyY = p2[props[1]] - p1[props[1]];
                return 180 * Math.atan2(trueAnomalyY, mouseStartXFromCentre) / Math.PI;
            }

            /**
             * @param {!Object} start
             * @param {!Object} end
             * @return {?}
             */
            function getRotation(start, end) {
                return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
            }

            /**
             * @param {!Object} start
             * @param {!Object} end
             * @return {?}
             */
            function getScale(start, end) {
                return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
            }

            /**
             * @return {undefined}
             */
            function MouseInput() {
                /** @type {string} */
                this.evEl = MOUSE_ELEMENT_EVENTS;
                /** @type {string} */
                this.evWin = POINTER_WINDOW_EVENTS;
                /** @type {boolean} */
                this.pressed = false;
                Input.apply(this, arguments);
            }

            /**
             * @return {undefined}
             */
            function PointerEventInput() {
                this.evEl = POINTER_ELEMENT_EVENTS;
                this.evWin = MOUSE_WINDOW_EVENTS;
                Input.apply(this, arguments);
                /** @type {!Array} */
                this.store = this.manager.session.pointerEvents = [];
            }

            /**
             * @return {undefined}
             */
            function SingleTouchInput() {
                /** @type {string} */
                this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
                /** @type {string} */
                this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
                /** @type {boolean} */
                this.started = false;
                Input.apply(this, arguments);
            }

            /**
             * @param {!Event} e
             * @param {number} type
             * @return {?}
             */
            function f(e, type) {
                var result = toArray(e.touches);
                var i = toArray(e.changedTouches);
                return type & (INPUT_END | INPUT_CANCEL) && (result = build(result.concat(i), "identifier", true)), [result, i];
            }

            /**
             * @return {undefined}
             */
            function TouchInput() {
                /** @type {string} */
                this.evTarget = TOUCH_TARGET_EVENTS;
                this.targetIds = {};
                Input.apply(this, arguments);
            }

            /**
             * @param {!Event} e
             * @param {number} type
             * @return {?}
             */
            function getTouches(e, type) {
                var allTouches = toArray(e.touches);
                var targetIds = this.targetIds;
                if (type & (INPUT_START | INPUT_MOVE) && 1 === allTouches.length) {
                    return targetIds[allTouches[0].identifier] = true, [allTouches, allTouches];
                }
                var i;
                var columns;
                var args = toArray(e.changedTouches);
                /** @type {!Array} */
                var path = [];
                var target = this.target;
                if (columns = allTouches.filter(function (touch) {
                        return hasParent(touch.target, target);
                    }), type === INPUT_START) {
                    /** @type {number} */
                    i = 0;
                    for (; i < columns.length;) {
                        /** @type {boolean} */
                        targetIds[columns[i].identifier] = true;
                        i++;
                    }
                }
                /** @type {number} */
                i = 0;
                for (; i < args.length;) {
                    if (targetIds[args[i].identifier]) {
                        path.push(args[i]);
                    }
                    if (type & (INPUT_END | INPUT_CANCEL)) {
                        delete targetIds[args[i].identifier];
                    }
                    i++;
                }
                return path.length ? [build(columns.concat(path), "identifier", true), path] : void 0;
            }

            /**
             * @return {undefined}
             */
            function TouchMouseInput() {
                Input.apply(this, arguments);
                var handler = bindFn(this.handler, this);
                this.touch = new TouchInput(this.manager, handler);
                this.mouse = new MouseInput(this.manager, handler);
                /** @type {null} */
                this.primaryTouch = null;
                /** @type {!Array} */
                this.lastTouches = [];
            }

            /**
             * @param {number} eventType
             * @param {!Object} eventData
             * @return {undefined}
             */
            function recordTouches(eventType, eventData) {
                if (eventType & INPUT_START) {
                    this.primaryTouch = eventData.changedPointers[0].identifier;
                    setLastTouch.call(this, eventData);
                } else {
                    if (eventType & (INPUT_END | INPUT_CANCEL)) {
                        setLastTouch.call(this, eventData);
                    }
                }
            }

            /**
             * @param {!Object} eventData
             * @return {undefined}
             */
            function setLastTouch(eventData) {
                var touch = eventData.changedPointers[0];
                if (touch.identifier === this.primaryTouch) {
                    var obj = {
                        x: touch.clientX,
                        y: touch.clientY
                    };
                    this.lastTouches.push(obj);
                    var c = this.lastTouches;
                    /**
                     * @return {undefined}
                     */
                    var removeLastTouch = function () {
                        var i = c.indexOf(obj);
                        if (i > -1) {
                            c.splice(i, 1);
                        }
                    };
                    setTimeout(removeLastTouch, ngiScroll_timeout);
                }
            }

            /**
             * @param {!Object} eventData
             * @return {?}
             */
            function isSyntheticEvent(eventData) {
                var x = eventData.srcEvent.clientX;
                var y = eventData.srcEvent.clientY;
                /** @type {number} */
                var i = 0;
                for (; i < this.lastTouches.length; i++) {
                    var t = this.lastTouches[i];
                    /** @type {number} */
                    var outerR = Math.abs(x - t.x);
                    /** @type {number} */
                    var outerG = Math.abs(y - t.y);
                    if (outerR <= whiteTolerance && outerG <= whiteTolerance) {
                        return true;
                    }
                }
                return false;
            }

            /**
             * @param {!Object} manager
             * @param {undefined} value
             * @return {undefined}
             */
            function TouchAction(manager, value) {
                /** @type {!Object} */
                this.manager = manager;
                this.set(value);
            }

            /**
             * @param {string} actions
             * @return {?}
             */
            function cleanTouchActions(actions) {
                if (inStr(actions, TOUCH_ACTION_NONE)) {
                    return TOUCH_ACTION_NONE;
                }
                var hasPanX = inStr(actions, i);
                var hasPanY = inStr(actions, value);
                return hasPanX && hasPanY ? TOUCH_ACTION_NONE : hasPanX || hasPanY ? hasPanX ? i : value : inStr(actions, TOUCH_ACTION_MANIPULATION) ? TOUCH_ACTION_MANIPULATION : peg$c206;
            }

            /**
             * @param {number} options
             * @return {undefined}
             */
            function Recognizer(options) {
                this.options = assign({}, this.defaults, options || {});
                this.id = uniqueId();
                /** @type {null} */
                this.manager = null;
                this.options.enable = ifUndefined(this.options.enable, true);
                /** @type {number} */
                this.state = STATE_POSSIBLE;
                this.simultaneous = {};
                /** @type {!Array} */
                this.requireFail = [];
            }

            /**
             * @param {number} state
             * @return {?}
             */
            function stateStr(state) {
                return state & STATE_CANCELLED ? "cancel" : state & STATE_ENDED ? "end" : state & STATE_CHANGED ? "move" : state & STATE_BEGAN ? "start" : "";
            }

            /**
             * @param {number} direction
             * @return {?}
             */
            function directionStr(direction) {
                return direction == DIRECTION_DOWN ? "down" : direction == DIRECTION_UP ? "up" : direction == DIRECTION_LEFT ? "left" : direction == DIRECTION_RIGHT ? "right" : "";
            }

            /**
             * @param {!Object} arg
             * @param {!Window} task
             * @return {?}
             */
            function getRecognizerByNameIfManager(arg, task) {
                var context = task.manager;
                return context ? context.get(arg) : arg;
            }

            /**
             * @return {undefined}
             */
            function AttrRecognizer() {
                Recognizer.apply(this, arguments);
            }

            /**
             * @return {undefined}
             */
            function PanRecognizer() {
                AttrRecognizer.apply(this, arguments);
                /** @type {null} */
                this.pX = null;
                /** @type {null} */
                this.pY = null;
            }

            /**
             * @return {undefined}
             */
            function PinchRecognizer() {
                AttrRecognizer.apply(this, arguments);
            }

            /**
             * @return {undefined}
             */
            function PressRecognizer() {
                Recognizer.apply(this, arguments);
                /** @type {null} */
                this._timer = null;
                /** @type {null} */
                this._input = null;
            }

            /**
             * @return {undefined}
             */
            function RotateRecognizer() {
                AttrRecognizer.apply(this, arguments);
            }

            /**
             * @return {undefined}
             */
            function SwipeRecognizer() {
                AttrRecognizer.apply(this, arguments);
            }

            /**
             * @return {undefined}
             */
            function TapRecognizer() {
                Recognizer.apply(this, arguments);
                /** @type {boolean} */
                this.pTime = false;
                /** @type {boolean} */
                this.pCenter = false;
                /** @type {null} */
                this._timer = null;
                /** @type {null} */
                this._input = null;
                /** @type {number} */
                this.count = 0;
            }

            /**
             * @param {string} element
             * @param {!Object} options
             * @return {?}
             */
            function Hammer(element, options) {
                return options = options || {}, options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset), new Manager(element, options);
            }

            /**
             * @param {!Node} element
             * @param {number} options
             * @return {undefined}
             */
            function Manager(element, options) {
                this.options = assign({}, Hammer.defaults, options || {});
                this.options.inputTarget = this.options.inputTarget || element;
                this.handlers = {};
                this.session = {};
                /** @type {!Array} */
                this.recognizers = [];
                this.oldCssProps = {};
                /** @type {!Node} */
                this.element = element;
                this.input = createInputInstance(this);
                this.touchAction = new TouchAction(this, this.options.touchAction);
                toggleCssProps(this, true);
                each(this.options.recognizers, function (item) {
                    var recognizer = this.add(new item[0](item[1]));
                    if (item[2]) {
                        recognizer.recognizeWith(item[2]);
                    }
                    if (item[3]) {
                        recognizer.requireFailure(item[3]);
                    }
                }, this);
            }

            /**
             * @param {!Object} manager
             * @param {boolean} add
             * @return {undefined}
             */
            function toggleCssProps(manager, add) {
                var element = manager.element;
                if (element.style) {
                    var prop;
                    each(manager.options.cssProps, function (cond, name) {
                        prop = prefixed(element.style, name);
                        if (add) {
                            manager.oldCssProps[prop] = element.style[prop];
                            /** @type {!Object} */
                            element.style[prop] = cond;
                        } else {
                            element.style[prop] = manager.oldCssProps[prop] || "";
                        }
                    });
                    if (!add) {
                        manager.oldCssProps = {};
                    }
                }
            }

            /**
             * @param {string} type
             * @param {!Object} data
             * @return {undefined}
             */
            function trigger(type, data) {
                /** @type {(Event|null)} */
                var event = doc.createEvent("Event");
                event.initEvent(type, true, true);
                /** @type {!Object} */
                event.gesture = data;
                data.target.dispatchEvent(event);
            }

            var assign;
            /** @type {!Array} */
            var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
            /** @type {!Element} */
            var TEST_ELEMENT = doc.createElement("div");
            /** @type {string} */
            var string = "function";
            /** @type {function(?): number} */
            var round = Math.round;
            /** @type {function(?): number} */
            var abs = Math.abs;
            /** @type {function(): number} */
            var now = Date.now;
            /** @type {!Function} */
            assign = "function" != typeof Object.assign ? function (target) {
                if (target === undefined || null === target) {
                    throw new TypeError("Cannot convert undefined or null to object");
                }
                /** @type {!Object} */
                var obj = Object(target);
                /** @type {number} */
                var i = 1;
                for (; i < arguments.length; i++) {
                    var val = arguments[i];
                    if (val !== undefined && null !== val) {
                        var i;
                        for (i in val) {
                            if (val.hasOwnProperty(i)) {
                                obj[i] = val[i];
                            }
                        }
                    }
                }
                return obj;
            } : Object.assign;
            var extend = deprecate(function (stats, tiles, optional) {
                /** @type {!Array<string>} */
                var rows = Object.keys(tiles);
                /** @type {number} */
                var i = 0;
                for (; i < rows.length;) {
                    if (!optional || optional && stats[rows[i]] === undefined) {
                        stats[rows[i]] = tiles[rows[i]];
                    }
                    i++;
                }
                return stats;
            }, "extend", "Use `assign`.");
            var merge = deprecate(function (t, e) {
                return extend(t, e, true);
            }, "merge", "Use `assign`.");
            /** @type {number} */
            var Mt = 1;
            /** @type {!RegExp} */
            var FIREFOX_LINUX = /mobile|tablet|ip(ad|hone|od)|android/i;
            /** @type {boolean} */
            var IS_TOUCH_ENABLED = "ontouchstart" in window;
            /** @type {boolean} */
            var isBrowser = prefixed(window, "PointerEvent") !== undefined;
            /** @type {boolean} */
            var isWorker = IS_TOUCH_ENABLED && FIREFOX_LINUX.test(navigator.userAgent);
            /** @type {number} */
            var CAL_INTERVAL = 25;
            /** @type {number} */
            var INPUT_START = 1;
            /** @type {number} */
            var INPUT_MOVE = 2;
            /** @type {number} */
            var INPUT_END = 4;
            /** @type {number} */
            var INPUT_CANCEL = 8;
            /** @type {number} */
            var DIRECTION_NONE = 1;
            /** @type {number} */
            var DIRECTION_LEFT = 2;
            /** @type {number} */
            var DIRECTION_RIGHT = 4;
            /** @type {number} */
            var DIRECTION_UP = 8;
            /** @type {number} */
            var DIRECTION_DOWN = 16;
            /** @type {number} */
            var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
            /** @type {number} */
            var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
            /** @type {number} */
            var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
            /** @type {!Array} */
            var PROPS_XY = ["x", "y"];
            /** @type {!Array} */
            var PROPS_CLIENT_XY = ["clientX", "clientY"];
            Input.prototype = {
                handler: function () {
                },
                init: function () {
                    if (this.evEl) {
                        addEventListeners(this.element, this.evEl, this.domHandler);
                    }
                    if (this.evTarget) {
                        addEventListeners(this.target, this.evTarget, this.domHandler);
                    }
                    if (this.evWin) {
                        addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                    }
                },
                destroy: function () {
                    if (this.evEl) {
                        removeEventListeners(this.element, this.evEl, this.domHandler);
                    }
                    if (this.evTarget) {
                        removeEventListeners(this.target, this.evTarget, this.domHandler);
                    }
                    if (this.evWin) {
                        removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
                    }
                }
            };
            var MOUSE_INPUT_MAP = {
                mousedown: INPUT_START,
                mousemove: INPUT_MOVE,
                mouseup: INPUT_END
            };
            /** @type {string} */
            var MOUSE_ELEMENT_EVENTS = "mousedown";
            /** @type {string} */
            var POINTER_WINDOW_EVENTS = "mousemove mouseup";
            inherit(MouseInput, Input, {
                handler: function (value) {
                    var eventType = MOUSE_INPUT_MAP[value.type];
                    if (eventType & INPUT_START && 0 === value.button) {
                        /** @type {boolean} */
                        this.pressed = true;
                    }
                    if (eventType & INPUT_MOVE && 1 !== value.which) {
                        /** @type {number} */
                        eventType = INPUT_END;
                    }
                    if (this.pressed) {
                        if (eventType & INPUT_END) {
                            /** @type {boolean} */
                            this.pressed = false;
                        }
                        this.callback(this.manager, eventType, {
                            pointers: [value],
                            changedPointers: [value],
                            pointerType: "mouse",
                            srcEvent: value
                        });
                    }
                }
            });
            var POINTER_INPUT_MAP = {
                pointerdown: INPUT_START,
                pointermove: INPUT_MOVE,
                pointerup: INPUT_END,
                pointercancel: INPUT_CANCEL,
                pointerout: INPUT_CANCEL
            };
            var IE10_POINTER_TYPE_ENUM = {
                2: "touch",
                3: "pen",
                4: "mouse",
                5: "kinect"
            };
            /** @type {string} */
            var POINTER_ELEMENT_EVENTS = "pointerdown";
            /** @type {string} */
            var MOUSE_WINDOW_EVENTS = "pointermove pointerup pointercancel";
            if (window.MSPointerEvent && !window.PointerEvent) {
                /** @type {string} */
                POINTER_ELEMENT_EVENTS = "MSPointerDown";
                /** @type {string} */
                MOUSE_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
            }
            inherit(PointerEventInput, Input, {
                handler: function (a) {
                    var store = this.store;
                    /** @type {boolean} */
                    var i = false;
                    var eventTypeNormalized = a.type.toLowerCase().replace("ms", "");
                    var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
                    var INPUT_TYPE_TOUCH = IE10_POINTER_TYPE_ENUM[a.pointerType] || a.pointerType;
                    /** @type {boolean} */
                    var isTouch = "touch" == INPUT_TYPE_TOUCH;
                    var storeIndex = inArray(store, a.pointerId, "pointerId");
                    if (eventType & INPUT_START && (0 === a.button || isTouch)) {
                        if (storeIndex < 0) {
                            store.push(a);
                            /** @type {number} */
                            storeIndex = store.length - 1;
                        }
                    } else {
                        if (eventType & (INPUT_END | INPUT_CANCEL)) {
                            /** @type {boolean} */
                            i = true;
                        }
                    }
                    if (!(storeIndex < 0)) {
                        /** @type {!Object} */
                        store[storeIndex] = a;
                        this.callback(this.manager, eventType, {
                            pointers: store,
                            changedPointers: [a],
                            pointerType: INPUT_TYPE_TOUCH,
                            srcEvent: a
                        });
                        if (i) {
                            store.splice(storeIndex, 1);
                        }
                    }
                }
            });
            var TOUCH_INPUT_MAP = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            /** @type {string} */
            var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
            /** @type {string} */
            var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
            inherit(SingleTouchInput, Input, {
                handler: function (name) {
                    var type = TOUCH_INPUT_MAP[name.type];
                    if (type === INPUT_START && (this.started = true), this.started) {
                        var touches = f.call(this, name, type);
                        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length == 0) {
                            /** @type {boolean} */
                            this.started = false;
                        }
                        this.callback(this.manager, type, {
                            pointers: touches[0],
                            changedPointers: touches[1],
                            pointerType: "touch",
                            srcEvent: name
                        });
                    }
                }
            });
            var map = {
                touchstart: INPUT_START,
                touchmove: INPUT_MOVE,
                touchend: INPUT_END,
                touchcancel: INPUT_CANCEL
            };
            /** @type {string} */
            var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
            inherit(TouchInput, Input, {
                handler: function (v) {
                    var type = map[v.type];
                    var touches = getTouches.call(this, v, type);
                    if (touches) {
                        this.callback(this.manager, type, {
                            pointers: touches[0],
                            changedPointers: touches[1],
                            pointerType: "touch",
                            srcEvent: v
                        });
                    }
                }
            });
            /** @type {number} */
            var ngiScroll_timeout = 2500;
            /** @type {number} */
            var whiteTolerance = 25;
            inherit(TouchMouseInput, Input, {
                handler: function (type, name, e) {
                    /** @type {boolean} */
                    var n = "touch" == e.pointerType;
                    /** @type {boolean} */
                    var isMouse = "mouse" == e.pointerType;
                    if (!(isMouse && e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents)) {
                        if (n) {
                            recordTouches.call(this, name, e);
                        } else {
                            if (isMouse && isSyntheticEvent.call(this, e)) {
                                return;
                            }
                        }
                        this.callback(type, name, e);
                    }
                },
                destroy: function () {
                    this.touch.destroy();
                    this.mouse.destroy();
                }
            });
            var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
            /** @type {boolean} */
            var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
            /** @type {string} */
            var peg$c206 = "auto";
            /** @type {string} */
            var TOUCH_ACTION_MANIPULATION = "manipulation";
            /** @type {string} */
            var TOUCH_ACTION_NONE = "none";
            /** @type {string} */
            var i = "pan-x";
            /** @type {string} */
            var value = "pan-y";
            var TOUCH_ACTION_MAP = function () {
                if (!NATIVE_TOUCH_ACTION) {
                    return false;
                }
                var ColumnsPlugins = {};
                /** @type {(function(this:CSSInterface, string, string=): boolean|null)} */
                var e = window.CSS && window.CSS.supports;
                return ["auto", "manipulation", "pan-y", "pan-x", "pan-x pan-y", "none"].forEach(function (val) {
                    /** @type {boolean} */
                    ColumnsPlugins[val] = !e || window.CSS.supports("touch-action", val);
                }), ColumnsPlugins;
            }();
            TouchAction.prototype = {
                set: function (value) {
                    if ("compute" == value) {
                        value = this.compute();
                    }
                    if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
                        /** @type {!Object} */
                        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
                    }
                    this.actions = value.toLowerCase().trim();
                },
                update: function () {
                    this.set(this.manager.options.touchAction);
                },
                compute: function () {
                    /** @type {!Array} */
                    var sortedFolderIds = [];
                    return each(this.manager.recognizers, function (recognizer) {
                        if (boolOrFn(recognizer.options.enable, [recognizer])) {
                            sortedFolderIds = sortedFolderIds.concat(recognizer.getTouchAction());
                        }
                    }), cleanTouchActions(sortedFolderIds.join(" "));
                },
                preventDefaults: function (input) {
                    var srcEvent = input.srcEvent;
                    var direction = input.offsetDirection;
                    if (this.manager.session.prevented) {
                        return void srcEvent.preventDefault();
                    }
                    var actions = this.actions;
                    var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
                    var hasPanY = inStr(actions, value) && !TOUCH_ACTION_MAP[value];
                    var hasPanX = inStr(actions, i) && !TOUCH_ACTION_MAP[i];
                    if (hasNone) {
                        /** @type {boolean} */
                        var taskId = 1 === input.pointers.length;
                        /** @type {boolean} */
                        var start = input.distance < 2;
                        /** @type {boolean} */
                        var end = input.deltaTime < 250;
                        if (taskId && start && end) {
                            return;
                        }
                    }
                    return hasPanX && hasPanY ? void 0 : hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL ? this.preventSrc(srcEvent) : void 0;
                },
                preventSrc: function (srcEvent) {
                    /** @type {boolean} */
                    this.manager.session.prevented = true;
                    srcEvent.preventDefault();
                }
            };
            /** @type {number} */
            var STATE_POSSIBLE = 1;
            /** @type {number} */
            var STATE_BEGAN = 2;
            /** @type {number} */
            var STATE_CHANGED = 4;
            /** @type {number} */
            var STATE_ENDED = 8;
            /** @type {number} */
            var STATE_RECOGNIZED = STATE_ENDED;
            /** @type {number} */
            var STATE_CANCELLED = 16;
            Recognizer.prototype = {
                defaults: {},
                set: function (value) {
                    return assign(this.options, value), this.manager && this.manager.touchAction.update(), this;
                },
                recognizeWith: function (otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) {
                        return this;
                    }
                    var simultaneous = this.simultaneous;
                    return otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this), simultaneous[otherRecognizer.id] || (simultaneous[otherRecognizer.id] = otherRecognizer, otherRecognizer.recognizeWith(this)), this;
                },
                dropRecognizeWith: function (otherRecognizer) {
                    return invokeArrayArg(otherRecognizer, "dropRecognizeWith", this) ? this : (otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this), delete this.simultaneous[otherRecognizer.id], this);
                },
                requireFailure: function (value) {
                    if (invokeArrayArg(value, "requireFailure", this)) {
                        return this;
                    }
                    var values = this.requireFail;
                    return value = getRecognizerByNameIfManager(value, this), -1 === inArray(values, value) && (values.push(value), value.requireFailure(this)), this;
                },
                dropRequireFailure: function (otherRecognizer) {
                    if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) {
                        return this;
                    }
                    otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
                    var index = inArray(this.requireFail, otherRecognizer);
                    return index > -1 && this.requireFail.splice(index, 1), this;
                },
                hasRequireFailures: function () {
                    return this.requireFail.length > 0;
                },
                canRecognizeWith: function (otherRecognizer) {
                    return !!this.simultaneous[otherRecognizer.id];
                },
                emit: function (input) {
                    /**
                     * @param {undefined} name
                     * @return {undefined}
                     */
                    function emit(name) {
                        that.manager.emit(name, input);
                    }

                    var that = this;
                    var state = this.state;
                    if (state < STATE_ENDED) {
                        emit(that.options.event + stateStr(state));
                    }
                    emit(that.options.event);
                    if (input.additionalEvent) {
                        emit(input.additionalEvent);
                    }
                    if (state >= STATE_ENDED) {
                        emit(that.options.event + stateStr(state));
                    }
                },
                tryEmit: function (input) {
                    if (this.canEmit()) {
                        return this.emit(input);
                    }
                    /** @type {number} */
                    this.state = 32;
                },
                canEmit: function () {
                    /** @type {number} */
                    var i = 0;
                    for (; i < this.requireFail.length;) {
                        if (!(this.requireFail[i].state & (32 | STATE_POSSIBLE))) {
                            return false;
                        }
                        i++;
                    }
                    return true;
                },
                recognize: function (inputData) {
                    var inputDataClone = assign({}, inputData);
                    if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
                        return this.reset(), void(this.state = 32);
                    }
                    if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | 32)) {
                        /** @type {number} */
                        this.state = STATE_POSSIBLE;
                    }
                    this.state = this.process(inputDataClone);
                    if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
                        this.tryEmit(inputDataClone);
                    }
                },
                process: function (input) {
                },
                getTouchAction: function () {
                },
                reset: function () {
                }
            };
            inherit(AttrRecognizer, Recognizer, {
                defaults: {
                    pointers: 1
                },
                attrTest: function (input) {
                    var optionPointers = this.options.pointers;
                    return 0 === optionPointers || input.pointers.length === optionPointers;
                },
                process: function (input) {
                    var state = this.state;
                    var eventType = input.eventType;
                    /** @type {number} */
                    var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
                    var isValid = this.attrTest(input);
                    return isRecognized && (eventType & INPUT_CANCEL || !isValid) ? state | STATE_CANCELLED : isRecognized || isValid ? eventType & INPUT_END ? state | STATE_ENDED : state & STATE_BEGAN ? state | STATE_CHANGED : STATE_BEGAN : 32;
                }
            });
            inherit(PanRecognizer, AttrRecognizer, {
                defaults: {
                    event: "pan",
                    threshold: 10,
                    pointers: 1,
                    direction: DIRECTION_ALL
                },
                getTouchAction: function () {
                    var direction = this.options.direction;
                    /** @type {!Array} */
                    var temporaryStyles = [];
                    return direction & DIRECTION_HORIZONTAL && temporaryStyles.push(value), direction & DIRECTION_VERTICAL && temporaryStyles.push(i), temporaryStyles;
                },
                directionTest: function (input) {
                    var options = this.options;
                    /** @type {boolean} */
                    var hasMoved = true;
                    var distance = input.distance;
                    var direction = input.direction;
                    var x = input.deltaX;
                    var y = input.deltaY;
                    return direction & options.direction || (options.direction & DIRECTION_HORIZONTAL ? (direction = 0 === x ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT, hasMoved = x != this.pX, distance = Math.abs(input.deltaX)) : (direction = 0 === y ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN, hasMoved = y != this.pY, distance = Math.abs(input.deltaY))), input.direction = direction, hasMoved && distance > options.threshold && direction & options.direction;
                },
                attrTest: function (input) {
                    return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
                },
                emit: function (input) {
                    this.pX = input.deltaX;
                    this.pY = input.deltaY;
                    var direction = directionStr(input.direction);
                    if (direction) {
                        input.additionalEvent = this.options.event + direction;
                    }
                    this._super.emit.call(this, input);
                }
            });
            inherit(PinchRecognizer, AttrRecognizer, {
                defaults: {
                    event: "pinch",
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function () {
                    return [TOUCH_ACTION_NONE];
                },
                attrTest: function (input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
                },
                emit: function (input) {
                    if (1 !== input.scale) {
                        /** @type {string} */
                        var inOut = input.scale < 1 ? "in" : "out";
                        /** @type {string} */
                        input.additionalEvent = this.options.event + inOut;
                    }
                    this._super.emit.call(this, input);
                }
            });
            inherit(PressRecognizer, Recognizer, {
                defaults: {
                    event: "press",
                    pointers: 1,
                    time: 251,
                    threshold: 9
                },
                getTouchAction: function () {
                    return [peg$c206];
                },
                process: function (input) {
                    var options = this.options;
                    /** @type {boolean} */
                    var m = input.pointers.length === options.pointers;
                    /** @type {boolean} */
                    var n = input.distance < options.threshold;
                    /** @type {boolean} */
                    var r = input.deltaTime > options.time;
                    if (this._input = input, !n || !m || input.eventType & (INPUT_END | INPUT_CANCEL) && !r) {
                        this.reset();
                    } else {
                        if (input.eventType & INPUT_START) {
                            this.reset();
                            this._timer = setTimeoutContext(function () {
                                /** @type {number} */
                                this.state = STATE_RECOGNIZED;
                                this.tryEmit();
                            }, options.time, this);
                        } else {
                            if (input.eventType & INPUT_END) {
                                return STATE_RECOGNIZED;
                            }
                        }
                    }
                    return 32;
                },
                reset: function () {
                    clearTimeout(this._timer);
                },
                emit: function (input) {
                    if (this.state === STATE_RECOGNIZED) {
                        if (input && input.eventType & INPUT_END) {
                            this.manager.emit(this.options.event + "up", input);
                        } else {
                            /** @type {number} */
                            this._input.timeStamp = now();
                            this.manager.emit(this.options.event, this._input);
                        }
                    }
                }
            });
            inherit(RotateRecognizer, AttrRecognizer, {
                defaults: {
                    event: "rotate",
                    threshold: 0,
                    pointers: 2
                },
                getTouchAction: function () {
                    return [TOUCH_ACTION_NONE];
                },
                attrTest: function (input) {
                    return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
                }
            });
            inherit(SwipeRecognizer, AttrRecognizer, {
                defaults: {
                    event: "swipe",
                    threshold: 10,
                    velocity: .3,
                    direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
                    pointers: 1
                },
                getTouchAction: function () {
                    return PanRecognizer.prototype.getTouchAction.call(this);
                },
                attrTest: function (input) {
                    var velocity;
                    var direction = this.options.direction;
                    return direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL) ? velocity = input.overallVelocity : direction & DIRECTION_HORIZONTAL ? velocity = input.overallVelocityX : direction & DIRECTION_VERTICAL && (velocity = input.overallVelocityY), this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
                },
                emit: function (input) {
                    var direction = directionStr(input.offsetDirection);
                    if (direction) {
                        this.manager.emit(this.options.event + direction, input);
                    }
                    this.manager.emit(this.options.event, input);
                }
            });
            inherit(TapRecognizer, Recognizer, {
                defaults: {
                    event: "tap",
                    pointers: 1,
                    taps: 1,
                    interval: 300,
                    time: 250,
                    threshold: 9,
                    posThreshold: 10
                },
                getTouchAction: function () {
                    return [TOUCH_ACTION_MANIPULATION];
                },
                process: function (input) {
                    var options = this.options;
                    /** @type {boolean} */
                    var duration = input.pointers.length === options.pointers;
                    /** @type {boolean} */
                    var select = input.distance < options.threshold;
                    /** @type {boolean} */
                    var value = input.deltaTime < options.time;
                    if (this.reset(), input.eventType & INPUT_START && 0 === this.count) {
                        return this.failTimeout();
                    }
                    if (select && value && duration) {
                        if (input.eventType != INPUT_END) {
                            return this.failTimeout();
                        }
                        /** @type {boolean} */
                        var reverseValue = !this.pTime || input.timeStamp - this.pTime < options.interval;
                        /** @type {boolean} */
                        var reverseIsSingle = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                        this.pTime = input.timeStamp;
                        this.pCenter = input.center;
                        if (reverseIsSingle && reverseValue) {
                            this.count += 1;
                        } else {
                            /** @type {number} */
                            this.count = 1;
                        }
                        /** @type {!Object} */
                        this._input = input;
                        if (0 === this.count % options.taps) {
                            return this.hasRequireFailures() ? (this._timer = setTimeoutContext(function () {
                                /** @type {number} */
                                this.state = STATE_RECOGNIZED;
                                this.tryEmit();
                            }, options.interval, this), STATE_BEGAN) : STATE_RECOGNIZED;
                        }
                    }
                    return 32;
                },
                failTimeout: function () {
                    return this._timer = setTimeoutContext(function () {
                        /** @type {number} */
                        this.state = 32;
                    }, this.options.interval, this), 32;
                },
                reset: function () {
                    clearTimeout(this._timer);
                },
                emit: function () {
                    if (this.state == STATE_RECOGNIZED) {
                        this._input.tapCount = this.count;
                        this.manager.emit(this.options.event, this._input);
                    }
                }
            });
            /** @type {string} */
            Hammer.VERSION = "2.0.7";
            Hammer.defaults = {
                domEvents: false,
                touchAction: "compute",
                enable: true,
                inputTarget: null,
                inputClass: null,
                preset: [[RotateRecognizer, {
                    enable: false
                }], [PinchRecognizer, {
                    enable: false
                }, ["rotate"]], [SwipeRecognizer, {
                    direction: DIRECTION_HORIZONTAL
                }], [PanRecognizer, {
                    direction: DIRECTION_HORIZONTAL
                }, ["swipe"]], [TapRecognizer], [TapRecognizer, {
                    event: "doubletap",
                    taps: 2
                }, ["tap"]], [PressRecognizer]],
                cssProps: {
                    userSelect: "none",
                    touchSelect: "none",
                    touchCallout: "none",
                    contentZooming: "none",
                    userDrag: "none",
                    tapHighlightColor: "rgba(0,0,0,0)"
                }
            };
            Manager.prototype = {
                set: function (options) {
                    return assign(this.options, options), options.touchAction && this.touchAction.update(), options.inputTarget && (this.input.destroy(), this.input.target = options.inputTarget, this.input.init()), this;
                },
                stop: function (force) {
                    /** @type {number} */
                    this.session.stopped = force ? 2 : 1;
                },
                recognize: function (inputData) {
                    var session = this.session;
                    if (!session.stopped) {
                        this.touchAction.preventDefaults(inputData);
                        var recognizer;
                        var recognizers = this.recognizers;
                        var curRecognizer = session.curRecognizer;
                        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
                            /** @type {null} */
                            curRecognizer = session.curRecognizer = null;
                        }
                        /** @type {number} */
                        var i = 0;
                        for (; i < recognizers.length;) {
                            recognizer = recognizers[i];
                            if (2 === session.stopped || curRecognizer && recognizer != curRecognizer && !recognizer.canRecognizeWith(curRecognizer)) {
                                recognizer.reset();
                            } else {
                                recognizer.recognize(inputData);
                            }
                            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
                                curRecognizer = session.curRecognizer = recognizer;
                            }
                            i++;
                        }
                    }
                },
                get: function (name) {
                    if (name instanceof Recognizer) {
                        return name;
                    }
                    var recognizers = this.recognizers;
                    /** @type {number} */
                    var i = 0;
                    for (; i < recognizers.length; i++) {
                        if (recognizers[i].options.event == name) {
                            return recognizers[i];
                        }
                    }
                    return null;
                },
                add: function (value) {
                    if (invokeArrayArg(value, "add", this)) {
                        return this;
                    }
                    var className = this.get(value.options.event);
                    return className && this.remove(className), this.recognizers.push(value), value.manager = this, this.touchAction.update(), value;
                },
                remove: function (name) {
                    if (invokeArrayArg(name, "remove", this)) {
                        return this;
                    }
                    if (name = this.get(name)) {
                        var recognizers = this.recognizers;
                        var index = inArray(recognizers, name);
                        if (-1 !== index) {
                            recognizers.splice(index, 1);
                            this.touchAction.update();
                        }
                    }
                    return this;
                },
                on: function (name, value) {
                    if (name !== undefined && value !== undefined) {
                        var handlers = this.handlers;
                        return each($(name), function (name) {
                            handlers[name] = handlers[name] || [];
                            handlers[name].push(value);
                        }), this;
                    }
                },
                off: function (name, type) {
                    if (name !== undefined) {
                        var handlers = this.handlers;
                        return each($(name), function (event) {
                            if (type) {
                                if (handlers[event]) {
                                    handlers[event].splice(inArray(handlers[event], type), 1);
                                }
                            } else {
                                delete handlers[event];
                            }
                        }), this;
                    }
                },
                emit: function (type, data) {
                    if (this.options.domEvents) {
                        trigger(type, data);
                    }
                    var urls = this.handlers[type] && this.handlers[type].slice();
                    if (urls && urls.length) {
                        /** @type {string} */
                        data.type = type;
                        /**
                         * @return {undefined}
                         */
                        data.preventDefault = function () {
                            data.srcEvent.preventDefault();
                        };
                        /** @type {number} */
                        var i = 0;
                        for (; i < urls.length;) {
                            urls[i](data);
                            i++;
                        }
                    }
                },
                destroy: function () {
                    if (this.element) {
                        toggleCssProps(this, false);
                    }
                    this.handlers = {};
                    this.session = {};
                    this.input.destroy();
                    /** @type {null} */
                    this.element = null;
                }
            };
            assign(Hammer, {
                INPUT_START: INPUT_START,
                INPUT_MOVE: INPUT_MOVE,
                INPUT_END: INPUT_END,
                INPUT_CANCEL: INPUT_CANCEL,
                STATE_POSSIBLE: STATE_POSSIBLE,
                STATE_BEGAN: STATE_BEGAN,
                STATE_CHANGED: STATE_CHANGED,
                STATE_ENDED: STATE_ENDED,
                STATE_RECOGNIZED: STATE_RECOGNIZED,
                STATE_CANCELLED: STATE_CANCELLED,
                STATE_FAILED: 32,
                DIRECTION_NONE: DIRECTION_NONE,
                DIRECTION_LEFT: DIRECTION_LEFT,
                DIRECTION_RIGHT: DIRECTION_RIGHT,
                DIRECTION_UP: DIRECTION_UP,
                DIRECTION_DOWN: DIRECTION_DOWN,
                DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
                DIRECTION_VERTICAL: DIRECTION_VERTICAL,
                DIRECTION_ALL: DIRECTION_ALL,
                Manager: Manager,
                Input: Input,
                TouchAction: TouchAction,
                TouchInput: TouchInput,
                MouseInput: MouseInput,
                PointerEventInput: PointerEventInput,
                TouchMouseInput: TouchMouseInput,
                SingleTouchInput: SingleTouchInput,
                Recognizer: Recognizer,
                AttrRecognizer: AttrRecognizer,
                Tap: TapRecognizer,
                Pan: PanRecognizer,
                Swipe: SwipeRecognizer,
                Pinch: PinchRecognizer,
                Rotate: RotateRecognizer,
                Press: PressRecognizer,
                on: addEventListeners,
                off: removeEventListeners,
                each: each,
                merge: merge,
                extend: extend,
                assign: assign,
                inherit: inherit,
                bindFn: bindFn,
                prefixed: prefixed
            });
            /** @type {function(string, !Object): ?} */
            (void 0 !== window ? window : "undefined" != typeof self ? self : {}).Hammer = Hammer;
            if ((ret = function () {
                    return Hammer;
                }.call(exp, valueNode, exp, module)) !== undefined) {
                module.exports = ret;
            }
        }(window, document);
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!Array} args
         * @return {?}
         */
        function range(args) {
            if (Array.isArray(args)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var array = Array(args.length);
                for (; i < args.length; i++) {
                    array[i] = args[i];
                }
                return array;
            }
            return Array.from(args);
        }

        /**
         * @param {!AudioNode} instance
         * @param {!Function} Constructor
         * @return {undefined}
         */
        function register(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var calculateFloatContainerPos = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var root = __webpack_require__(2);
        var _prepareStyleProperties = __webpack_require__(51);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _normalizeDataUri = __webpack_require__(0);
        var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
        var window = __webpack_require__(1);
        var newOrg = function () {
            /**
             * @param {!Object} $container
             * @return {undefined}
             */
            function init($container) {
                register(this, init);
                /** @type {!Object} */
                this.$el = $container;
                this.$refs = {
                    title: (0, window.qs)("h1, h2", this.$el),
                    content: (0, window.qs)(".panel__content", this.$el),
                    contentEnd: [].concat(range((0, window.qsa)(".panel-end__content, .panel-end__share, .panel-end__footer", this.$el)))
                };
                this.name = this.$el.dataset.panel;
                this.isActive = this.$el.classList.contains("is-active");
                this.isGrid = this.$el.classList.contains("panel--grid");
                if (this.isGrid) {
                    this.splitTitle = new _prepareStyleProperties2.default(this.$refs.title, {
                        type: "chars,lines"
                    });
                    this.splitContent = new _prepareStyleProperties2.default(this.$refs.content, {
                        type: "words,lines"
                    });
                }
                this.onMouseMove = this.onMouseMove.bind(this);
                this.onDeviceMove = this.onDeviceMove.bind(this);
                this.bind();
            }

            return calculateFloatContainerPos(init, [{
                key: "bind",
                value: function () {
                    _normalizeDataUri2.default.on(_normalizeDataUri2.default.MOUSE_MOVE, this.onMouseMove);
                    _normalizeDataUri2.default.on(_normalizeDataUri2.default.DEVICE_MOVE, this.onDeviceMove);
                }
            }, {
                key: "in",
                value: function () {
                    var tl = new root.TimelineMax;
                    switch (tl.add("start"), tl.delay(window.EVS_FALLBACK ? 0 : 2), this.name) {
                        case "home":
                            tl.fromTo(this.$refs.title, 1.5, {
                                autoAlpha: 0
                            }, {
                                autoAlpha: 1,
                                ease: root.Power4.easeOut
                            }, "start");
                            break;
                        case "end":
                            tl.fromTo(this.$refs.title, 2.5, {
                                autoAlpha: 0
                            }, {
                                autoAlpha: 1,
                                ease: root.Power4.easeInOut
                            }, "start+=0.5");
                            tl.fromTo(this.$refs.contentEnd, 2.5, {
                                autoAlpha: 0
                            }, {
                                autoAlpha: 1,
                                ease: root.Power4.easeInOut
                            }, "start+=0.5");
                            break;
                        default:
                            tl.set([this.$refs.title, this.$refs.content], {
                                autoAlpha: 1
                            }).staggerFromTo(this.splitTitle.chars, 1.25, {
                                autoAlpha: 0,
                                x: 40
                            }, {
                                autoAlpha: 1,
                                x: 0,
                                ease: root.Power4.easeInOut
                            }, .03, "start");
                            var patchLen = this.splitContent.words.length;
                            /** @type {number} */
                            var i = 0;
                            for (; i < patchLen; i++) {
                                tl.fromTo(this.splitContent.words[i], .5, {
                                    autoAlpha: 0,
                                    scale: .5,
                                    x: 5
                                }, {
                                    autoAlpha: 1,
                                    scale: 1,
                                    x: 0,
                                    ease: root.Power4.easeOut
                                }, .75 + .5 * Math.random());
                            }
                    }
                    return tl;
                }
            }, {
                key: "out",
                value: function () {
                    var tl = new root.TimelineMax;
                    switch (tl.add("start"), this.name) {
                        case "home":
                        case "end":
                            tl.to(this.$refs.title, 1.5, {
                                autoAlpha: 0,
                                ease: root.Power4.easeOut
                            }, "start");
                            break;
                        default:
                            tl.staggerFromTo(this.splitTitle.chars, 1.25, {
                                autoAlpha: 1,
                                x: -0,
                                ease: root.Power4.easeInOut
                            }, {
                                autoAlpha: 0,
                                x: -40,
                                ease: root.Power4.easeInOut
                            }, .03, "start");
                    }
                    if (this.isGrid) {
                        var patchLen = this.splitContent.words.length;
                        /** @type {number} */
                        var i = 0;
                        for (; i < patchLen; i++) {
                            tl.fromTo(this.splitContent.words[i], .5, {
                                autoAlpha: 1,
                                scale: 1,
                                x: 0
                            }, {
                                autoAlpha: 0,
                                scale: .5,
                                x: -5,
                                ease: root.Power4.easeOut
                            }, .5 * Math.random());
                        }
                    }
                    return "end" === this.name && tl.fromTo(this.$refs.contentEnd, 1, {
                        autoAlpha: 1
                    }, {
                        autoAlpha: 0,
                        ease: root.Power4.easeOut
                    }, "start"), tl;
                }
            }, {
                key: "activate",
                value: function () {
                    this.$el.classList.add("is-active");
                    /** @type {boolean} */
                    this.isActive = true;
                }
            }, {
                key: "deactivate",
                value: function () {
                    this.$el.classList.remove("is-active");
                    /** @type {boolean} */
                    this.isActive = false;
                }
            }, {
                key: "clean",
                value: function () {
                    root.TweenMax.set(this.$el, {
                        clearProps: "all"
                    });
                }
            }, {
                key: "onMouseMove",
                value: function (type, name) {
                    this.move(35 * -type, 35 * -name, 15 * -name, 15 * -type);
                }
            }, {
                key: "onDeviceMove",
                value: function (type, name) {
                    this.move(10 * -type, 10 * -name, 5 * -name, 5 * -type);
                }
            }, {
                key: "move",
                value: function (v, name, fn, n) {
                    if (this.isActive && this.isGrid && !window.EVS_FALLBACK) {
                        root.TweenMax.to(this.$el, 2, {
                            rotationX: fn,
                            rotationY: n,
                            x: v,
                            y: name,
                            ease: root.Power2.easeOut
                        });
                    }
                }
            }]), init;
        }();
        e.default = newOrg;
    },
    function (module, s, moment) {
        (function (data) {
            var o;
            var e;
            var msg;
            var root = void 0 !== module && module.exports && void 0 !== data ? data : window;
            !function (window) {
                var obj = window.GreenSockGlobals || window;
                var i = function (clusterShardData) {
                    var i;
                    /** @type {!Array<string>} */
                    var indices = clusterShardData.split(".");
                    var tmp = obj;
                    /** @type {number} */
                    i = 0;
                    for (; i < indices.length; i++) {
                        tmp[indices[i]] = tmp = tmp[indices[i]] || {};
                    }
                    return tmp;
                }("com.greensock.utils");
                /**
                 * @param {!Object} node
                 * @return {?}
                 */
                var _packChords = function text(node) {
                    var type = node.nodeType;
                    /** @type {string} */
                    var ret = "";
                    if (1 === type || 9 === type || 11 === type) {
                        if ("string" == typeof node.textContent) {
                            return node.textContent;
                        }
                        node = node.firstChild;
                        for (; node; node = node.nextSibling) {
                            /** @type {string} */
                            ret = ret + text(node);
                        }
                    } else {
                        if (3 === type || 4 === type) {
                            return node.nodeValue;
                        }
                    }
                    return ret;
                };
                /** @type {!HTMLDocument} */
                var doc = document;
                var f = doc.defaultView ? doc.defaultView.getComputedStyle : function () {
                };
                /** @type {!RegExp} */
                var rupper = /([A-Z])/g;
                /**
                 * @param {!Object} element
                 * @param {string} prop
                 * @param {!Object} e
                 * @param {boolean} value
                 * @return {?}
                 */
                var getStyle = function (element, prop, e, value) {
                    var n;
                    return (e = e || f(element, null)) ? (element = e.getPropertyValue(prop.replace(rupper, "-$1").toLowerCase()), n = element || e.length ? element : e[prop]) : element.currentStyle && (e = element.currentStyle, n = e[prop]), value ? n : parseInt(n, 10) || 0;
                };
                /**
                 * @param {!Object} e
                 * @return {?}
                 */
                var _isArrayLike = function (e) {
                    return !!(e.length && e[0] && (e[0].nodeType && e[0].style && !e.nodeType || e[0].length && e[0][0]));
                };
                /**
                 * @param {string} a
                 * @return {?}
                 */
                var _flattenArray = function (a) {
                    var j;
                    var e;
                    var i;
                    /** @type {!Array} */
                    var result = [];
                    var startLen = a.length;
                    /** @type {number} */
                    j = 0;
                    for (; j < startLen; j++) {
                        if (e = a[j], _isArrayLike(e)) {
                            i = e.length;
                            /** @type {number} */
                            i = 0;
                            for (; i < e.length; i++) {
                                result.push(e[i]);
                            }
                        } else {
                            result.push(e);
                        }
                    }
                    return result;
                };
                /** @type {!RegExp} */
                var footnotePattern = /(?:\r|\n|\t\t)/g;
                /** @type {!RegExp} */
                var rePlaceholder = /(?:\s\s+)/g;
                /**
                 * @param {string} tok
                 * @return {?}
                 */
                var $ = function (tok) {
                    return (tok.charCodeAt(0) - 55296 << 10) + (tok.charCodeAt(1) - 56320) + 65536;
                };
                var p = doc.all && !doc.addEventListener;
                /** @type {string} */
                var name = " style='position:relative;display:inline-block;" + (p ? "*display:inline;*zoom:1;'" : "'");
                /**
                 * @param {string} message
                 * @param {string} data
                 * @return {?}
                 */
                var m = function (message, data) {
                    message = message || "";
                    /** @type {boolean} */
                    var relative = -1 !== message.indexOf("++");
                    /** @type {number} */
                    var i = 1;
                    return relative && (message = message.split("++").join("")), function () {
                        return "<" + data + name + (message ? " class='" + message + (relative ? i++ : "") + "'>" : ">");
                    };
                };
                /** @type {function(string, !Object): undefined} */
                var data = i.SplitText = obj.SplitText = function (targets, target) {
                    if ("string" == typeof targets && (targets = data.selector(targets)), !targets) {
                        throw "cannot split a null element.";
                    }
                    this.elements = _isArrayLike(targets) ? _flattenArray(targets) : [targets];
                    /** @type {!Array} */
                    this.chars = [];
                    /** @type {!Array} */
                    this.words = [];
                    /** @type {!Array} */
                    this.lines = [];
                    /** @type {!Array} */
                    this._originals = [];
                    this.vars = target || {};
                    this.split(target);
                };
                /**
                 * @param {!Object} d
                 * @param {?} a
                 * @param {string} v
                 * @return {undefined}
                 */
                var shortcutUrl = function e(d, a, v) {
                    var type = d.nodeType;
                    if (1 === type || 9 === type || 11 === type) {
                        d = d.firstChild;
                        for (; d; d = d.nextSibling) {
                            e(d, a, v);
                        }
                    } else {
                        if (!(3 !== type && 4 !== type)) {
                            d.nodeValue = d.nodeValue.split(a).join(v);
                        }
                    }
                };
                /**
                 * @param {string} b
                 * @param {!Object} a
                 * @return {undefined}
                 */
                var y = function (b, a) {
                    var i = a.length;
                    for (; --i > -1;) {
                        b.push(a[i]);
                    }
                };
                /**
                 * @param {!Object} items
                 * @return {?}
                 */
                var _ = function (items) {
                    var i;
                    /** @type {!Array} */
                    var obj = [];
                    var length = items.length;
                    /** @type {number} */
                    i = 0;
                    for (; i !== length; obj.push(items[i++])) {
                    }
                    return obj;
                };
                /**
                 * @param {!Object} node
                 * @param {!Object} root
                 * @param {?} queue
                 * @return {?}
                 */
                var process = function (node, root, queue) {
                    var status;
                    for (; node && node !== root;) {
                        if (status = node._next || node.nextSibling) {
                            return status.textContent.charAt(0) === queue;
                        }
                        node = node.parentNode || node._parent;
                    }
                    return false;
                };
                /**
                 * @param {!Node} e
                 * @return {undefined}
                 */
                var getpos = function remove(e) {
                    var i;
                    var item;
                    var _schema = _(e.childNodes);
                    var ii = _schema.length;
                    /** @type {number} */
                    i = 0;
                    for (; i < ii; i++) {
                        item = _schema[i];
                        if (item._isSplit) {
                            remove(item);
                        } else {
                            if (i && 3 === item.previousSibling.nodeType) {
                                item.previousSibling.nodeValue += 3 === item.nodeType ? item.nodeValue : item.firstChild.nodeValue;
                            } else {
                                if (3 !== item.nodeType) {
                                    e.insertBefore(item.firstChild, item);
                                }
                            }
                            e.removeChild(item);
                        }
                    }
                };
                /**
                 * @param {!Object} element
                 * @param {!Object} options
                 * @param {string} e
                 * @param {string} i
                 * @param {boolean} n
                 * @param {!Object} width
                 * @param {!Object} y
                 * @return {undefined}
                 */
                var init = function (element, options, e, i, n, width, y) {
                    var j;
                    var x;
                    var width;
                    var node;
                    var a;
                    var r;
                    var c;
                    var allowNamedFunctions;
                    var style;
                    var o;
                    var _player_width;
                    var offset;
                    var value = f(element);
                    var val = getStyle(element, "paddingLeft", value);
                    /** @type {number} */
                    var currentOffset = -999;
                    var lineDistance = getStyle(element, "borderBottomWidth", value) + getStyle(element, "borderTopWidth", value);
                    var threshold = getStyle(element, "borderLeftWidth", value) + getStyle(element, "borderRightWidth", value);
                    var shapesize = getStyle(element, "paddingTop", value) + getStyle(element, "paddingBottom", value);
                    var peekWidth = getStyle(element, "paddingLeft", value) + getStyle(element, "paddingRight", value);
                    /** @type {number} */
                    var SW = .2 * getStyle(element, "fontSize");
                    var result = getStyle(element, "textAlign", value, true);
                    /** @type {!Array} */
                    var E = [];
                    /** @type {!Array} */
                    var d = [];
                    /** @type {!Array} */
                    var b = [];
                    var body = options.wordDelimiter || " ";
                    /** @type {string} */
                    var el = options.span ? "span" : "div";
                    var _ = options.type || options.split || "chars,words,lines";
                    /** @type {(Array|null)} */
                    var t = n && -1 !== _.indexOf("lines") ? [] : null;
                    /** @type {boolean} */
                    var requester_is_private_translator = -1 !== _.indexOf("words");
                    /** @type {boolean} */
                    var pastManualTranslation = -1 !== _.indexOf("chars");
                    /** @type {boolean} */
                    var types = "absolute" === options.position || true === options.absolute;
                    var url = options.linesClass;
                    /** @type {boolean} */
                    var model = -1 !== (url || "").indexOf("++");
                    /** @type {!Array} */
                    var nodes = [];
                    if (t && 1 === element.children.length && element.children[0]._isSplit) {
                        element = element.children[0];
                    }
                    if (model) {
                        url = url.split("++").join("");
                    }
                    x = element.getElementsByTagName("*");
                    width = x.length;
                    /** @type {!Array} */
                    a = [];
                    /** @type {number} */
                    j = 0;
                    for (; j < width; j++) {
                        a[j] = x[j];
                    }
                    if (t || types) {
                        /** @type {number} */
                        j = 0;
                        for (; j < width; j++) {
                            node = a[j];
                            if ((r = node.parentNode === element) || types || pastManualTranslation && !requester_is_private_translator) {
                                offset = node.offsetTop;
                                if (t && r && Math.abs(offset - currentOffset) > SW && "BR" !== node.nodeName) {
                                    /** @type {!Array} */
                                    c = [];
                                    t.push(c);
                                    currentOffset = offset;
                                }
                                if (types) {
                                    node._x = node.offsetLeft;
                                    node._y = offset;
                                    node._w = node.offsetWidth;
                                    node._h = node.offsetHeight;
                                }
                                if (t) {
                                    if (node._isSplit && r || !pastManualTranslation && r || requester_is_private_translator && r || !requester_is_private_translator && node.parentNode.parentNode === element && !node.parentNode._isSplit) {
                                        c.push(node);
                                        node._x -= val;
                                        if (process(node, element, body)) {
                                            /** @type {boolean} */
                                            node._wordEnd = true;
                                        }
                                    }
                                    if ("BR" === node.nodeName && node.nextSibling && "BR" === node.nextSibling.nodeName) {
                                        t.push([]);
                                    }
                                }
                            }
                        }
                    }
                    /** @type {number} */
                    j = 0;
                    for (; j < width; j++) {
                        node = a[j];
                        /** @type {boolean} */
                        r = node.parentNode === element;
                        if ("BR" !== node.nodeName) {
                            if (types) {
                                style = node.style;
                                if (!(requester_is_private_translator || r)) {
                                    node._x += node.parentNode._x;
                                    node._y += node.parentNode._y;
                                }
                                /** @type {string} */
                                style.left = node._x + "px";
                                /** @type {string} */
                                style.top = node._y + "px";
                                /** @type {string} */
                                style.position = "absolute";
                                /** @type {string} */
                                style.display = "block";
                                /** @type {string} */
                                style.width = node._w + 1 + "px";
                                /** @type {string} */
                                style.height = node._h + "px";
                            }
                            if (!requester_is_private_translator && pastManualTranslation) {
                                if (node._isSplit) {
                                    node._next = node.nextSibling;
                                    node.parentNode.appendChild(node);
                                } else {
                                    if (node.parentNode._isSplit) {
                                        node._parent = node.parentNode;
                                        if (!node.previousSibling && node.firstChild) {
                                            /** @type {boolean} */
                                            node.firstChild._isFirst = true;
                                        }
                                        if (node.nextSibling && " " === node.nextSibling.textContent && !node.nextSibling.nextSibling) {
                                            nodes.push(node.nextSibling);
                                        }
                                        node._next = node.nextSibling && node.nextSibling._isFirst ? null : node.nextSibling;
                                        node.parentNode.removeChild(node);
                                        a.splice(j--, 1);
                                        width--;
                                    } else {
                                        if (!r) {
                                            offset = !node.nextSibling && process(node.parentNode, element, body);
                                            if (node.parentNode._parent) {
                                                node.parentNode._parent.appendChild(node);
                                            }
                                            if (offset) {
                                                node.parentNode.appendChild(doc.createTextNode(" "));
                                            }
                                            if (options.span) {
                                                /** @type {string} */
                                                node.style.display = "inline";
                                            }
                                            E.push(node);
                                        }
                                    }
                                }
                            } else {
                                if (node.parentNode._isSplit && !node._isSplit && "" !== node.innerHTML) {
                                    d.push(node);
                                } else {
                                    if (pastManualTranslation && !node._isSplit) {
                                        if (options.span) {
                                            /** @type {string} */
                                            node.style.display = "inline";
                                        }
                                        E.push(node);
                                    }
                                }
                            }
                        } else {
                            if (t || types) {
                                if (node.parentNode) {
                                    node.parentNode.removeChild(node);
                                }
                                a.splice(j--, 1);
                                width--;
                            } else {
                                if (!requester_is_private_translator) {
                                    element.appendChild(node);
                                }
                            }
                        }
                    }
                    /** @type {number} */
                    j = nodes.length;
                    for (; --j > -1;) {
                        nodes[j].parentNode.removeChild(nodes[j]);
                    }
                    if (t) {
                        if (types) {
                            /** @type {!Element} */
                            o = doc.createElement(el);
                            element.appendChild(o);
                            /** @type {string} */
                            _player_width = o.offsetWidth + "px";
                            offset = o.offsetParent === element ? 0 : element.offsetLeft;
                            element.removeChild(o);
                        }
                        style = element.style.cssText;
                        /** @type {string} */
                        element.style.cssText = "display:none;";
                        for (; element.firstChild;) {
                            element.removeChild(element.firstChild);
                        }
                        /** @type {boolean} */
                        allowNamedFunctions = " " === body && (!types || !requester_is_private_translator && !pastManualTranslation);
                        /** @type {number} */
                        j = 0;
                        for (; j < t.length; j++) {
                            c = t[j];
                            /** @type {!Element} */
                            o = doc.createElement(el);
                            /** @type {string} */
                            o.style.cssText = "display:block;text-align:" + result + ";position:" + (types ? "absolute;" : "relative;");
                            if (url) {
                                o.className = url + (model ? j + 1 : "");
                            }
                            b.push(o);
                            width = c.length;
                            /** @type {number} */
                            x = 0;
                            for (; x < width; x++) {
                                if ("BR" !== c[x].nodeName) {
                                    node = c[x];
                                    o.appendChild(node);
                                    if (allowNamedFunctions && node._wordEnd) {
                                        o.appendChild(doc.createTextNode(" "));
                                    }
                                    if (types) {
                                        if (0 === x) {
                                            /** @type {string} */
                                            o.style.top = node._y + "px";
                                            /** @type {string} */
                                            o.style.left = val + offset + "px";
                                        }
                                        /** @type {string} */
                                        node.style.top = "0px";
                                        if (offset) {
                                            /** @type {string} */
                                            node.style.left = node._x - offset + "px";
                                        }
                                    }
                                }
                            }
                            if (0 === width) {
                                /** @type {string} */
                                o.innerHTML = "&nbsp;";
                            } else {
                                if (!(requester_is_private_translator || pastManualTranslation)) {
                                    getpos(o);
                                    shortcutUrl(o, String.fromCharCode(160), " ");
                                }
                            }
                            if (types) {
                                /** @type {(string|undefined)} */
                                o.style.width = _player_width;
                                /** @type {string} */
                                o.style.height = node._h + "px";
                            }
                            element.appendChild(o);
                        }
                        element.style.cssText = style;
                    }
                    if (types) {
                        if (y > element.clientHeight) {
                            /** @type {string} */
                            element.style.height = y - shapesize + "px";
                            if (element.clientHeight < y) {
                                /** @type {string} */
                                element.style.height = y + lineDistance + "px";
                            }
                        }
                        if (width > element.clientWidth) {
                            /** @type {string} */
                            element.style.width = width - peekWidth + "px";
                            if (element.clientWidth < width) {
                                /** @type {string} */
                                element.style.width = width + threshold + "px";
                            }
                        }
                    }
                    y(e, E);
                    y(i, d);
                    y(n, b);
                };
                /**
                 * @param {!Element} item
                 * @param {!Object} opts
                 * @param {?} pad
                 * @param {?} callback
                 * @return {undefined}
                 */
                var parse = function (item, opts, pad, callback) {
                    var text;
                    var s;
                    var i;
                    var cur;
                    var l;
                    var d;
                    var m;
                    var d2;
                    var c1;
                    /** @type {string} */
                    var cloneName = opts.span ? "span" : "div";
                    var t = opts.type || opts.split || "chars,words,lines";
                    /** @type {boolean} */
                    var parent_basetree_chi = (t.indexOf("words"), -1 !== t.indexOf("chars"));
                    /** @type {boolean} */
                    var preserveHTML = "absolute" === opts.position || true === opts.absolute;
                    var undefined = opts.wordDelimiter || " ";
                    /** @type {string} */
                    var _ = " " !== undefined ? "" : preserveHTML ? "&#173; " : " ";
                    /** @type {string} */
                    var PASSED = opts.span ? "</span>" : "</div>";
                    /** @type {boolean} */
                    var passed = true;
                    /** @type {!Element} */
                    var row = doc.createElement("div");
                    var p = item.parentNode;
                    p.insertBefore(row, item);
                    row.textContent = item.nodeValue;
                    p.removeChild(item);
                    /** @type {!Element} */
                    item = row;
                    text = _packChords(item);
                    /** @type {boolean} */
                    m = -1 !== text.indexOf("<");
                    if (false !== opts.reduceWhiteSpace) {
                        text = text.replace(rePlaceholder, " ").replace(footnotePattern, "");
                    }
                    if (m) {
                        text = text.split("<").join("{{LT}}");
                    }
                    l = text.length;
                    s = (" " === text.charAt(0) ? _ : "") + pad();
                    /** @type {number} */
                    i = 0;
                    for (; i < l; i++) {
                        if ((d = text.charAt(i)) === undefined && text.charAt(i - 1) !== undefined && i) {
                            /** @type {string} */
                            s = s + (passed ? PASSED : "");
                            /** @type {boolean} */
                            passed = false;
                            for (; text.charAt(i + 1) === undefined;) {
                                /** @type {string} */
                                s = s + _;
                                i++;
                            }
                            if (i === l - 1) {
                                /** @type {string} */
                                s = s + _;
                            } else {
                                if (")" !== text.charAt(i + 1)) {
                                    /** @type {string} */
                                    s = s + (_ + pad());
                                    /** @type {boolean} */
                                    passed = true;
                                }
                            }
                        } else {
                            if ("{" === d && "{{LT}}" === text.substr(i, 6)) {
                                /** @type {string} */
                                s = s + (parent_basetree_chi ? callback() + "{{LT}}</" + cloneName + ">" : "{{LT}}");
                                /** @type {number} */
                                i = i + 5;
                            } else {
                                if (d.charCodeAt(0) >= 55296 && d.charCodeAt(0) <= 56319 || text.charCodeAt(i + 1) >= 65024 && text.charCodeAt(i + 1) <= 65039) {
                                    d2 = $(text.substr(i, 2));
                                    c1 = $(text.substr(i + 2, 2));
                                    /** @type {number} */
                                    cur = d2 >= 127462 && d2 <= 127487 && c1 >= 127462 && c1 <= 127487 || c1 >= 127995 && c1 <= 127999 ? 4 : 2;
                                    s = s + (parent_basetree_chi && " " !== d ? callback() + text.substr(i, cur) + "</" + cloneName + ">" : text.substr(i, cur));
                                    /** @type {number} */
                                    i = i + (cur - 1);
                                } else {
                                    s = s + (parent_basetree_chi && " " !== d ? callback() + d + "</" + cloneName + ">" : d);
                                }
                            }
                        }
                    }
                    /** @type {string} */
                    item.outerHTML = s + (passed ? PASSED : "");
                    if (m) {
                        shortcutUrl(p, "{{LT}}", "<");
                    }
                };
                /**
                 * @param {!Element} parent
                 * @param {!Object} self
                 * @param {?} type
                 * @param {?} options
                 * @return {?}
                 */
                var cb = function render(parent, self, type, options) {
                    var ii;
                    var child;
                    var value = _(parent.childNodes);
                    var i = value.length;
                    /** @type {boolean} */
                    var abs = "absolute" === self.position || true === self.absolute;
                    if (3 !== parent.nodeType || i > 1) {
                        /** @type {boolean} */
                        self.absolute = false;
                        /** @type {number} */
                        ii = 0;
                        for (; ii < i; ii++) {
                            child = value[ii];
                            if (3 !== child.nodeType || /\S+/.test(child.nodeValue)) {
                                if (abs && 3 !== child.nodeType && "inline" === getStyle(child, "display", null, true)) {
                                    /** @type {string} */
                                    child.style.display = "inline-block";
                                    /** @type {string} */
                                    child.style.position = "relative";
                                }
                                /** @type {boolean} */
                                child._isSplit = true;
                                render(child, self, type, options);
                            }
                        }
                        return self.absolute = abs, void(parent._isSplit = true);
                    }
                    parse(parent, self, type, options);
                };
                var fn = data.prototype;
                /**
                 * @param {!Object} x
                 * @return {?}
                 */
                fn.split = function (x) {
                    if (this.isSplit) {
                        this.revert();
                    }
                    this.vars = x = x || this.vars;
                    /** @type {number} */
                    this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;
                    var itemHeight;
                    var w;
                    var item;
                    var i = this.elements.length;
                    /** @type {string} */
                    var type = x.span ? "span" : "div";
                    var newCallback = ("absolute" === x.position || x.absolute, m(x.wordsClass, type));
                    var a = m(x.charsClass, type);
                    for (; --i > -1;) {
                        item = this.elements[i];
                        this._originals[i] = item.innerHTML;
                        itemHeight = item.clientHeight;
                        w = item.clientWidth;
                        cb(item, x, newCallback, a);
                        init(item, x, this.chars, this.words, this.lines, w, itemHeight);
                    }
                    return this.chars.reverse(), this.words.reverse(), this.lines.reverse(), this.isSplit = true, this;
                };
                /**
                 * @return {?}
                 */
                fn.revert = function () {
                    if (!this._originals) {
                        throw "revert() call wasn't scoped properly.";
                    }
                    var i = this._originals.length;
                    for (; --i > -1;) {
                        this.elements[i].innerHTML = this._originals[i];
                    }
                    return this.chars = [], this.words = [], this.lines = [], this.isSplit = false, this;
                };
                data.selector = window.$ || window.jQuery || function (e) {
                    var w = window.$ || window.jQuery;
                    return w ? (data.selector = w, w(e)) : "undefined" == typeof document ? e : document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById("#" === e.charAt(0) ? e.substr(1) : e);
                };
                /** @type {string} */
                data.version = "0.5.7";
            }(root);
            (function (i) {
                /**
                 * @return {?}
                 */
                var m = function () {
                    return (root.GreenSockGlobals || root).SplitText;
                };
                if (void 0 !== module && module.exports) {
                    module.exports = m();
                } else {
                    /** @type {!Array} */
                    e = [];
                    /** @type {function(): ?} */
                    o = m;
                    if (void 0 !== (msg = "function" == typeof o ? o.apply(s, e) : o)) {
                        module.exports = msg;
                    }
                }
            })();
        }).call(s, moment(4));
    },
    function (canCreateDiscussions, e, require) {
        /**
         * @param {!AudioNode} elem
         * @param {!Function} type
         * @return {undefined}
         */
        function on(elem, type) {
            if (!(elem instanceof type)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var TweenTransition = require(2);
        var utils = require(1);
        var newOrg = function () {
            /**
             * @param {number} value
             * @return {undefined}
             */
            function show(value) {
                on(this, show);
                /** @type {number} */
                this.max = value;
                /** @type {number} */
                this.current = 1;
                this.init();
            }

            return debug(show, [{
                key: "init",
                value: function () {
                    /** @type {!Element} */
                    this.$el = document.createElement("div");
                    this.$el.classList.add("pagination");
                    /** @type {string} */
                    this.$el.innerHTML = '<div class="pagination__current-outer">\n      <div class="pagination__current-inner">\n        <div class="pagination__prev">\n          ' + (this.current - 1) + '\n        </div>\n        <div class="pagination__current">\n          ' + this.current + '\n        </div>\n        <div class="pagination__next">\n          ' + (this.current + 1) + '\n        </div>\n      </div>\n    </div>\n    <div class="pagination__max">\n      ' + this.max + "\n    </div>";
                    this.$refs = {
                        inner: (0, utils.qs)(".pagination__current-inner", this.$el),
                        prev: (0, utils.qs)(".pagination__prev", this.$el),
                        current: (0, utils.qs)(".pagination__current", this.$el),
                        next: (0, utils.qs)(".pagination__next", this.$el)
                    };
                    document.body.appendChild(this.$el);
                    this.height = this.$refs.current.offsetHeight;
                    TweenTransition.TweenMax.set(this.$el, {
                        y: -this.height * this.max / 2
                    });
                }
            }, {
                key: "jump",
                value: function (type, name, start) {
                    var vm = this;
                    /** @type {string} */
                    var languageOffsetY = type > this.current - 1 ? "+=" + this.height : "-=" + this.height;
                    /** @type {string} */
                    var roamOffsetY = type > this.current - 1 ? "-=" + this.height : "+=" + this.height;
                    var orchestrator = new TweenTransition.TimelineLite({
                        onComplete: function () {
                            vm.current = type + 1;
                            vm.$refs.current.textContent = vm.current;
                            TweenTransition.TweenMax.set(vm.$refs.inner, {
                                clearProps: "y"
                            });
                            /** @type {number} */
                            vm.$refs.prev.textContent = vm.current - 1;
                            vm.$refs.next.textContent = vm.current + 1;
                        }
                    });
                    /** @type {number} */
                    var promise1 = 1.25;
                    if (window.EVS_FALLBACK || "end" === name || "end" === start) {
                        /** @type {number} */
                        promise1 = 0;
                    }
                    orchestrator.add("start").delay(promise1).to(this.$el, 1, {
                        y: languageOffsetY,
                        ease: TweenTransition.Power4.easeInOut
                    }, "start").to(this.$refs.inner, 1, {
                        y: roamOffsetY,
                        ease: TweenTransition.Power4.easeInOut
                    }, "start");
                }
            }]), show;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, $) {
        /**
         * @param {!AudioNode} elem
         * @param {!Function} type
         * @return {undefined}
         */
        function on(elem, type) {
            if (!(elem instanceof type)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var debug = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var target = $(0);
        var record = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(target);
        var newOrg = function () {
            /**
             * @param {!Object} $el
             * @return {undefined}
             */
            function show($el) {
                on(this, show);
                /** @type {!Object} */
                this.$el = $el;
                /** @type {boolean} */
                this.isVisible = false;
                this.onChange = this.onChange.bind(this);
                this.init();
            }

            return debug(show, [{
                key: "init",
                value: function () {
                    this.bind();
                }
            }, {
                key: "destroy",
                value: function () {
                    this.unbind();
                }
            }, {
                key: "bind",
                value: function () {
                    record.default.on(record.default.PANEL_CHANGE, this.onChange);
                }
            }, {
                key: "unbind",
                value: function () {
                    record.default.off(record.default.PANEL_CHANGE, this.onChange);
                }
            }, {
                key: "onChange",
                value: function (type, name) {
                    clearTimeout(this.t);
                    if (0 === name) {
                        /** @type {number} */
                        this.t = setTimeout(this.show.bind(this, true), 1e4);
                    } else {
                        this.hide();
                        if (name < 5) {
                            /** @type {number} */
                            this.t = setTimeout(this.show.bind(this), 1e4);
                        }
                    }
                }
            }, {
                key: "show",
                value: function () {
                    if (arguments.length > 0 && void 0 !== arguments[0] && arguments[0]) {
                        this.$el.classList.add("is-home");
                    }
                    this.$el.classList.remove("is-hidden");
                }
            }, {
                key: "hide",
                value: function () {
                    var statusbar = this;
                    this.$el.classList.add("is-hidden");
                    setTimeout(function () {
                        statusbar.$el.classList.remove("is-home");
                    }, 500);
                }
            }]), show;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, require) {
        /**
         * @param {!Array} args
         * @return {?}
         */
        function range(args) {
            if (Array.isArray(args)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var array = Array(args.length);
                for (; i < args.length; i++) {
                    array[i] = args[i];
                }
                return array;
            }
            return Array.from(args);
        }

        /**
         * @param {!AudioNode} v
         * @param {!Function} node
         * @return {undefined}
         */
        function fill(v, node) {
            if (!(v instanceof node)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var isSourcedFromRequire = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var TweenTransition = require(2);
        var api = require(1);
        var h = require(0);
        var i = function (obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }(h);
        var newOrg = function () {
            /**
             * @param {!Object} $container
             * @return {undefined}
             */
            function init($container) {
                fill(this, init);
                /** @type {!Object} */
                this.$el = $container;
                this.$refs = {
                    title: (0, api.qs)(".panel-home__title", this.$el),
                    live: (0, api.qs)(".panel-home__title__live", this.$el),
                    liveSplit: [].concat(range((0, api.qsa)(".panel-home__title__live .panel-home__title__split", this.$el))),
                    life: (0, api.qs)(".panel-home__title__life", this.$el),
                    lifeSplit: [].concat(range((0, api.qsa)(".panel-home__title__life .panel-home__title__split", this.$el))),
                    letter: (0, api.qs)(".panel-home__title__life__letter", this.$el),
                    better: (0, api.qs)(".panel-home__title__better", this.$el)
                };
                this.betterWidth = this.$refs.better.offsetWidth;
                this.letterWidth = this.$refs.letter.offsetWidth;
                this.letterHeight = this.$refs.letter.offsetHeight;
                this.liveWidth = this.$refs.live.offsetWidth;
                this.lifeWidth = this.$refs.life.offsetWidth;
                this.onReady = this.onReady.bind(this);
                this.init();
            }

            return isSourcedFromRequire(init, [{
                key: "init",
                value: function () {
                    /** @type {string} */
                    this.$refs.better.innerHTML = "<span>" + this.$refs.better.textContent + "</span>";
                    /** @type {string} */
                    this.$refs.better.style.width = this.betterWidth + "px";
                    this.$refs.betterInner = (0, api.qs)("span", this.$refs.better);
                    TweenTransition.TweenMax.set(this.$refs.betterInner, {
                        width: 0
                    });
                    /** @type {string} */
                    this.$refs.life.style.width = this.lifeWidth + "px";
                    /** @type {string} */
                    this.$refs.letter.innerHTML = "<span>f</span><span>v</span>";
                    /** @type {string} */
                    this.$refs.letter.style.width = this.letterWidth + "px";
                    /** @type {string} */
                    this.$refs.letter.style.height = this.letterHeight + "px";
                    this.$refs.f = (0, api.qs)("span:first-child", this.$refs.letter);
                    this.$refs.v = (0, api.qs)("span:last-child", this.$refs.letter);
                    TweenTransition.TweenMax.set(this.$refs.f, {
                        opacity: 0
                    });
                    this.start();
                }
            }, {
                key: "bind",
                value: function () {
                    i.default.on(i.default.HOME_READY, this.onReady);
                }
            }, {
                key: "onReady",
                value: function () {
                    this.start();
                }
            }, {
                key: "start",
                value: function () {
                    var playProps = this;
                    (new TweenTransition.TimelineMax({
                        onComplete: function () {
                            playProps.loop();
                        }
                    })).add("start").to(this.$refs.title, 2, {
                        autoAlpha: 1,
                        ease: TweenTransition.Power4.easeOut
                    }).add("split").staggerTo(this.$refs.liveSplit, 2.5, {
                        yPercent: -100,
                        ease: TweenTransition.Power4.easeInOut
                    }, .1, "split").staggerTo(this.$refs.lifeSplit, 2.5, {
                        yPercent: 85,
                        ease: TweenTransition.Power4.easeInOut
                    }, .1, "split").to(this.$refs.betterInner, 1, {
                        width: this.betterWidth,
                        ease: TweenTransition.Power4.easeInOut
                    }, "split+=1.75");
                }
            }, {
                key: "loop",
                value: function () {
                    (new TweenTransition.TimelineMax({
                        repeat: -1,
                        repeatDelay: 3,
                        yoyo: true
                    })).add("glitch").to(this.$refs.v, .15, {
                        opacity: 0,
                        ease: TweenTransition.Power4.easeInOut
                    }, "glitch").to(this.$refs.f, .05, {
                        opacity: 1,
                        x: 1,
                        ease: TweenTransition.Power4.easeInOut
                    }, "glitch").to(this.$refs.f, .05, {
                        className: "+=has-shadow",
                        y: 1,
                        scale: 1.1
                    }).to(this.$refs.f, .1, {
                        x: 0,
                        ease: TweenTransition.Power4.easeInOut
                    }).to(this.$refs.f, .05, {
                        opacity: 0,
                        ease: TweenTransition.Power4.easeInOut
                    }).to(this.$refs.f, .05, {
                        opacity: 1,
                        scale: 1,
                        ease: TweenTransition.Power4.easeInOut
                    }).to(this.$refs.f, .05, {
                        className: "-=has-shadow"
                    }).to(this.$refs.f, .1, {
                        y: 0,
                        ease: TweenTransition.Power4.easeInOut
                    });
                }
            }]), init;
        }();
        e.default = newOrg;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        (function (winstonInstance) {
            /**
             * @param {!Object} obj
             * @return {?}
             */
            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : {
                    default: obj
                };
            }

            /**
             * @param {!AudioNode} instance
             * @param {!Function} Constructor
             * @return {undefined}
             */
            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            Object.defineProperty(e, "__esModule", {
                value: true
            });
            var next = function () {
                /**
                 * @param {!Object} options
                 * @param {number} index
                 * @return {?}
                 */
                function flattenElements(options, index) {
                    /** @type {!Array} */
                    var result = [];
                    /** @type {boolean} */
                    var _iteratorNormalCompletion3 = true;
                    /** @type {boolean} */
                    var r = false;
                    var o = void 0;
                    try {
                        var info;
                        var _iterator3 = options[Symbol.iterator]();
                        for (; !(_iteratorNormalCompletion3 = (info = _iterator3.next()).done) && (result.push(info.value), !index || result.length !== index); _iteratorNormalCompletion3 = true) {
                        }
                    } catch (tObj) {
                        /** @type {boolean} */
                        r = true;
                        o = tObj;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (r) {
                                throw o;
                            }
                        }
                    }
                    return result;
                }

                return function (arr, options) {
                    if (Array.isArray(arr)) {
                        return arr;
                    }
                    if (Symbol.iterator in Object(arr)) {
                        return flattenElements(arr, options);
                    }
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                };
            }();
            var addButtonCommand = function () {
                /**
                 * @param {!Function} d
                 * @param {string} props
                 * @return {undefined}
                 */
                function t(d, props) {
                    /** @type {number} */
                    var i = 0;
                    for (; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        /** @type {boolean} */
                        descriptor.configurable = true;
                        if ("value" in descriptor) {
                            /** @type {boolean} */
                            descriptor.writable = true;
                        }
                        Object.defineProperty(d, descriptor.key, descriptor);
                    }
                }

                return function (p, n, a) {
                    return n && t(p.prototype, n), a && t(p, a), p;
                };
            }();
            var TweenTransition = __webpack_require__(2);
            var _deepAssign = __webpack_require__(56);
            var _deepAssign2 = _interopRequireDefault(_deepAssign);
            var _normalizeDataUri = __webpack_require__(58);
            var _normalizeDataUri2 = _interopRequireDefault(_normalizeDataUri);
            var root = __webpack_require__(1);
            var _prepareStyleProperties = __webpack_require__(0);
            var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
            var newOrg = function () {
                /**
                 * @param {!Object} el
                 * @return {undefined}
                 */
                function Select(el) {
                    _classCallCheck(this, Select);
                    /** @type {!Object} */
                    this.$el = el;
                    /** @type {boolean} */
                    this.isMuted = false;
                    /** @type {boolean} */
                    this.hasFallback = false;
                    this.onClick = this.onClick.bind(this);
                    this.onChange = this.onChange.bind(this);
                    this.onMouseMove = this.onMouseMove.bind(this);
                    this.init();
                }

                return addButtonCommand(Select, [{
                    key: "init",
                    value: function () {
                        var TC_Class = this;
                        this.muteAnim = new TweenTransition.TimelineMax({
                            paused: true,
                            onComplete: function () {
                                TweenTransition.TweenMax.set(".cross-left, .cross-right", {
                                    autoAlpha: 0
                                });
                                TweenTransition.TweenMax.set(".wave-left, .wave-right", {
                                    autoAlpha: 1
                                });
                                TC_Class.pulseAnim.restart();
                            }
                        });
                        this.muteAnim.add("start").to(_normalizeDataUri2.default.convertToPath("#crossLeft"), 1, {
                            morphSVG: "#waveLeft",
                            ease: TweenTransition.Power4.easeInOut
                        }, "start").to(_normalizeDataUri2.default.convertToPath("#crossRight"), 1, {
                            morphSVG: "#waveRight",
                            ease: TweenTransition.Power4.easeInOut
                        }, "start");
                        this.pulseAnim = new TweenTransition.TimelineMax({
                            delay: .5,
                            repeatDelay: .8,
                            repeat: -1,
                            paused: true
                        });
                        this.pulseAnim.add("up").to("#waveLeft", .4, {
                            xPercent: 10,
                            scaleX: 1.2,
                            scaleY: 1.1,
                            ease: TweenTransition.Back.easeInOut
                        }, "up").to("#waveRight", .4, {
                            xPercent: 10,
                            scaleX: 1.2,
                            scaleY: 1.1,
                            ease: TweenTransition.Back.easeInOut
                        }, "up").add("down").to("#waveLeft", .3, {
                            xPercent: 0,
                            scale: 1,
                            ease: TweenTransition.Back.easeInOut
                        }, "down").to("#waveRight", .3, {
                            xPercent: 0,
                            scale: 1,
                            ease: TweenTransition.Back.easeInOut
                        }, "down");
                        if (Modernizr.webaudio) {
                            this.load();
                        } else {
                            this.fallback();
                        }
                        this.bind();
                    }
                }, {
                    key: "load",
                    value: function () {
                        var self = this;
                        Promise.all([Select.loadSound(), Select.loadEffect()]).then(function (level) {
                            var header = next(level, 2);
                            self.audio = header[0];
                            self.convolver = header[1];
                            if (winstonInstance.debug) {
                                /** @type {number} */
                                self.audio.volume = 0;
                            }
                            /** @type {number} */
                            self.audio.attack = 1;
                            /** @type {number} */
                            self.audio.release = 1;
                            /** @type {boolean} */
                            self.audio.loop = true;
                            self.lowPassFilter = new _deepAssign2.default.Effects.LowPassFilter({
                                frequency: 22050,
                                peak: 10
                            });
                            self.stereo = new _deepAssign2.default.Effects.StereoPanner({
                                pan: 0
                            });
                            self.audio.addEffect(self.convolver);
                            self.audio.addEffect(self.lowPassFilter);
                            self.audio.addEffect(self.stereo);
                            self.audio.play();
                            self.pulseAnim.play();
                        });
                    }
                }, {
                    key: "fallback",
                    value: function () {
                        var self = this;
                        /** @type {boolean} */
                        this.hasFallback = true;
                        /** @type {!Audio} */
                        this.audio = new Audio("assets/media/sharks.mp3");
                        /** @type {boolean} */
                        this.audio.loop = true;
                        /** @type {(Promise<undefined>|null)} */
                        var loadPropPromise = this.audio.play();
                        if (void 0 !== loadPropPromise) {
                            loadPropPromise.then(function () {
                                self.pulseAnim.restart();
                            }).catch(function (canCreateDiscussions) {
                                self.mute();
                            });
                        }
                    }
                }, {
                    key: "bind",
                    value: function () {
                        (0, root.$on)(this.$el, "click", this.onClick);
                        if (!this.hasFallback) {
                            _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.PANEL_CHANGE, this.onChange);
                            _prepareStyleProperties2.default.on(_prepareStyleProperties2.default.MOUSE_MOVE, this.onMouseMove);
                        }
                    }
                }, {
                    key: "onClick",
                    value: function () {
                        this.toggle();
                    }
                }, {
                    key: "onChange",
                    value: function (type, name) {
                        (new TweenTransition.TimelineMax).add("in").to(this.stereo, 1, {
                            pan: -.75,
                            ease: TweenTransition.Power1.easeIn
                        }, "in").to(this.convolver, .75, {
                            mix: .5,
                            ease: TweenTransition.Power1.easeIn
                        }, "in").to(this.lowPassFilter, .75, {
                            frequency: 200,
                            ease: TweenTransition.Power1.easeIn
                        }, "in").add("out", "+=1.5").to(this.stereo, .5, {
                            pan: .75,
                            ease: TweenTransition.Power1.easeIn
                        }, "out").to(this.convolver, 1.875, {
                            mix: 0,
                            ease: TweenTransition.Power4.easeIn
                        }, "out").to(this.lowPassFilter, 1.875, {
                            frequency: 22050,
                            ease: TweenTransition.Power4.easeIn
                        }, "out").to(this.stereo, 1, {
                            pan: 0,
                            ease: TweenTransition.Power1.easeOut
                        }, "out+=1.5");
                    }
                }, {
                    key: "onMouseMove",
                    value: function (type) {
                        if (!this.hasFallback) {
                            TweenTransition.TweenMax.to(this.stereo, 2, {
                                pan: 2 * type,
                                ease: TweenTransition.Power1.easeOut
                            });
                        }
                    }
                }, {
                    key: "toggle",
                    value: function () {
                        if (this.isMuted) {
                            this.unmute();
                        } else {
                            this.mute();
                        }
                    }
                }, {
                    key: "mute",
                    value: function () {
                        TweenTransition.TweenMax.set("#crossLeft, #crossRight", {
                            autoAlpha: 1
                        });
                        TweenTransition.TweenMax.set("#waveLeft, #waveRight", {
                            autoAlpha: 0
                        });
                        this.muteAnim.reverse(0);
                        if (this.hasFallback) {
                            /** @type {boolean} */
                            this.audio.muted = true;
                        } else {
                            this.audio.stop();
                        }
                        /** @type {boolean} */
                        this.isMuted = true;
                    }
                }, {
                    key: "unmute",
                    value: function () {
                        this.muteAnim.play(0);
                        if (this.hasFallback) {
                            if (this.audio.paused) {
                                this.audio.play();
                            }
                            /** @type {boolean} */
                            this.audio.muted = false;
                        } else {
                            this.audio.play();
                        }
                        /** @type {boolean} */
                        this.isMuted = false;
                    }
                }, {
                    key: "pulse",
                    value: function () {
                    }
                }], [{
                    key: "loadSound",
                    value: function () {
                        return new Promise(function (saveNotifs) {
                            var notifications = new _deepAssign2.default.Sound({
                                source: "file",
                                options: {
                                    path: "assets/media/loop.mp3"
                                }
                            }, function () {
                                saveNotifs(notifications);
                            });
                        });
                    }
                }, {
                    key: "loadEffect",
                    value: function () {
                        return new Promise(function (saveNotifs) {
                            var notifications = new _deepAssign2.default.Effects.Convolver({
                                impulse: "assets/media/impulse.wav",
                                mix: 0
                            }, function () {
                                saveNotifs(notifications);
                            });
                        });
                    }
                }]), Select;
            }();
            e.default = newOrg;
        }).call(e, __webpack_require__(4));
    },
    function (module, s, getArguments) {
        (function (value) {
            var o;
            var e;
            var msg;
            !function (root) {
                /**
                 * @param {string} options
                 * @param {!Object} type
                 * @return {undefined}
                 */
                function Filter(options, type) {
                    this.options = {};
                    options = options || this.options;
                    var defaults = {
                        frequency: 350,
                        peak: 1
                    };
                    this.inputNode = this.filterNode = Pz.context.createBiquadFilter();
                    /** @type {!Object} */
                    this.filterNode.type = type;
                    this.outputNode = Pizzicato.context.createGain();
                    this.filterNode.connect(this.outputNode);
                    var prop;
                    for (prop in defaults) {
                        this[prop] = options[prop];
                        this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                    }
                }

                /**
                 * @return {undefined}
                 */
                function buildImpulse() {
                    var n;
                    var i;
                    /** @type {number} */
                    var length = Pz.context.sampleRate * this.time;
                    var impulse = Pizzicato.context.createBuffer(2, length, Pz.context.sampleRate);
                    var conf_shortcuts_icon = impulse.getChannelData(0);
                    var conf_shortcuts_target = impulse.getChannelData(1);
                    /** @type {number} */
                    i = 0;
                    for (; length > i; i++) {
                        /** @type {number} */
                        n = this.reverse ? length - i : i;
                        /** @type {number} */
                        conf_shortcuts_icon[i] = (2 * Math.random() - 1) * Math.pow(1 - n / length, this.decay);
                        /** @type {number} */
                        conf_shortcuts_target[i] = (2 * Math.random() - 1) * Math.pow(1 - n / length, this.decay);
                    }
                    this.reverbNode.buffer = impulse;
                }

                /**
                 * @param {number} gain
                 * @return {?}
                 */
                function getDistortionCurve(gain) {
                    var length = Pz.context.sampleRate;
                    /** @type {!Float32Array} */
                    var curve = new Float32Array(length);
                    /** @type {number} */
                    var n = Math.PI / 180;
                    /** @type {number} */
                    var i = 0;
                    for (; length > i; i++) {
                        /** @type {number} */
                        var x = 2 * i / length - 1;
                        /** @type {number} */
                        curve[i] = (3 + gain) * x * 20 * n / (Math.PI + gain * Math.abs(x));
                    }
                    return curve;
                }

                var Pizzicato = {};
                var Pz = Pizzicato;
                var p = "object" == typeof module && module.exports;
                var argsObj = getArguments(57);
                if (p) {
                    module.exports = Pizzicato;
                } else {
                    if (argsObj) {
                        /** @type {!Array} */
                        e = [];
                        o = Pizzicato;
                        if (void 0 !== (msg = "function" == typeof o ? o.apply(s, e) : o)) {
                            module.exports = msg;
                        }
                    } else {
                        root.Pizzicato = root.Pz = Pizzicato;
                    }
                }
                var Context = root.AudioContext || root.webkitAudioContext;
                if (Context) {
                    Pizzicato.context = new Context;
                    var gainNode = Pizzicato.context.createGain();
                    gainNode.connect(Pizzicato.context.destination);
                    Pizzicato.Util = {
                        isString: function (value) {
                            return "[object String]" === toString.call(value);
                        },
                        isObject: function (value) {
                            return "[object Object]" === toString.call(value);
                        },
                        isFunction: function (value) {
                            return "[object Function]" === toString.call(value);
                        },
                        isNumber: function (value) {
                            return "[object Number]" === toString.call(value) && value === +value;
                        },
                        isArray: function (obj) {
                            return "[object Array]" === toString.call(obj);
                        },
                        isInRange: function (value, range, i) {
                            return !!(Pz.Util.isNumber(value) && Pz.Util.isNumber(range) && Pz.Util.isNumber(i)) && (value >= range && i >= value);
                        },
                        isBool: function (val) {
                            return "boolean" == typeof val;
                        },
                        isOscillator: function (audioNode) {
                            return audioNode && "[object OscillatorNode]" === audioNode.toString();
                        },
                        isAudioBufferSourceNode: function (audioNode) {
                            return audioNode && "[object AudioBufferSourceNode]" === audioNode.toString();
                        },
                        isSound: function (sound) {
                            return sound instanceof Pz.Sound;
                        },
                        isEffect: function (object) {
                            var key;
                            for (key in Pizzicato.Effects) {
                                if (object instanceof Pizzicato.Effects[key]) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        normalize: function (s, p, n) {
                            return Pz.Util.isNumber(s) && Pz.Util.isNumber(p) && Pz.Util.isNumber(n) ? (n - p) * s / 1 + p : void 0;
                        },
                        getDryLevel: function (mix) {
                            return !Pz.Util.isNumber(mix) || mix > 1 || 0 > mix ? 0 : .5 >= mix ? 1 : 1 - 2 * (mix - .5);
                        },
                        getWetLevel: function (mix) {
                            return !Pz.Util.isNumber(mix) || mix > 1 || 0 > mix ? 0 : mix >= .5 ? 1 : 1 - 2 * (.5 - mix);
                        }
                    };
                    var ancestors = Pizzicato.context.createGain();
                    /** @type {(Object|null)} */
                    var mongoose = Object.getPrototypeOf(Object.getPrototypeOf(ancestors));
                    var connect_orig = mongoose.connect;
                    /**
                     * @param {string} node
                     * @return {?}
                     */
                    mongoose.connect = function (node) {
                        var targetNode = Pz.Util.isEffect(node) ? node.inputNode : node;
                        return connect_orig.call(this, targetNode), node;
                    };
                    Object.defineProperty(Pizzicato, "volume", {
                        enumerable: true,
                        get: function () {
                            return gainNode.gain.value;
                        },
                        set: function (value) {
                            if (Pz.Util.isInRange(value, 0, 1) && gainNode) {
                                /** @type {!Object} */
                                gainNode.gain.value = value;
                            }
                        }
                    });
                    Object.defineProperty(Pizzicato, "masterGainNode", {
                        enumerable: false,
                        get: function () {
                            return gainNode;
                        },
                        set: function (type) {
                        }
                    });
                    Pizzicato.Events = {
                        on: function (name, callback, context) {
                            if (name && callback) {
                                this._events = this._events || {};
                                (this._events[name] || (this._events[name] = [])).push({
                                    callback: callback,
                                    context: context || this,
                                    handler: this
                                });
                            }
                        },
                        trigger: function (type) {
                            if (type) {
                                var queue;
                                var length;
                                var constructorArgs;
                                var index;
                                if (this._events = this._events || {}, queue = this._events[type] || (this._events[type] = [])) {
                                    /** @type {number} */
                                    length = Math.max(0, arguments.length - 1);
                                    /** @type {!Array} */
                                    constructorArgs = [];
                                    /** @type {number} */
                                    index = 0;
                                    for (; length > index; index++) {
                                        constructorArgs[index] = arguments[index + 1];
                                    }
                                    /** @type {number} */
                                    index = 0;
                                    for (; index < queue.length; index++) {
                                        queue[index].callback.apply(queue[index].context, constructorArgs);
                                    }
                                }
                            }
                        },
                        off: function (name) {
                            if (name) {
                                this._events[name] = void 0;
                            } else {
                                this._events = {};
                            }
                        }
                    };
                    /**
                     * @param {string} description
                     * @param {?} callback
                     * @return {undefined}
                     */
                    Pizzicato.Sound = function (description, callback) {
                        /**
                         * @param {number} waveOptions
                         * @param {!Object} callback
                         * @return {undefined}
                         */
                        function initializeWithWave(waveOptions, callback) {
                            waveOptions = waveOptions || {};
                            /**
                             * @return {?}
                             */
                            this.getRawSourceNode = function () {
                                var frequency = this.sourceNode ? this.sourceNode.frequency.value : waveOptions.frequency;
                                var oscillator = Pizzicato.context.createOscillator();
                                return oscillator.type = waveOptions.type || "sine", oscillator.frequency.value = frequency || 440, oscillator;
                            };
                            this.sourceNode = this.getRawSourceNode();
                            this.sourceNode.gainSuccessor = Pz.context.createGain();
                            this.sourceNode.connect(this.sourceNode.gainSuccessor);
                            if (util.isFunction(callback)) {
                                callback();
                            }
                        }

                        /**
                         * @param {!Object} paths
                         * @param {!Object} callback
                         * @return {undefined}
                         */
                        function initializeWithUrl(paths, callback) {
                            paths = util.isArray(paths) ? paths : [paths];
                            /** @type {!XMLHttpRequest} */
                            var request = new XMLHttpRequest;
                            request.open("GET", paths[0], true);
                            /** @type {string} */
                            request.responseType = "arraybuffer";
                            /**
                             * @param {!Event} event
                             * @return {undefined}
                             */
                            request.onload = function (event) {
                                Pizzicato.context.decodeAudioData(event.target.response, function (result) {
                                    /**
                                     * @return {?}
                                     */
                                    self.getRawSourceNode = function () {
                                        var o = Pizzicato.context.createBufferSource();
                                        return o.loop = this.loop, o.buffer = result, o;
                                    };
                                    if (util.isFunction(callback)) {
                                        callback();
                                    }
                                }.bind(self), function (e) {
                                    return paths.length > 1 ? (paths.shift(), void initializeWithUrl(paths, callback)) : (e = e || new Error("Error decoding audio file " + paths[0]), void(util.isFunction(callback) && callback(e)));
                                }.bind(self));
                            };
                            /**
                             * @param {?} isTimeout
                             * @return {undefined}
                             */
                            request.onreadystatechange = function (isTimeout) {
                                if (4 === request.readyState) {
                                    request.status;
                                }
                            };
                            request.send();
                        }

                        /**
                         * @param {?} options
                         * @param {!Object} callback
                         * @return {undefined}
                         */
                        function initializeWithInput(options, callback) {
                            if (navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia, navigator.getUserMedia || navigator.mediaDevices.getUserMedia) {
                                var handleStream = function (localMediaStream) {
                                    /**
                                     * @return {?}
                                     */
                                    self.getRawSourceNode = function () {
                                        return Pizzicato.context.createMediaStreamSource(localMediaStream);
                                    };
                                    if (util.isFunction(callback)) {
                                        callback();
                                    }
                                }.bind(self);
                                /**
                                 * @param {?} where
                                 * @return {undefined}
                                 */
                                var handleError = function (where) {
                                    if (util.isFunction(callback)) {
                                        callback(where);
                                    }
                                };
                                if (navigator.mediaDevices.getUserMedia) {
                                    navigator.mediaDevices.getUserMedia({
                                        audio: true
                                    }).then(handleStream).catch(handleError);
                                } else {
                                    navigator.getUserMedia({
                                        audio: true
                                    }, handleStream, handleError);
                                }
                            }
                        }

                        /**
                         * @param {!Object} options
                         * @param {?} callback
                         * @return {undefined}
                         */
                        function initializeWithFunction(options, callback) {
                            var audioFunction = util.isFunction(options) ? options : options.audioFunction;
                            var bufferSize = util.isObject(options) && options.bufferSize ? options.bufferSize : null;
                            if (!bufferSize) {
                                try {
                                    Pizzicato.context.createScriptProcessor();
                                } catch (t) {
                                    /** @type {number} */
                                    bufferSize = 2048;
                                }
                            }
                            /**
                             * @return {?}
                             */
                            this.getRawSourceNode = function () {
                                var node = Pizzicato.context.createScriptProcessor(bufferSize, 1, 1);
                                return node.onaudioprocess = audioFunction, node;
                            };
                        }

                        /**
                         * @param {!Object} options
                         * @param {?} callback
                         * @return {undefined}
                         */
                        function initializeWithSoundObject(options, callback) {
                            this.getRawSourceNode = options.sound.getRawSourceNode;
                            if (options.sound.sourceNode && Pz.Util.isOscillator(options.sound.sourceNode)) {
                                this.sourceNode = this.getRawSourceNode();
                                this.frequency = options.sound.frequency;
                            }
                        }

                        var self = this;
                        var util = Pizzicato.Util;
                        var scriptName = function (description) {
                            /** @type {!Array} */
                            var supportedSources = ["wave", "file", "input", "script", "sound"];
                            if (description && !util.isFunction(description) && !util.isString(description) && !util.isObject(description)) {
                                return "Description type not supported. Initialize a sound using an object, a function or a string.";
                            }
                            if (util.isObject(description)) {
                                if (!util.isString(description.source) || -1 === supportedSources.indexOf(description.source)) {
                                    return "Specified source not supported. Sources can be wave, file, input or script";
                                }
                                if (!("file" !== description.source || description.options && description.options.path)) {
                                    return "A path is needed for sounds with a file source";
                                }
                                if (!("script" !== description.source || description.options && description.options.audioFunction)) {
                                    return "An audio function is needed for sounds with a script source";
                                }
                            }
                        }(description);
                        var hasOptions = util.isObject(description) && util.isObject(description.options);
                        if (scriptName) {
                            throw new Error("Error initializing Pizzicato Sound: " + scriptName);
                        }
                        this.detached = hasOptions && description.options.detached;
                        this.masterVolume = Pizzicato.context.createGain();
                        this.fadeNode = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.fadeNode.gain.value = 0;
                        if (!this.detached) {
                            this.masterVolume.connect(Pizzicato.masterGainNode);
                        }
                        /** @type {number} */
                        this.lastTimePlayed = 0;
                        /** @type {!Array} */
                        this.effects = [];
                        /** @type {!Array} */
                        this.effectConnectors = [];
                        /** @type {boolean} */
                        this.playing = this.paused = false;
                        this.loop = hasOptions && description.options.loop;
                        this.attack = hasOptions && util.isNumber(description.options.attack) ? description.options.attack : .04;
                        this.volume = hasOptions && util.isNumber(description.options.volume) ? description.options.volume : 1;
                        if (hasOptions && util.isNumber(description.options.release)) {
                            this.release = description.options.release;
                        } else {
                            if (hasOptions && util.isNumber(description.options.sustain)) {
                                this.release = description.options.sustain;
                            } else {
                                /** @type {number} */
                                this.release = .04;
                            }
                        }
                        if (description) {
                            if (util.isString(description)) {
                                initializeWithUrl.bind(this)(description, callback);
                            } else {
                                if (util.isFunction(description)) {
                                    initializeWithFunction.bind(this)(description, callback);
                                } else {
                                    if ("file" === description.source) {
                                        initializeWithUrl.bind(this)(description.options.path, callback);
                                    } else {
                                        if ("wave" === description.source) {
                                            initializeWithWave.bind(this)(description.options, callback);
                                        } else {
                                            if ("input" === description.source) {
                                                initializeWithInput.bind(this)(description, callback);
                                            } else {
                                                if ("script" === description.source) {
                                                    initializeWithFunction.bind(this)(description.options, callback);
                                                } else {
                                                    if ("sound" === description.source) {
                                                        initializeWithSoundObject.bind(this)(description.options, callback);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            initializeWithWave.bind(this)({}, callback);
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Sound.prototype = Object.create(Pizzicato.Events, {
                        play: {
                            enumerable: true,
                            value: function (type, name) {
                                if (!this.playing) {
                                    if (!Pz.Util.isNumber(name)) {
                                        name = this.offsetTime || 0;
                                    }
                                    if (!Pz.Util.isNumber(type)) {
                                        /** @type {number} */
                                        type = 0;
                                    }
                                    /** @type {boolean} */
                                    this.playing = true;
                                    /** @type {boolean} */
                                    this.paused = false;
                                    this.sourceNode = this.getSourceNode();
                                    this.applyAttack();
                                    if (Pz.Util.isFunction(this.sourceNode.start)) {
                                        /** @type {number} */
                                        this.lastTimePlayed = Pizzicato.context.currentTime - name;
                                        this.sourceNode.start(Pz.context.currentTime + type, name);
                                    }
                                    this.trigger("play");
                                }
                            }
                        },
                        stop: {
                            enumerable: true,
                            value: function () {
                                if (this.paused || this.playing) {
                                    /** @type {boolean} */
                                    this.paused = this.playing = false;
                                    this.stopWithRelease();
                                    /** @type {number} */
                                    this.offsetTime = 0;
                                    this.trigger("stop");
                                }
                            }
                        },
                        pause: {
                            enumerable: true,
                            value: function () {
                                if (!this.paused && this.playing) {
                                    /** @type {boolean} */
                                    this.paused = true;
                                    /** @type {boolean} */
                                    this.playing = false;
                                    this.stopWithRelease();
                                    /** @type {number} */
                                    var elapsedTime = Pz.context.currentTime - this.lastTimePlayed;
                                    if (this.sourceNode.buffer) {
                                        /** @type {number} */
                                        this.offsetTime = elapsedTime % (this.sourceNode.buffer.length / Pz.context.sampleRate);
                                    } else {
                                        /** @type {number} */
                                        this.offsetTime = elapsedTime;
                                    }
                                    this.trigger("pause");
                                }
                            }
                        },
                        clone: {
                            enumerable: true,
                            value: function () {
                                var clone = new Pizzicato.Sound({
                                    source: "sound",
                                    options: {
                                        loop: this.loop,
                                        attack: this.attack,
                                        release: this.release,
                                        volume: this.volume,
                                        sound: this
                                    }
                                });
                                /** @type {number} */
                                var i = 0;
                                for (; i < this.effects.length; i++) {
                                    clone.addEffect(this.effects[i]);
                                }
                                return clone;
                            }
                        },
                        onEnded: {
                            enumerable: true,
                            value: function (type) {
                                return function () {
                                    if (!(this.sourceNode && this.sourceNode !== type)) {
                                        if (this.playing) {
                                            this.stop();
                                        }
                                        if (!this.paused) {
                                            this.trigger("end");
                                        }
                                    }
                                };
                            }
                        },
                        addEffect: {
                            enumerable: true,
                            value: function (a) {
                                if (!Pz.Util.isEffect(a)) {
                                    return this;
                                }
                                this.effects.push(a);
                                var previousNode = this.effectConnectors.length > 0 ? this.effectConnectors[this.effectConnectors.length - 1] : this.fadeNode;
                                previousNode.disconnect();
                                previousNode.connect(a);
                                var index = Pz.context.createGain();
                                return this.effectConnectors.push(index), a.connect(index), index.connect(this.masterVolume), this;
                            }
                        },
                        removeEffect: {
                            enumerable: true,
                            value: function (type) {
                                var index = this.effects.indexOf(type);
                                if (-1 === index) {
                                    return this;
                                }
                                var wasPlaying = this.playing;
                                if (wasPlaying) {
                                    this.pause();
                                }
                                var previousNode = 0 === index ? this.fadeNode : this.effectConnectors[index - 1];
                                previousNode.disconnect();
                                var group = this.effectConnectors[index];
                                group.disconnect();
                                type.disconnect(group);
                                this.effectConnectors.splice(index, 1);
                                this.effects.splice(index, 1);
                                var targetNode;
                                return targetNode = index > this.effects.length - 1 || 0 === this.effects.length ? this.masterVolume : this.effects[index], previousNode.connect(targetNode), wasPlaying && this.play(), this;
                            }
                        },
                        connect: {
                            enumerable: true,
                            value: function (type) {
                                return this.masterVolume.connect(type), this;
                            }
                        },
                        disconnect: {
                            enumerable: true,
                            value: function (name) {
                                return this.masterVolume.disconnect(name), this;
                            }
                        },
                        connectEffects: {
                            enumerable: true,
                            value: function () {
                                /** @type {!Array} */
                                var conf_lang_text = [];
                                /** @type {number} */
                                var i = 0;
                                for (; i < this.effects.length; i++) {
                                    /** @type {boolean} */
                                    var isLastEffect = i === this.effects.length - 1;
                                    var destinationNode = isLastEffect ? this.masterVolume : this.effects[i + 1].inputNode;
                                    conf_lang_text[i] = Pz.context.createGain();
                                    this.effects[i].outputNode.disconnect(this.effectConnectors[i]);
                                    this.effects[i].outputNode.connect(destinationNode);
                                }
                            }
                        },
                        volume: {
                            enumerable: true,
                            get: function () {
                                return this.masterVolume ? this.masterVolume.gain.value : void 0;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1) && this.masterVolume) {
                                    /** @type {!Object} */
                                    this.masterVolume.gain.value = value;
                                }
                            }
                        },
                        frequency: {
                            enumerable: true,
                            get: function () {
                                return this.sourceNode && Pz.Util.isOscillator(this.sourceNode) ? this.sourceNode.frequency.value : null;
                            },
                            set: function (type) {
                                if (this.sourceNode && Pz.Util.isOscillator(this.sourceNode)) {
                                    /** @type {!Object} */
                                    this.sourceNode.frequency.value = type;
                                }
                            }
                        },
                        sustain: {
                            enumerable: true,
                            get: function () {
                                return this.release;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 10)) {
                                    /** @type {!Object} */
                                    this.release = value;
                                }
                            }
                        },
                        getSourceNode: {
                            enumerable: true,
                            value: function () {
                                if (this.sourceNode) {
                                    var previousSourceNode = this.sourceNode;
                                    previousSourceNode.gainSuccessor.gain.setValueAtTime(previousSourceNode.gainSuccessor.gain.value, Pz.context.currentTime);
                                    previousSourceNode.gainSuccessor.gain.linearRampToValueAtTime(1e-4, Pz.context.currentTime + .2);
                                    setTimeout(function () {
                                        previousSourceNode.disconnect();
                                        previousSourceNode.gainSuccessor.disconnect();
                                    }, 200);
                                }
                                var sourceNode = this.getRawSourceNode();
                                return sourceNode.gainSuccessor = Pz.context.createGain(), sourceNode.connect(sourceNode.gainSuccessor), sourceNode.gainSuccessor.connect(this.fadeNode), this.fadeNode.connect(this.getInputNode()), Pz.Util.isAudioBufferSourceNode(sourceNode) && (sourceNode.onended = this.onEnded(sourceNode).bind(this)), sourceNode;
                            }
                        },
                        getInputNode: {
                            enumerable: true,
                            value: function () {
                                return this.effects.length > 0 ? this.effects[0].inputNode : this.masterVolume;
                            }
                        },
                        applyAttack: {
                            enumerable: false,
                            value: function () {
                                if (this.fadeNode.gain.value, this.fadeNode.gain.cancelScheduledValues(Pz.context.currentTime), !this.attack) {
                                    return void this.fadeNode.gain.setTargetAtTime(1, Pz.context.currentTime, .001);
                                }
                                /** @type {boolean} */
                                var t = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
                                var a = this.attack;
                                if (!t) {
                                    /** @type {number} */
                                    a = (1 - this.fadeNode.gain.value) * this.attack;
                                }
                                this.fadeNode.gain.setTargetAtTime(1, Pz.context.currentTime, 2 * a);
                            }
                        },
                        stopWithRelease: {
                            enumerable: false,
                            value: function (type) {
                                var node = this.sourceNode;
                                /**
                                 * @return {?}
                                 */
                                var cb = function () {
                                    return Pz.Util.isFunction(node.stop) ? node.stop(0) : node.disconnect();
                                };
                                if (this.fadeNode.gain.value, this.fadeNode.gain.cancelScheduledValues(Pz.context.currentTime), !this.release) {
                                    return this.fadeNode.gain.setTargetAtTime(0, Pz.context.currentTime, .001), void cb();
                                }
                                /** @type {boolean} */
                                var n = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
                                var duration = this.release;
                                if (!n) {
                                    /** @type {number} */
                                    duration = this.fadeNode.gain.value * this.release;
                                }
                                this.fadeNode.gain.setTargetAtTime(1e-5, Pz.context.currentTime, duration / 5);
                                window.setTimeout(function () {
                                    cb();
                                }, 1e3 * duration);
                            }
                        }
                    });
                    /**
                     * @param {number} sounds
                     * @return {undefined}
                     */
                    Pizzicato.Group = function (sounds) {
                        sounds = sounds || [];
                        this.mergeGainNode = Pz.context.createGain();
                        this.masterVolume = Pz.context.createGain();
                        /** @type {!Array} */
                        this.sounds = [];
                        /** @type {!Array} */
                        this.effects = [];
                        /** @type {!Array} */
                        this.effectConnectors = [];
                        this.mergeGainNode.connect(this.masterVolume);
                        this.masterVolume.connect(Pz.masterGainNode);
                        /** @type {number} */
                        var i = 0;
                        for (; i < sounds.length; i++) {
                            this.addSound(sounds[i]);
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Group.prototype = Object.create(Pz.Events, {
                        connect: {
                            enumerable: true,
                            value: function (type) {
                                return this.masterVolume.connect(type), this;
                            }
                        },
                        disconnect: {
                            enumerable: true,
                            value: function (name) {
                                return this.masterVolume.disconnect(name), this;
                            }
                        },
                        addSound: {
                            enumerable: true,
                            value: function (value) {
                                return Pz.Util.isSound(value) ? this.sounds.indexOf(value) > -1 ? void 0 : value.detached ? void 0 : (value.disconnect(Pz.masterGainNode), value.connect(this.mergeGainNode), void this.sounds.push(value)) : void 0;
                            }
                        },
                        removeSound: {
                            enumerable: true,
                            value: function (value) {
                                var index = this.sounds.indexOf(value);
                                return -1 === index ? void 0 : (value.disconnect(this.mergeGainNode), value.connect(Pz.masterGainNode), void this.sounds.splice(index, 1));
                            }
                        },
                        volume: {
                            enumerable: true,
                            get: function () {
                                return this.masterVolume ? this.masterVolume.gain.value : void 0;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.masterVolume.gain.value = value;
                                }
                            }
                        },
                        play: {
                            enumerable: true,
                            value: function () {
                                /** @type {number} */
                                var i = 0;
                                for (; i < this.sounds.length; i++) {
                                    this.sounds[i].play();
                                }
                                this.trigger("play");
                            }
                        },
                        stop: {
                            enumerable: true,
                            value: function () {
                                /** @type {number} */
                                var i = 0;
                                for (; i < this.sounds.length; i++) {
                                    this.sounds[i].stop();
                                }
                                this.trigger("stop");
                            }
                        },
                        pause: {
                            enumerable: true,
                            value: function () {
                                /** @type {number} */
                                var i = 0;
                                for (; i < this.sounds.length; i++) {
                                    this.sounds[i].pause();
                                }
                                this.trigger("pause");
                            }
                        },
                        addEffect: {
                            enumerable: true,
                            value: function (a) {
                                if (!Pz.Util.isEffect(a)) {
                                    return this;
                                }
                                this.effects.push(a);
                                var previousNode = this.effectConnectors.length > 0 ? this.effectConnectors[this.effectConnectors.length - 1] : this.mergeGainNode;
                                previousNode.disconnect();
                                previousNode.connect(a);
                                var index = Pz.context.createGain();
                                return this.effectConnectors.push(index), a.connect(index), index.connect(this.masterVolume), this;
                            }
                        },
                        removeEffect: {
                            enumerable: true,
                            value: function (type) {
                                var index = this.effects.indexOf(type);
                                if (-1 === index) {
                                    return this;
                                }
                                var previousNode = 0 === index ? this.mergeGainNode : this.effectConnectors[index - 1];
                                previousNode.disconnect();
                                var group = this.effectConnectors[index];
                                group.disconnect();
                                type.disconnect(group);
                                this.effectConnectors.splice(index, 1);
                                this.effects.splice(index, 1);
                                var targetNode;
                                return targetNode = index > this.effects.length - 1 || 0 === this.effects.length ? this.masterVolume : this.effects[index], previousNode.connect(targetNode), this;
                            }
                        }
                    });
                    Pizzicato.Effects = {};
                    /** @type {!Object} */
                    var baseEffect = Object.create(null, {
                        connect: {
                            enumerable: true,
                            value: function (type) {
                                return this.outputNode.connect(type), this;
                            }
                        },
                        disconnect: {
                            enumerable: true,
                            value: function (name) {
                                return this.outputNode.disconnect(name), this;
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Delay = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            feedback: .5,
                            time: .3,
                            mix: .5
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.feedbackGainNode = Pizzicato.context.createGain();
                        this.delayNode = Pizzicato.context.createDelay();
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.delayNode.connect(this.feedbackGainNode);
                        this.feedbackGainNode.connect(this.delayNode);
                        this.inputNode.connect(this.delayNode);
                        this.delayNode.connect(this.wetGainNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Delay.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        time: {
                            enumerable: true,
                            get: function () {
                                return this.options.time;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 180)) {
                                    /** @type {!Object} */
                                    this.options.time = value;
                                    /** @type {!Object} */
                                    this.delayNode.delayTime.value = value;
                                }
                            }
                        },
                        feedback: {
                            enumerable: true,
                            get: function () {
                                return this.options.feedback;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {number} */
                                    this.options.feedback = parseFloat(value, 10);
                                    this.feedbackGainNode.gain.value = this.feedback;
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Compressor = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            threshold: -24,
                            knee: 30,
                            attack: .003,
                            release: .25,
                            ratio: 12
                        };
                        this.inputNode = this.compressorNode = Pizzicato.context.createDynamicsCompressor();
                        this.outputNode = Pizzicato.context.createGain();
                        this.compressorNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Compressor.prototype = Object.create(baseEffect, {
                        threshold: {
                            enumerable: true,
                            get: function () {
                                return this.compressorNode.threshold.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, -100, 0)) {
                                    /** @type {!Object} */
                                    this.compressorNode.threshold.value = value;
                                }
                            }
                        },
                        knee: {
                            enumerable: true,
                            get: function () {
                                return this.compressorNode.knee.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 0, 40)) {
                                    /** @type {!Object} */
                                    this.compressorNode.knee.value = value;
                                }
                            }
                        },
                        attack: {
                            enumerable: true,
                            get: function () {
                                return this.compressorNode.attack.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.compressorNode.attack.value = value;
                                }
                            }
                        },
                        release: {
                            enumerable: true,
                            get: function () {
                                return this.compressorNode.release.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.compressorNode.release.value = value;
                                }
                            }
                        },
                        ratio: {
                            enumerable: true,
                            get: function () {
                                return this.compressorNode.ratio.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 1, 20)) {
                                    /** @type {string} */
                                    this.compressorNode.ratio.value = value;
                                }
                            }
                        },
                        getCurrentGainReduction: function () {
                            return this.compressorNode.reduction;
                        }
                    });
                    /**
                     * @param {!Object} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.LowPassFilter = function (options) {
                        Filter.call(this, options, "lowpass");
                    };
                    /**
                     * @param {!Object} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.HighPassFilter = function (options) {
                        Filter.call(this, options, "highpass");
                    };
                    /** @type {!Object} */
                    var filterPrototype = Object.create(baseEffect, {
                        frequency: {
                            enumerable: true,
                            get: function () {
                                return this.filterNode.frequency.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 10, 22050)) {
                                    /** @type {!Object} */
                                    this.filterNode.frequency.value = value;
                                }
                            }
                        },
                        peak: {
                            enumerable: true,
                            get: function () {
                                return this.filterNode.Q.value;
                            },
                            set: function (value) {
                                if (Pizzicato.Util.isInRange(value, 1e-4, 1e3)) {
                                    /** @type {!Object} */
                                    this.filterNode.Q.value = value;
                                }
                            }
                        }
                    });
                    /** @type {!Object} */
                    Pizzicato.Effects.LowPassFilter.prototype = filterPrototype;
                    /** @type {!Object} */
                    Pizzicato.Effects.HighPassFilter.prototype = filterPrototype;
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Distortion = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            gain: .5
                        };
                        this.waveShaperNode = Pizzicato.context.createWaveShaper();
                        this.inputNode = this.outputNode = this.waveShaperNode;
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Distortion.prototype = Object.create(baseEffect, {
                        gain: {
                            enumerable: true,
                            get: function () {
                                return this.options.gain;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.gain = value;
                                    this.adjustGain();
                                }
                            }
                        },
                        adjustGain: {
                            writable: false,
                            configurable: false,
                            enumerable: false,
                            value: function () {
                                var x;
                                /** @type {number} */
                                var gain = Pz.Util.isNumber(this.options.gain) ? parseInt(100 * this.options.gain, 10) : 50;
                                /** @type {number} */
                                var length = 44100;
                                /** @type {!Float32Array} */
                                var curve = new Float32Array(length);
                                /** @type {number} */
                                var r = Math.PI / 180;
                                /** @type {number} */
                                var i = 0;
                                for (; length > i; ++i) {
                                    /** @type {number} */
                                    x = 2 * i / length - 1;
                                    /** @type {number} */
                                    curve[i] = (3 + gain) * x * 20 * r / (Math.PI + gain * Math.abs(x));
                                }
                                /** @type {!Float32Array} */
                                this.waveShaperNode.curve = curve;
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Flanger = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            time: .45,
                            speed: .2,
                            depth: .1,
                            feedback: .1,
                            mix: .5
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.inputFeedbackNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.delayNode = Pizzicato.context.createDelay();
                        this.oscillatorNode = Pizzicato.context.createOscillator();
                        this.gainNode = Pizzicato.context.createGain();
                        this.feedbackNode = Pizzicato.context.createGain();
                        /** @type {string} */
                        this.oscillatorNode.type = "sine";
                        this.inputNode.connect(this.inputFeedbackNode);
                        this.inputNode.connect(this.dryGainNode);
                        this.inputFeedbackNode.connect(this.delayNode);
                        this.inputFeedbackNode.connect(this.wetGainNode);
                        this.delayNode.connect(this.wetGainNode);
                        this.delayNode.connect(this.feedbackNode);
                        this.feedbackNode.connect(this.inputFeedbackNode);
                        this.oscillatorNode.connect(this.gainNode);
                        this.gainNode.connect(this.delayNode.delayTime);
                        this.dryGainNode.connect(this.outputNode);
                        this.wetGainNode.connect(this.outputNode);
                        this.oscillatorNode.start(0);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Flanger.prototype = Object.create(baseEffect, {
                        time: {
                            enumberable: true,
                            get: function () {
                                return this.options.time;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.time = value;
                                    this.delayNode.delayTime.value = Pz.Util.normalize(value, .001, .02);
                                }
                            }
                        },
                        speed: {
                            enumberable: true,
                            get: function () {
                                return this.options.speed;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.speed = value;
                                    this.oscillatorNode.frequency.value = Pz.Util.normalize(value, .5, 5);
                                }
                            }
                        },
                        depth: {
                            enumberable: true,
                            get: function () {
                                return this.options.depth;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {number} */
                                    this.options.depth = value;
                                    this.gainNode.gain.value = Pz.Util.normalize(value, 5e-4, .005);
                                }
                            }
                        },
                        feedback: {
                            enumberable: true,
                            get: function () {
                                return this.options.feedback;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.feedback = value;
                                    this.feedbackNode.gain.value = Pz.Util.normalize(value, 0, .8);
                                }
                            }
                        },
                        mix: {
                            enumberable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.StereoPanner = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            pan: 0
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        if (Pizzicato.context.createStereoPanner) {
                            this.pannerNode = Pizzicato.context.createStereoPanner();
                            this.inputNode.connect(this.pannerNode);
                            this.pannerNode.connect(this.outputNode);
                        } else {
                            if (Pizzicato.context.createPanner) {
                                this.pannerNode = Pizzicato.context.createPanner();
                                /** @type {string} */
                                this.pannerNode.type = "equalpower";
                                this.inputNode.connect(this.pannerNode);
                                this.pannerNode.connect(this.outputNode);
                            } else {
                                this.inputNode.connect(this.outputNode);
                            }
                        }
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.StereoPanner.prototype = Object.create(baseEffect, {
                        pan: {
                            enumerable: true,
                            get: function () {
                                return this.options.pan;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, -1, 1) && (this.options.pan = value, this.pannerNode)) {
                                    if (this.pannerNode.toString().indexOf("StereoPannerNode") > -1) {
                                        /** @type {!Object} */
                                        this.pannerNode.pan.value = value;
                                    } else {
                                        this.pannerNode.setPosition(value, 0, 1 - Math.abs(value));
                                    }
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @param {!Function} callback
                     * @return {?}
                     */
                    Pizzicato.Effects.Convolver = function (options, callback) {
                        this.options = {};
                        options = options || this.options;
                        var self = this;
                        /** @type {!XMLHttpRequest} */
                        var request = new XMLHttpRequest;
                        var map = {
                            mix: .5
                        };
                        /** @type {!Function} */
                        this.callback = callback;
                        this.inputNode = Pizzicato.context.createGain();
                        this.convolverNode = Pizzicato.context.createConvolver();
                        this.outputNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.inputNode.connect(this.convolverNode);
                        this.convolverNode.connect(this.wetGainNode);
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.wetGainNode.connect(this.outputNode);
                        var i;
                        for (i in map) {
                            this[i] = options[i];
                            this[i] = void 0 === this[i] || null === this[i] ? map[i] : this[i];
                        }
                        return options.impulse ? (request.open("GET", options.impulse, true), request.responseType = "arraybuffer", request.onload = function (event) {
                            var buffer = event.target.response;
                            Pizzicato.context.decodeAudioData(buffer, function (fullScreenQuad) {
                                /** @type {number} */
                                self.convolverNode.buffer = fullScreenQuad;
                                if (self.callback && Pz.Util.isFunction(self.callback)) {
                                    self.callback();
                                }
                            }, function (error) {
                                error = error || new Error("Error decoding impulse file");
                                if (self.callback && Pz.Util.isFunction(self.callback)) {
                                    self.callback(error);
                                }
                            });
                        }, request.onreadystatechange = function (isTimeout) {
                            if (4 === request.readyState) {
                                request.status;
                            }
                        }, void request.send()) : void 0;
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Convolver.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.PingPongDelay = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            feedback: .5,
                            time: .3,
                            mix: .5
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.delayNodeLeft = Pizzicato.context.createDelay();
                        this.delayNodeRight = Pizzicato.context.createDelay();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.feedbackGainNode = Pizzicato.context.createGain();
                        this.channelMerger = Pizzicato.context.createChannelMerger(2);
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.delayNodeLeft.connect(this.channelMerger, 0, 0);
                        this.delayNodeRight.connect(this.channelMerger, 0, 1);
                        this.delayNodeLeft.connect(this.delayNodeRight);
                        this.feedbackGainNode.connect(this.delayNodeLeft);
                        this.delayNodeRight.connect(this.feedbackGainNode);
                        this.inputNode.connect(this.feedbackGainNode);
                        this.channelMerger.connect(this.wetGainNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.PingPongDelay.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        time: {
                            enumerable: true,
                            get: function () {
                                return this.options.time;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 180)) {
                                    /** @type {!Object} */
                                    this.options.time = value;
                                    /** @type {!Object} */
                                    this.delayNodeLeft.delayTime.value = value;
                                    /** @type {!Object} */
                                    this.delayNodeRight.delayTime.value = value;
                                }
                            }
                        },
                        feedback: {
                            enumerable: true,
                            get: function () {
                                return this.options.feedback;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {number} */
                                    this.options.feedback = parseFloat(value, 10);
                                    this.feedbackGainNode.gain.value = this.feedback;
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Reverb = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            mix: .5,
                            time: .01,
                            decay: .01,
                            reverse: false
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.reverbNode = Pizzicato.context.createConvolver();
                        this.outputNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.inputNode.connect(this.reverbNode);
                        this.reverbNode.connect(this.wetGainNode);
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                        buildImpulse.bind(this)();
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Reverb.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        time: {
                            enumerable: true,
                            get: function () {
                                return this.options.time;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 1e-4, 10)) {
                                    /** @type {!Object} */
                                    this.options.time = value;
                                    buildImpulse.bind(this)();
                                }
                            }
                        },
                        decay: {
                            enumerable: true,
                            get: function () {
                                return this.options.decay;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 1e-4, 10)) {
                                    /** @type {number} */
                                    this.options.decay = value;
                                    buildImpulse.bind(this)();
                                }
                            }
                        },
                        reverse: {
                            enumerable: true,
                            get: function () {
                                return this.options.reverse;
                            },
                            set: function (value) {
                                if (Pz.Util.isBool(value)) {
                                    /** @type {!Object} */
                                    this.options.reverse = value;
                                    buildImpulse.bind(this)();
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Tremolo = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            speed: 4,
                            depth: 1,
                            mix: .8
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.tremoloGainNode = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.tremoloGainNode.gain.value = 0;
                        this.lfoNode = Pizzicato.context.createOscillator();
                        this.shaperNode = Pizzicato.context.createWaveShaper();
                        /** @type {!Float32Array} */
                        this.shaperNode.curve = new Float32Array([0, 1]);
                        this.shaperNode.connect(this.tremoloGainNode.gain);
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.lfoNode.connect(this.shaperNode);
                        /** @type {string} */
                        this.lfoNode.type = "sine";
                        this.lfoNode.start(0);
                        this.inputNode.connect(this.tremoloGainNode);
                        this.tremoloGainNode.connect(this.wetGainNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Tremolo.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        speed: {
                            enumerable: true,
                            get: function () {
                                return this.options.speed;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 20)) {
                                    /** @type {!Object} */
                                    this.options.speed = value;
                                    /** @type {!Object} */
                                    this.lfoNode.frequency.value = value;
                                }
                            }
                        },
                        depth: {
                            enumerable: true,
                            get: function () {
                                return this.options.depth;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {number} */
                                    this.options.depth = value;
                                    /** @type {!Float32Array} */
                                    this.shaperNode.curve = new Float32Array([1 - value, 1]);
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.DubDelay = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            feedback: .6,
                            time: .7,
                            mix: .5,
                            cutoff: 700
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.feedbackGainNode = Pizzicato.context.createGain();
                        this.delayNode = Pizzicato.context.createDelay();
                        this.bqFilterNode = Pizzicato.context.createBiquadFilter();
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.inputNode.connect(this.wetGainNode);
                        this.inputNode.connect(this.feedbackGainNode);
                        this.feedbackGainNode.connect(this.bqFilterNode);
                        this.bqFilterNode.connect(this.delayNode);
                        this.delayNode.connect(this.feedbackGainNode);
                        this.delayNode.connect(this.wetGainNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.DubDelay.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        time: {
                            enumerable: true,
                            get: function () {
                                return this.options.time;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 180)) {
                                    /** @type {!Object} */
                                    this.options.time = value;
                                    /** @type {!Object} */
                                    this.delayNode.delayTime.value = value;
                                }
                            }
                        },
                        feedback: {
                            enumerable: true,
                            get: function () {
                                return this.options.feedback;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {number} */
                                    this.options.feedback = parseFloat(value, 10);
                                    this.feedbackGainNode.gain.value = this.feedback;
                                }
                            }
                        },
                        cutoff: {
                            enumerable: true,
                            get: function () {
                                return this.options.cutoff;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 4e3)) {
                                    /** @type {!Object} */
                                    this.options.cutoff = value;
                                    this.bqFilterNode.frequency.value = this.cutoff;
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.RingModulator = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            speed: 30,
                            distortion: 1,
                            mix: .5
                        };
                        this.inputNode = Pizzicato.context.createGain();
                        this.outputNode = Pizzicato.context.createGain();
                        this.dryGainNode = Pizzicato.context.createGain();
                        this.wetGainNode = Pizzicato.context.createGain();
                        this.vIn = Pizzicato.context.createOscillator();
                        this.vIn.start(0);
                        this.vInGain = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.vInGain.gain.value = .5;
                        this.vInInverter1 = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.vInInverter1.gain.value = -1;
                        this.vInInverter2 = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.vInInverter2.gain.value = -1;
                        this.vInDiode1 = new DiodeNode(Pizzicato.context);
                        this.vInDiode2 = new DiodeNode(Pizzicato.context);
                        this.vInInverter3 = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.vInInverter3.gain.value = -1;
                        this.vcInverter1 = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.vcInverter1.gain.value = -1;
                        this.vcDiode3 = new DiodeNode(Pizzicato.context);
                        this.vcDiode4 = new DiodeNode(Pizzicato.context);
                        this.outGain = Pizzicato.context.createGain();
                        /** @type {number} */
                        this.outGain.gain.value = 3;
                        this.compressor = Pizzicato.context.createDynamicsCompressor();
                        /** @type {number} */
                        this.compressor.threshold.value = -24;
                        /** @type {number} */
                        this.compressor.ratio.value = 16;
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        this.inputNode.connect(this.vcInverter1);
                        this.inputNode.connect(this.vcDiode4.node);
                        this.vcInverter1.connect(this.vcDiode3.node);
                        this.vIn.connect(this.vInGain);
                        this.vInGain.connect(this.vInInverter1);
                        this.vInGain.connect(this.vcInverter1);
                        this.vInGain.connect(this.vcDiode4.node);
                        this.vInInverter1.connect(this.vInInverter2);
                        this.vInInverter1.connect(this.vInDiode2.node);
                        this.vInInverter2.connect(this.vInDiode1.node);
                        this.vInDiode1.connect(this.vInInverter3);
                        this.vInDiode2.connect(this.vInInverter3);
                        this.vInInverter3.connect(this.compressor);
                        this.vcDiode3.connect(this.compressor);
                        this.vcDiode4.connect(this.compressor);
                        this.compressor.connect(this.outGain);
                        this.outGain.connect(this.wetGainNode);
                        this.wetGainNode.connect(this.outputNode);
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /**
                     * @param {!Object} context_
                     * @return {undefined}
                     */
                    var DiodeNode = function (context_) {
                        /** @type {!Object} */
                        this.context = context_;
                        this.node = this.context.createWaveShaper();
                        /** @type {number} */
                        this.vb = .2;
                        /** @type {number} */
                        this.vl = .4;
                        /** @type {number} */
                        this.h = 1;
                        this.setCurve();
                    };
                    /**
                     * @param {number} h
                     * @return {?}
                     */
                    DiodeNode.prototype.setDistortion = function (h) {
                        return this.h = h, this.setCurve();
                    };
                    /**
                     * @return {?}
                     */
                    DiodeNode.prototype.setCurve = function () {
                        var i;
                        var samples;
                        var v;
                        var value;
                        var wsCurve;
                        var j;
                        var ref;
                        /** @type {number} */
                        samples = 1024;
                        /** @type {!Float32Array} */
                        wsCurve = new Float32Array(samples);
                        /** @type {number} */
                        i = j = 0;
                        /** @type {number} */
                        ref = wsCurve.length;
                        for (; ref >= 0 ? ref > j : j > ref; i = ref >= 0 ? ++j : --j) {
                            /** @type {number} */
                            v = (i - samples / 2) / (samples / 2);
                            /** @type {number} */
                            v = Math.abs(v);
                            /** @type {number} */
                            value = v <= this.vb ? 0 : this.vb < v && v <= this.vl ? this.h * (Math.pow(v - this.vb, 2) / (2 * this.vl - 2 * this.vb)) : this.h * v - this.h * this.vl + this.h * (Math.pow(this.vl - this.vb, 2) / (2 * this.vl - 2 * this.vb));
                            /** @type {number} */
                            wsCurve[i] = value;
                        }
                        return this.node.curve = wsCurve;
                    };
                    /**
                     * @param {!Object} node
                     * @return {?}
                     */
                    DiodeNode.prototype.connect = function (node) {
                        return this.node.connect(node);
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.RingModulator.prototype = Object.create(baseEffect, {
                        mix: {
                            enumerable: true,
                            get: function () {
                                return this.options.mix;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.mix = value;
                                    this.dryGainNode.gain.value = Pizzicato.Util.getDryLevel(this.mix);
                                    this.wetGainNode.gain.value = Pizzicato.Util.getWetLevel(this.mix);
                                }
                            }
                        },
                        speed: {
                            enumerable: true,
                            get: function () {
                                return this.options.speed;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 2e3)) {
                                    /** @type {!Object} */
                                    this.options.speed = value;
                                    /** @type {!Object} */
                                    this.vIn.frequency.value = value;
                                }
                            }
                        },
                        distortion: {
                            enumerable: true,
                            get: function () {
                                return this.options.distortion;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, .2, 50)) {
                                    /** @type {number} */
                                    this.options.distortion = parseFloat(value, 10);
                                    /** @type {!Array} */
                                    var diodeNodes = [this.vInDiode1, this.vInDiode2, this.vcDiode3, this.vcDiode4];
                                    /** @type {number} */
                                    var i = 0;
                                    /** @type {number} */
                                    var l = diodeNodes.length;
                                    for (; l > i; i++) {
                                        diodeNodes[i].setDistortion(value);
                                    }
                                }
                            }
                        }
                    });
                    /**
                     * @param {string} options
                     * @return {undefined}
                     */
                    Pizzicato.Effects.Quadrafuzz = function (options) {
                        this.options = {};
                        options = options || this.options;
                        var defaults = {
                            lowGain: .6,
                            midLowGain: .8,
                            midHighGain: .5,
                            highGain: .6
                        };
                        this.inputNode = Pz.context.createGain();
                        this.outputNode = Pz.context.createGain();
                        this.dryGainNode = Pz.context.createGain();
                        this.wetGainNode = Pz.context.createGain();
                        this.lowpassLeft = Pz.context.createBiquadFilter();
                        /** @type {string} */
                        this.lowpassLeft.type = "lowpass";
                        /** @type {number} */
                        this.lowpassLeft.frequency.value = 147;
                        /** @type {number} */
                        this.lowpassLeft.Q.value = .7071;
                        this.bandpass1Left = Pz.context.createBiquadFilter();
                        /** @type {string} */
                        this.bandpass1Left.type = "bandpass";
                        /** @type {number} */
                        this.bandpass1Left.frequency.value = 587;
                        /** @type {number} */
                        this.bandpass1Left.Q.value = .7071;
                        this.bandpass2Left = Pz.context.createBiquadFilter();
                        /** @type {string} */
                        this.bandpass2Left.type = "bandpass";
                        /** @type {number} */
                        this.bandpass2Left.frequency.value = 2490;
                        /** @type {number} */
                        this.bandpass2Left.Q.value = .7071;
                        this.highpassLeft = Pz.context.createBiquadFilter();
                        /** @type {string} */
                        this.highpassLeft.type = "highpass";
                        /** @type {number} */
                        this.highpassLeft.frequency.value = 4980;
                        /** @type {number} */
                        this.highpassLeft.Q.value = .7071;
                        /** @type {!Array} */
                        this.overdrives = [];
                        /** @type {number} */
                        var i = 0;
                        for (; 4 > i; i++) {
                            this.overdrives[i] = Pz.context.createWaveShaper();
                            this.overdrives[i].curve = getDistortionCurve();
                        }
                        this.inputNode.connect(this.wetGainNode);
                        this.inputNode.connect(this.dryGainNode);
                        this.dryGainNode.connect(this.outputNode);
                        /** @type {!Array} */
                        var filters = [this.lowpassLeft, this.bandpass1Left, this.bandpass2Left, this.highpassLeft];
                        /** @type {number} */
                        i = 0;
                        for (; i < filters.length; i++) {
                            this.wetGainNode.connect(filters[i]);
                            filters[i].connect(this.overdrives[i]);
                            this.overdrives[i].connect(this.outputNode);
                        }
                        var prop;
                        for (prop in defaults) {
                            this[prop] = options[prop];
                            this[prop] = void 0 === this[prop] || null === this[prop] ? defaults[prop] : this[prop];
                        }
                    };
                    /** @type {!Object} */
                    Pizzicato.Effects.Quadrafuzz.prototype = Object.create(baseEffect, {
                        lowGain: {
                            enumerable: true,
                            get: function () {
                                return this.options.lowGain;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.lowGain = value;
                                    this.overdrives[0].curve = getDistortionCurve(Pz.Util.normalize(this.lowGain, 0, 150));
                                }
                            }
                        },
                        midLowGain: {
                            enumerable: true,
                            get: function () {
                                return this.options.midLowGain;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.midLowGain = value;
                                    this.overdrives[1].curve = getDistortionCurve(Pz.Util.normalize(this.midLowGain, 0, 150));
                                }
                            }
                        },
                        midHighGain: {
                            enumerable: true,
                            get: function () {
                                return this.options.midHighGain;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.midHighGain = value;
                                    this.overdrives[2].curve = getDistortionCurve(Pz.Util.normalize(this.midHighGain, 0, 150));
                                }
                            }
                        },
                        highGain: {
                            enumerable: true,
                            get: function () {
                                return this.options.highGain;
                            },
                            set: function (value) {
                                if (Pz.Util.isInRange(value, 0, 1)) {
                                    /** @type {!Object} */
                                    this.options.highGain = value;
                                    this.overdrives[3].curve = getDistortionCurve(Pz.Util.normalize(this.highGain, 0, 150));
                                }
                            }
                        }
                    });
                }
            }("undefined" != typeof window ? window : value);
        }).call(s, getArguments(4));
    },
    function (module, e) {
        (function (__WEBPACK_EXTERNAL_MODULE_61__) {
            /** @type {!Function} */
            module.exports = __WEBPACK_EXTERNAL_MODULE_61__;
        }).call(e, {});
    },
    function (module, s, moment) {
        (function (useroptions) {
            var o;
            var e;
            var msg;
            /** @type {function(!Object): ?} */
            var type = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (boundsMethod) {
                return typeof boundsMethod;
            } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var options = void 0 !== module && module.exports && void 0 !== useroptions ? useroptions : window;
            (options._gsQueue || (options._gsQueue = [])).push(function () {
                /** @type {number} */
                var factor = Math.PI / 180;
                /** @type {number} */
                var boxSideSize = 180 / Math.PI;
                /** @type {!RegExp} */
                var METADATA_REGEX = /[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;
                /** @type {!RegExp} */
                var n = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi;
                /** @type {!RegExp} */
                var KEY_GETTER = /(^[#\.]|[a-y][a-z])/gi;
                /** @type {!RegExp} */
                var datetimeTest = /[achlmqstvz]/gi;
                /** @type {!RegExp} */
                var STRIP_COMMENTS = /[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi;
                var TweenLite = options._gsDefine.globals.TweenLite;
                /**
                 * @param {?} showConsole
                 * @return {undefined}
                 */
                var log = function (showConsole) {
                    options.console;
                };
                /**
                 * @param {number} y
                 * @param {number} c
                 * @return {?}
                 */
                var next = function (y, c) {
                    var t;
                    var i;
                    var value;
                    var x;
                    var time;
                    var h;
                    /** @type {number} */
                    var a = Math.ceil(Math.abs(c) / 90);
                    /** @type {number} */
                    var objCursor = 0;
                    /** @type {!Array} */
                    var obj = [];
                    /** @type {number} */
                    y = y * factor;
                    /** @type {number} */
                    c = c * factor;
                    /** @type {number} */
                    t = c / a;
                    /** @type {number} */
                    i = 4 / 3 * Math.sin(t / 2) / (1 + Math.cos(t / 2));
                    /** @type {number} */
                    h = 0;
                    for (; h < a; h++) {
                        value = y + h * t;
                        /** @type {number} */
                        x = Math.cos(value);
                        /** @type {number} */
                        time = Math.sin(value);
                        /** @type {number} */
                        obj[objCursor++] = x - i * time;
                        /** @type {number} */
                        obj[objCursor++] = time + i * x;
                        value = value + t;
                        /** @type {number} */
                        x = Math.cos(value);
                        /** @type {number} */
                        time = Math.sin(value);
                        /** @type {number} */
                        obj[objCursor++] = x + i * time;
                        /** @type {number} */
                        obj[objCursor++] = time - i * x;
                        /** @type {number} */
                        obj[objCursor++] = x;
                        /** @type {number} */
                        obj[objCursor++] = time;
                    }
                    return obj;
                };
                /**
                 * @param {number} newKey
                 * @param {number} newValue
                 * @param {number} rx
                 * @param {number} ry
                 * @param {number} offset
                 * @param {number} val
                 * @param {number} type
                 * @param {number} key
                 * @param {number} value
                 * @return {?}
                 */
                var rotate = function (newKey, newValue, rx, ry, offset, val, type, key, value) {
                    if (newKey !== key || newValue !== value) {
                        /** @type {number} */
                        rx = Math.abs(rx);
                        /** @type {number} */
                        ry = Math.abs(ry);
                        /** @type {number} */
                        var angle = offset % 360 * factor;
                        /** @type {number} */
                        var c = Math.cos(angle);
                        /** @type {number} */
                        var s = Math.sin(angle);
                        /** @type {number} */
                        var a4 = (newKey - key) / 2;
                        /** @type {number} */
                        var a5 = (newValue - value) / 2;
                        /** @type {number} */
                        var xp = c * a4 + s * a5;
                        /** @type {number} */
                        var y1 = -s * a4 + c * a5;
                        /** @type {number} */
                        var rx_sq = rx * rx;
                        /** @type {number} */
                        var ry_sq = ry * ry;
                        /** @type {number} */
                        var x1_sq = xp * xp;
                        /** @type {number} */
                        var y1_sq = y1 * y1;
                        /** @type {number} */
                        var lambda = x1_sq / rx_sq + y1_sq / ry_sq;
                        if (lambda > 1) {
                            /** @type {number} */
                            rx = Math.sqrt(lambda) * rx;
                            /** @type {number} */
                            ry = Math.sqrt(lambda) * ry;
                            /** @type {number} */
                            rx_sq = rx * rx;
                            /** @type {number} */
                            ry_sq = ry * ry;
                        }
                        /** @type {number} */
                        var articleArea = val === type ? -1 : 1;
                        /** @type {number} */
                        var oldGroundSpeedSquared = (rx_sq * ry_sq - rx_sq * y1_sq - ry_sq * x1_sq) / (rx_sq * y1_sq + ry_sq * x1_sq);
                        if (oldGroundSpeedSquared < 0) {
                            /** @type {number} */
                            oldGroundSpeedSquared = 0;
                        }
                        /** @type {number} */
                        var maximumImageArea = articleArea * Math.sqrt(oldGroundSpeedSquared);
                        /** @type {number} */
                        var a6 = maximumImageArea * (rx * y1 / ry);
                        /** @type {number} */
                        var a7 = maximumImageArea * (-ry * xp / rx);
                        /** @type {number} */
                        var zone = (newKey + key) / 2;
                        /** @type {number} */
                        var L = (newValue + value) / 2;
                        /** @type {number} */
                        var suffix = zone + (c * a6 - s * a7);
                        /** @type {number} */
                        var clickedLineHash = L + (s * a6 + c * a7);
                        /** @type {number} */
                        var v_prev_x = (xp - a6) / rx;
                        /** @type {number} */
                        var v_prev_y = (y1 - a7) / ry;
                        /** @type {number} */
                        var v_next_x = (-xp - a6) / rx;
                        /** @type {number} */
                        var v_next_y = (-y1 - a7) / ry;
                        /** @type {number} */
                        var width = Math.sqrt(v_prev_x * v_prev_x + v_prev_y * v_prev_y);
                        /** @type {number} */
                        var x2 = v_prev_x;
                        /** @type {number} */
                        articleArea = v_prev_y < 0 ? -1 : 1;
                        /** @type {number} */
                        var a = articleArea * Math.acos(x2 / width) * boxSideSize;
                        /** @type {number} */
                        width = Math.sqrt((v_prev_x * v_prev_x + v_prev_y * v_prev_y) * (v_next_x * v_next_x + v_next_y * v_next_y));
                        /** @type {number} */
                        x2 = v_prev_x * v_next_x + v_prev_y * v_next_y;
                        /** @type {number} */
                        articleArea = v_prev_x * v_next_y - v_prev_y * v_next_x < 0 ? -1 : 1;
                        /** @type {number} */
                        var b = articleArea * Math.acos(x2 / width) * boxSideSize;
                        if (!type && b > 0) {
                            /** @type {number} */
                            b = b - 360;
                        } else {
                            if (type && b < 0) {
                                /** @type {number} */
                                b = b + 360;
                            }
                        }
                        /** @type {number} */
                        b = b % 360;
                        /** @type {number} */
                        a = a % 360;
                        var i;
                        var v;
                        var u;
                        var result = next(a, b);
                        /** @type {number} */
                        var x = c * rx;
                        /** @type {number} */
                        var alpha = s * rx;
                        /** @type {number} */
                        var y = s * -ry;
                        /** @type {number} */
                        var previous = c * ry;
                        /** @type {number} */
                        var cell_amount = result.length - 2;
                        /** @type {number} */
                        i = 0;
                        for (; i < cell_amount; i = i + 2) {
                            v = result[i];
                            u = result[i + 1];
                            /** @type {number} */
                            result[i] = v * x + u * y + suffix;
                            /** @type {number} */
                            result[i + 1] = v * alpha + u * previous + clickedLineHash;
                        }
                        return result[result.length - 2] = key, result[result.length - 1] = value, result;
                    }
                };
                /**
                 * @param {string} folder
                 * @return {?}
                 */
                var update = function (folder) {
                    var index;
                    var k;
                    var r;
                    var value;
                    var undefined;
                    var horizontal;
                    var data;
                    var m;
                    var lastValue;
                    var y;
                    var delta;
                    var tmp;
                    var g;
                    /** @type {!Array} */
                    var match = (folder + "").replace(STRIP_COMMENTS, function (value) {
                        /** @type {number} */
                        var number = +value;
                        return number < 1e-4 && number > -1e-4 ? 0 : number;
                    }).match(METADATA_REGEX) || [];
                    /** @type {!Array} */
                    var options = [];
                    /** @type {number} */
                    var x = 0;
                    /** @type {number} */
                    var val = 0;
                    /** @type {number} */
                    var offset = match.length;
                    /** @type {number} */
                    var i = 2;
                    /** @type {number} */
                    var h = 0;
                    if (!folder || !isNaN(match[0]) || isNaN(match[1])) {
                        return log(), options;
                    }
                    /** @type {number} */
                    index = 0;
                    for (; index < offset; index++) {
                        if (g = undefined, isNaN(match[index]) ? (undefined = match[index].toUpperCase(), horizontal = undefined !== match[index]) : index--, r = +match[index + 1], value = +match[index + 2], horizontal && (r = r + x, value = value + val), 0 === index && (m = r, lastValue = value), "M" === undefined) {
                            if (data && data.length < 8) {
                                options.length -= 1;
                                /** @type {number} */
                                i = 0;
                            }
                            /** @type {number} */
                            x = m = r;
                            /** @type {number} */
                            val = lastValue = value;
                            /** @type {!Array} */
                            data = [r, value];
                            /** @type {number} */
                            h = h + i;
                            /** @type {number} */
                            i = 2;
                            options.push(data);
                            /** @type {number} */
                            index = index + 2;
                            /** @type {string} */
                            undefined = "L";
                        } else {
                            if ("C" === undefined) {
                                if (!data) {
                                    /** @type {!Array} */
                                    data = [0, 0];
                                }
                                /** @type {number} */
                                data[i++] = r;
                                /** @type {number} */
                                data[i++] = value;
                                if (!horizontal) {
                                    /** @type {number} */
                                    x = val = 0;
                                }
                                data[i++] = x + 1 * match[index + 3];
                                data[i++] = val + 1 * match[index + 4];
                                data[i++] = x = x + 1 * match[index + 5];
                                data[i++] = val = val + 1 * match[index + 6];
                                /** @type {number} */
                                index = index + 6;
                            } else {
                                if ("S" === undefined) {
                                    if ("C" === g || "S" === g) {
                                        /** @type {number} */
                                        y = x - data[i - 4];
                                        /** @type {number} */
                                        delta = val - data[i - 3];
                                        data[i++] = x + y;
                                        data[i++] = val + delta;
                                    } else {
                                        data[i++] = x;
                                        data[i++] = val;
                                    }
                                    /** @type {number} */
                                    data[i++] = r;
                                    /** @type {number} */
                                    data[i++] = value;
                                    if (!horizontal) {
                                        /** @type {number} */
                                        x = val = 0;
                                    }
                                    data[i++] = x = x + 1 * match[index + 3];
                                    data[i++] = val = val + 1 * match[index + 4];
                                    /** @type {number} */
                                    index = index + 4;
                                } else {
                                    if ("Q" === undefined) {
                                        /** @type {number} */
                                        y = r - x;
                                        /** @type {number} */
                                        delta = value - val;
                                        data[i++] = x + 2 * y / 3;
                                        data[i++] = val + 2 * delta / 3;
                                        if (!horizontal) {
                                            /** @type {number} */
                                            x = val = 0;
                                        }
                                        x = x + 1 * match[index + 3];
                                        val = val + 1 * match[index + 4];
                                        /** @type {number} */
                                        y = r - x;
                                        /** @type {number} */
                                        delta = value - val;
                                        data[i++] = x + 2 * y / 3;
                                        data[i++] = val + 2 * delta / 3;
                                        data[i++] = x;
                                        data[i++] = val;
                                        /** @type {number} */
                                        index = index + 4;
                                    } else {
                                        if ("T" === undefined) {
                                            /** @type {number} */
                                            y = x - data[i - 4];
                                            /** @type {number} */
                                            delta = val - data[i - 3];
                                            data[i++] = x + y;
                                            data[i++] = val + delta;
                                            /** @type {number} */
                                            y = x + 1.5 * y - r;
                                            /** @type {number} */
                                            delta = val + 1.5 * delta - value;
                                            /** @type {number} */
                                            data[i++] = r + 2 * y / 3;
                                            /** @type {number} */
                                            data[i++] = value + 2 * delta / 3;
                                            /** @type {number} */
                                            data[i++] = x = r;
                                            /** @type {number} */
                                            data[i++] = val = value;
                                            /** @type {number} */
                                            index = index + 2;
                                        } else {
                                            if ("H" === undefined) {
                                                value = val;
                                                data[i++] = x + (r - x) / 3;
                                                data[i++] = val + (value - val) / 3;
                                                data[i++] = x + 2 * (r - x) / 3;
                                                data[i++] = val + 2 * (value - val) / 3;
                                                /** @type {number} */
                                                data[i++] = x = r;
                                                data[i++] = value;
                                                /** @type {number} */
                                                index = index + 1;
                                            } else {
                                                if ("V" === undefined) {
                                                    /** @type {number} */
                                                    value = r;
                                                    r = x;
                                                    if (horizontal) {
                                                        /** @type {number} */
                                                        value = value + (val - x);
                                                    }
                                                    data[i++] = r;
                                                    data[i++] = val + (value - val) / 3;
                                                    data[i++] = r;
                                                    data[i++] = val + 2 * (value - val) / 3;
                                                    data[i++] = r;
                                                    /** @type {number} */
                                                    data[i++] = val = value;
                                                    /** @type {number} */
                                                    index = index + 1;
                                                } else {
                                                    if ("L" === undefined || "Z" === undefined) {
                                                        if ("Z" === undefined) {
                                                            /** @type {(number|undefined)} */
                                                            r = m;
                                                            /** @type {(number|undefined)} */
                                                            value = lastValue;
                                                            /** @type {boolean} */
                                                            data.closed = true;
                                                        }
                                                        if ("L" === undefined || Math.abs(x - r) > .5 || Math.abs(val - value) > .5) {
                                                            data[i++] = x + (r - x) / 3;
                                                            data[i++] = val + (value - val) / 3;
                                                            data[i++] = x + 2 * (r - x) / 3;
                                                            data[i++] = val + 2 * (value - val) / 3;
                                                            /** @type {(number|undefined)} */
                                                            data[i++] = r;
                                                            /** @type {(number|undefined)} */
                                                            data[i++] = value;
                                                            if ("L" === undefined) {
                                                                /** @type {number} */
                                                                index = index + 2;
                                                            }
                                                        }
                                                        /** @type {(number|undefined)} */
                                                        x = r;
                                                        /** @type {(number|undefined)} */
                                                        val = value;
                                                    } else {
                                                        if ("A" === undefined) {
                                                            if (tmp = rotate(x, val, 1 * match[index + 1], 1 * match[index + 2], 1 * match[index + 3], 1 * match[index + 4], 1 * match[index + 5], (horizontal ? x : 0) + 1 * match[index + 6], (horizontal ? val : 0) + 1 * match[index + 7])) {
                                                                /** @type {number} */
                                                                k = 0;
                                                                for (; k < tmp.length; k++) {
                                                                    data[i++] = tmp[k];
                                                                }
                                                            }
                                                            x = data[i - 2];
                                                            val = data[i - 1];
                                                            /** @type {number} */
                                                            index = index + 7;
                                                        } else {
                                                            log();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return options.totalPoints = h + i, options;
                };
                /**
                 * @param {!Object} d
                 * @param {number} s
                 * @return {?}
                 */
                var d = function (d, s) {
                    var a;
                    var x;
                    var t;
                    var b1;
                    var value1;
                    var a1;
                    var value2;
                    var a2;
                    var r1;
                    var start;
                    var y;
                    var end;
                    var i;
                    var amount;
                    /** @type {number} */
                    var val = 0;
                    var row = d.length;
                    /** @type {number} */
                    var inc = s / ((row - 2) / 6);
                    /** @type {number} */
                    i = 2;
                    for (; i < row; i = i + 6) {
                        /** @type {number} */
                        val = val + inc;
                        for (; val > .999999;) {
                            a = d[i - 2];
                            x = d[i - 1];
                            t = d[i];
                            b1 = d[i + 1];
                            value1 = d[i + 2];
                            a1 = d[i + 3];
                            value2 = d[i + 4];
                            a2 = d[i + 5];
                            /** @type {number} */
                            amount = 1 / (Math.floor(val) + 1);
                            r1 = a + (t - a) * amount;
                            y = t + (value1 - t) * amount;
                            r1 = r1 + (y - r1) * amount;
                            y = y + (value1 + (value2 - value1) * amount - y) * amount;
                            start = x + (b1 - x) * amount;
                            end = b1 + (a1 - b1) * amount;
                            start = start + (end - start) * amount;
                            end = end + (a1 + (a2 - a1) * amount - end) * amount;
                            d.splice(i, 4, a + (t - a) * amount, x + (b1 - x) * amount, r1, start, r1 + (y - r1) * amount, start + (end - start) * amount, y, end, value1 + (value2 - value1) * amount, a1 + (a2 - a1) * amount);
                            /** @type {number} */
                            i = i + 6;
                            row = row + 6;
                            val--;
                        }
                    }
                    return d;
                };
                /**
                 * @param {!Array} data
                 * @return {?}
                 */
                var parse = function (data) {
                    var iLength;
                    var i;
                    var j;
                    var points;
                    /** @type {string} */
                    var path = "";
                    var tldCount = data.length;
                    /** @type {number} */
                    i = 0;
                    for (; i < tldCount; i++) {
                        points = data[i];
                        /** @type {string} */
                        path = path + ("M" + points[0] + "," + points[1] + " C");
                        iLength = points.length;
                        /** @type {number} */
                        j = 2;
                        for (; j < iLength; j++) {
                            /** @type {string} */
                            path = path + ((100 * points[j++] | 0) / 100 + "," + (100 * points[j++] | 0) / 100 + " " + (100 * points[j++] | 0) / 100 + "," + (100 * points[j++] | 0) / 100 + " " + (100 * points[j++] | 0) / 100 + "," + (100 * points[j] | 0) / 100 + " ");
                        }
                        if (points.closed) {
                            /** @type {string} */
                            path = path + "z";
                        }
                    }
                    return path;
                };
                /**
                 * @param {!Object} data
                 * @return {undefined}
                 */
                var emit = function (data) {
                    /** @type {!Array} */
                    var result = [];
                    /** @type {number} */
                    var i = data.length - 1;
                    /** @type {number} */
                    var resultLen = 0;
                    for (; --i > -1;) {
                        result[resultLen++] = data[i];
                        result[resultLen++] = data[i + 1];
                        i--;
                    }
                    /** @type {number} */
                    i = 0;
                    for (; i < resultLen; i++) {
                        data[i] = result[i];
                    }
                    /** @type {boolean} */
                    data.reversed = !data.reversed;
                };
                /**
                 * @param {!Object} props
                 * @return {?}
                 */
                var test = function (props) {
                    var i;
                    var len = props.length;
                    /** @type {number} */
                    var overallColor = 0;
                    /** @type {number} */
                    var literal = 0;
                    /** @type {number} */
                    i = 0;
                    for (; i < len; i++) {
                        overallColor = overallColor + props[i++];
                        literal = literal + props[i];
                    }
                    return [overallColor / (len / 2), literal / (len / 2)];
                };
                /**
                 * @param {?} obj
                 * @return {?}
                 */
                var get = function (obj) {
                    var v;
                    var e;
                    var j;
                    var width = obj.length;
                    var x = obj[0];
                    var p = x;
                    var d = obj[1];
                    var t = d;
                    /** @type {number} */
                    j = 6;
                    for (; j < width; j = j + 6) {
                        v = obj[j];
                        e = obj[j + 1];
                        if (v > x) {
                            x = v;
                        } else {
                            if (v < p) {
                                p = v;
                            }
                        }
                        if (e > d) {
                            d = e;
                        } else {
                            if (e < t) {
                                t = e;
                            }
                        }
                    }
                    return obj.centerX = (x + p) / 2, obj.centerY = (d + t) / 2, obj.size = (x - p) * (d - t);
                };
                /**
                 * @param {?} obj
                 * @return {?}
                 */
                var _ = function (obj) {
                    var k;
                    var c;
                    var d;
                    var j;
                    var m;
                    var p = obj.length;
                    var b = obj[0][0];
                    var a = b;
                    var r = obj[0][1];
                    var i = r;
                    for (; --p > -1;) {
                        m = obj[p];
                        k = m.length;
                        /** @type {number} */
                        j = 6;
                        for (; j < k; j = j + 6) {
                            c = m[j];
                            d = m[j + 1];
                            if (c > b) {
                                b = c;
                            } else {
                                if (c < a) {
                                    a = c;
                                }
                            }
                            if (d > r) {
                                r = d;
                            } else {
                                if (d < i) {
                                    i = d;
                                }
                            }
                        }
                    }
                    return obj.centerX = (b + a) / 2, obj.centerY = (r + i) / 2, obj.size = (b - a) * (r - i);
                };
                /**
                 * @param {!NodeList} data
                 * @param {!NodeList} _
                 * @return {?}
                 */
                var min = function (data, _) {
                    return _.length - data.length;
                };
                /**
                 * @param {?} source
                 * @param {?} target
                 * @return {?}
                 */
                var distance = function (source, target) {
                    var barrierX = source.size || get(source);
                    var coreX = target.size || get(target);
                    return Math.abs(coreX - barrierX) < (barrierX + coreX) / 20 ? target.centerX - source.centerX || target.centerY - source.centerY : coreX - barrierX;
                };
                /**
                 * @param {!Array} res
                 * @param {number} index
                 * @return {undefined}
                 */
                var cb = function (res, index) {
                    var i;
                    var k;
                    var y = res.slice(0);
                    var end = res.length;
                    /** @type {number} */
                    var length = end - 2;
                    /** @type {number} */
                    index = index | 0;
                    /** @type {number} */
                    i = 0;
                    for (; i < end; i++) {
                        /** @type {number} */
                        k = (i + index) % length;
                        res[i++] = y[k];
                        res[i] = y[k + 1];
                    }
                };
                /**
                 * @param {string} data
                 * @param {!Array} p
                 * @param {number} i
                 * @param {number} x
                 * @param {number} s
                 * @return {?}
                 */
                var func = function (data, p, i, x, s) {
                    var pos;
                    var j;
                    var lightI;
                    var lightJ;
                    var len = data.length;
                    /** @type {number} */
                    var fullPath = 0;
                    /** @type {number} */
                    var n = len - 2;
                    /** @type {number} */
                    i = i * 6;
                    /** @type {number} */
                    j = 0;
                    for (; j < len; j = j + 6) {
                        /** @type {number} */
                        pos = (j + i) % n;
                        /** @type {number} */
                        lightJ = data[pos] - (p[j] - x);
                        /** @type {number} */
                        lightI = data[pos + 1] - (p[j + 1] - s);
                        /** @type {number} */
                        fullPath = fullPath + Math.sqrt(lightI * lightI + lightJ * lightJ);
                    }
                    return fullPath;
                };
                /**
                 * @param {string} x
                 * @param {!Array} key
                 * @param {boolean} value
                 * @return {?}
                 */
                var T = function (x, key, value) {
                    var messages;
                    var i;
                    var den;
                    var xIndex = x.length;
                    var b = test(x);
                    var request = test(key);
                    /** @type {number} */
                    var len = request[0] - b[0];
                    /** @type {number} */
                    var n = request[1] - b[1];
                    var l = func(x, key, 0, len, n);
                    /** @type {number} */
                    var fabsden = 0;
                    /** @type {number} */
                    den = 6;
                    for (; den < xIndex; den = den + 6) {
                        if ((i = func(x, key, den / 6, len, n)) < l) {
                            l = i;
                            /** @type {number} */
                            fabsden = den;
                        }
                    }
                    if (value) {
                        messages = x.slice(0);
                        emit(messages);
                        /** @type {number} */
                        den = 6;
                        for (; den < xIndex; den = den + 6) {
                            if ((i = func(messages, key, den / 6, len, n)) < l) {
                                l = i;
                                /** @type {number} */
                                fabsden = -den;
                            }
                        }
                    }
                    return fabsden / 6;
                };
                /**
                 * @param {!Object} data
                 * @param {?} left
                 * @param {?} top
                 * @return {?}
                 */
                var center = function (data, left, top) {
                    var segmentArray;
                    var tx;
                    var ty;
                    var tmp;
                    var i;
                    var len;
                    var bits = data.length;
                    /** @type {number} */
                    var minValue = 99999999999;
                    /** @type {number} */
                    var node_style_list = 0;
                    /** @type {number} */
                    var pathType = 0;
                    for (; --bits > -1;) {
                        segmentArray = data[bits];
                        len = segmentArray.length;
                        /** @type {number} */
                        i = 0;
                        for (; i < len; i = i + 6) {
                            /** @type {number} */
                            tx = segmentArray[i] - left;
                            /** @type {number} */
                            ty = segmentArray[i + 1] - top;
                            if ((tmp = Math.sqrt(tx * tx + ty * ty)) < minValue) {
                                /** @type {number} */
                                minValue = tmp;
                                node_style_list = segmentArray[i];
                                pathType = segmentArray[i + 1];
                            }
                        }
                    }
                    return [node_style_list, pathType];
                };
                /**
                 * @param {?} options
                 * @param {!Array} e
                 * @param {number} key
                 * @param {number} position
                 * @param {!Object} id
                 * @param {!Object} baseName
                 * @return {?}
                 */
                var normalize = function (options, e, key, position, id, baseName) {
                    var name;
                    var lightI;
                    var lightJ;
                    var tmp;
                    var z = e.length;
                    /** @type {number} */
                    var p = 0;
                    /** @type {number} */
                    var scrollFarAfter = Math.min(options.size || get(options), e[key].size || get(e[key])) * position;
                    /** @type {number} */
                    var minValue = 999999999999;
                    var indexLookupKey = options.centerX + id;
                    var middlePathName = options.centerY + baseName;
                    /** @type {number} */
                    name = key;
                    for (; name < z && !((e[name].size || get(e[name])) < scrollFarAfter); name++) {
                        /** @type {number} */
                        lightI = e[name].centerX - indexLookupKey;
                        /** @type {number} */
                        lightJ = e[name].centerY - middlePathName;
                        if ((tmp = Math.sqrt(lightI * lightI + lightJ * lightJ)) < minValue) {
                            p = name;
                            /** @type {number} */
                            minValue = tmp;
                        }
                    }
                    return tmp = e[p], e.splice(p, 1), tmp;
                };
                /**
                 * @param {!Object} result
                 * @param {!Object} t
                 * @param {!Object} value
                 * @param {?} max
                 * @return {?}
                 */
                var render = function (result, t, value, max) {
                    var o;
                    var e;
                    var title;
                    var defVal;
                    var pic;
                    var L;
                    var configBaseName;
                    /** @type {number} */
                    var right = t.length - result.length;
                    var target = right > 0 ? t : result;
                    var options = right > 0 ? result : t;
                    /** @type {number} */
                    var x = 0;
                    /** @type {function(!NodeList, !NodeList): ?} */
                    var sort = "complexity" === max ? min : distance;
                    /** @type {number} */
                    var p = "position" === max ? 0 : "number" == typeof max ? max : .8;
                    var i = options.length;
                    var parents = "object" === (void 0 === value ? "undefined" : type(value)) && value.push ? value.slice(0) : [value];
                    /** @type {boolean} */
                    var N = "reverse" === parents[0] || parents[0] < 0;
                    /** @type {boolean} */
                    var isTranslucent = "log" === value;
                    if (options[0]) {
                        if (target.length > 1 && (result.sort(sort), t.sort(sort), L = target.size || _(target), L = options.size || _(options), L = target.centerX - options.centerX, configBaseName = target.centerY - options.centerY, sort === distance)) {
                            /** @type {number} */
                            i = 0;
                            for (; i < options.length; i++) {
                                target.splice(i, 0, normalize(options[i], target, i, p, L, configBaseName));
                            }
                        }
                        if (right) {
                            if (right < 0) {
                                /** @type {number} */
                                right = -right;
                            }
                            if (target[0].length > options[0].length) {
                                d(options[0], (target[0].length - options[0].length) / 6 | 0);
                            }
                            i = options.length;
                            for (; x < right;) {
                                defVal = target[i].size || get(target[i]);
                                title = center(options, target[i].centerX, target[i].centerY);
                                defVal = title[0];
                                pic = title[1];
                                /** @type {!Array} */
                                options[i++] = [defVal, pic, defVal, pic, defVal, pic, defVal, pic];
                                options.totalPoints += 8;
                                x++;
                            }
                        }
                        /** @type {number} */
                        i = 0;
                        for (; i < result.length; i++) {
                            o = t[i];
                            e = result[i];
                            /** @type {number} */
                            right = o.length - e.length;
                            if (right < 0) {
                                d(o, -right / 6 | 0);
                            } else {
                                if (right > 0) {
                                    d(e, right / 6 | 0);
                                }
                            }
                            if (N && !e.reversed) {
                                emit(e);
                            }
                            if (value = parents[i] || 0 === parents[i] ? parents[i] : "auto") {
                                if (e.closed || Math.abs(e[0] - e[e.length - 2]) < .5 && Math.abs(e[1] - e[e.length - 1]) < .5) {
                                    if ("auto" === value || "log" === value) {
                                        parents[i] = value = T(e, o, 0 === i);
                                        if (value < 0) {
                                            /** @type {boolean} */
                                            N = true;
                                            emit(e);
                                            /** @type {number} */
                                            value = -value;
                                        }
                                        cb(e, 6 * value);
                                    } else {
                                        if ("reverse" !== value) {
                                            if (i && value < 0) {
                                                emit(e);
                                            }
                                            cb(e, 6 * (value < 0 ? -value : value));
                                        }
                                    }
                                } else {
                                    if (!N && ("auto" === value && Math.abs(o[0] - e[0]) + Math.abs(o[1] - e[1]) + Math.abs(o[o.length - 2] - e[e.length - 2]) + Math.abs(o[o.length - 1] - e[e.length - 1]) > Math.abs(o[0] - e[e.length - 2]) + Math.abs(o[1] - e[e.length - 1]) + Math.abs(o[o.length - 2] - e[0]) + Math.abs(o[o.length - 1] - e[1]) || value % 2)) {
                                        emit(e);
                                        /** @type {number} */
                                        parents[i] = -1;
                                        /** @type {boolean} */
                                        N = true;
                                    } else {
                                        if ("auto" === value) {
                                            /** @type {number} */
                                            parents[i] = 0;
                                        } else {
                                            if ("reverse" === value) {
                                                /** @type {number} */
                                                parents[i] = -1;
                                            }
                                        }
                                    }
                                }
                                if (e.closed !== o.closed) {
                                    /** @type {boolean} */
                                    e.closed = o.closed = false;
                                }
                            }
                        }
                        return isTranslucent && log(parents.join(",")), parents;
                    }
                };
                /**
                 * @param {!Object} acc
                 * @param {string} value
                 * @param {string} src
                 * @param {!Object} cb
                 * @return {undefined}
                 */
                var create = function (acc, value, src, cb) {
                    var res = update(acc[0]);
                    var k = update(acc[1]);
                    if (render(res, k, value || 0 === value ? value : "auto", src)) {
                        acc[0] = parse(res);
                        acc[1] = parse(k);
                        if (!("log" !== cb && true !== cb)) {
                            log((acc[0], acc[1]));
                        }
                    }
                };
                /**
                 * @param {string} r
                 * @param {string} n
                 * @param {string} t
                 * @return {?}
                 */
                var calc = function (r, n, t) {
                    return n || t || r || 0 === r ? function (results) {
                        create(results, r, n, t);
                    } : create;
                };
                /**
                 * @param {string} response
                 * @param {?} tx
                 * @return {?}
                 */
                var callback = function (response, tx) {
                    if (!tx) {
                        return response;
                    }
                    var unmoderatedSubreddits;
                    var r;
                    var i;
                    var rects = response.match(n) || [];
                    var rl = rects.length;
                    /** @type {string} */
                    var resp = "";
                    if ("reverse" === tx) {
                        /** @type {number} */
                        r = rl - 1;
                        /** @type {number} */
                        unmoderatedSubreddits = -2;
                    } else {
                        /** @type {number} */
                        r = (2 * (parseInt(tx, 10) || 0) + 1 + 100 * rl) % rl;
                        /** @type {number} */
                        unmoderatedSubreddits = 2;
                    }
                    /** @type {number} */
                    i = 0;
                    for (; i < rl; i = i + 2) {
                        /** @type {string} */
                        resp = resp + (rects[r - 1] + "," + rects[r] + " ");
                        /** @type {number} */
                        r = (r + unmoderatedSubreddits) % rl;
                    }
                    return resp;
                };
                /**
                 * @param {!Object} t
                 * @param {number} i
                 * @return {?}
                 */
                var end = function (t, i) {
                    var saltLen;
                    var cmd;
                    var totaldropped;
                    var i2;
                    var sort;
                    var s1;
                    var s3;
                    /** @type {number} */
                    var c = 0;
                    /** @type {number} */
                    var s0 = parseFloat(t[0]);
                    /** @type {number} */
                    var s2 = parseFloat(t[1]);
                    /** @type {string} */
                    var value = s0 + "," + s2 + " ";
                    totaldropped = t.length;
                    /** @type {number} */
                    saltLen = .5 * i / (.5 * totaldropped - 1);
                    /** @type {number} */
                    cmd = 0;
                    for (; cmd < totaldropped - 2; cmd = cmd + 2) {
                        if (c = c + saltLen, s1 = parseFloat(t[cmd + 2]), s3 = parseFloat(t[cmd + 3]), c > .999999) {
                            /** @type {number} */
                            sort = 1 / (Math.floor(c) + 1);
                            /** @type {number} */
                            i2 = 1;
                            for (; c > .999999;) {
                                /** @type {string} */
                                value = value + ((s0 + (s1 - s0) * sort * i2).toFixed(2) + "," + (s2 + (s3 - s2) * sort * i2).toFixed(2) + " ");
                                c--;
                                i2++;
                            }
                        }
                        /** @type {string} */
                        value = value + (s1 + "," + s3 + " ");
                        /** @type {number} */
                        s0 = s1;
                        /** @type {number} */
                        s2 = s3;
                    }
                    return value;
                };
                /**
                 * @param {!Object} t
                 * @return {undefined}
                 */
                var debug = function (t) {
                    var e = t[0].match(n) || [];
                    var result = t[1].match(n) || [];
                    /** @type {number} */
                    var i = result.length - e.length;
                    if (i > 0) {
                        t[0] = end(e, i);
                    } else {
                        t[1] = end(result, -i);
                    }
                };
                /**
                 * @param {?} data
                 * @return {?}
                 */
                var format = function (data) {
                    return isNaN(data) ? debug : function (result) {
                        debug(result);
                        result[1] = callback(result[1], parseInt(data, 10));
                    };
                };
                /**
                 * @param {!Node} dom
                 * @param {string} dist
                 * @return {?}
                 */
                var build = function (dom, dist) {
                    var attrName;
                    var element = options.document.createElementNS("http://www.w3.org/2000/svg", "path");
                    /** @type {!Array<?>} */
                    var childNodes = Array.prototype.slice.call(dom.attributes);
                    /** @type {number} */
                    var i = childNodes.length;
                    /** @type {string} */
                    dist = "," + dist + ",";
                    for (; --i > -1;) {
                        attrName = childNodes[i].nodeName.toLowerCase();
                        if (-1 === dist.indexOf("," + attrName + ",")) {
                            element.setAttributeNS(null, attrName, childNodes[i].nodeValue);
                        }
                    }
                    return element;
                };
                /**
                 * @param {!Node} node
                 * @param {!Object} parent
                 * @return {?}
                 */
                var draw = function (node, parent) {
                    var path;
                    var cx;
                    var j;
                    var x;
                    var i;
                    var result;
                    var r;
                    var left;
                    var headersAndBody;
                    var px;
                    var amount;
                    var x2;
                    var y;
                    var height;
                    var y0;
                    var sx;
                    var colNum;
                    var start;
                    var offset;
                    var boundary;
                    var quantity;
                    var undefined = node.tagName.toLowerCase();
                    /** @type {number} */
                    var factor = .552284749831;
                    return "path" !== undefined && node.getBBox ? (result = build(node, "x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"), "rect" === undefined ? (x = +node.getAttribute("rx") || 0, i = +node.getAttribute("ry") || 0, cx = +node.getAttribute("x") || 0, j = +node.getAttribute("y") || 0, px = (+node.getAttribute("width") || 0) - 2 * x, amount = (+node.getAttribute("height") || 0) - 2 * i, x || i ? (x2 = cx + x * (1 - factor), y = cx + x, height = y + px, y0 = height + x * factor, sx = height +
                        x, colNum = j + i * (1 - factor), start = j + i, offset = start + amount, boundary = offset + i * factor, quantity = offset + i, path = "M" + sx + "," + start + " V" + offset + " C" + [sx, boundary, y0, quantity, height, quantity, height - (height - y) / 3, quantity, y + (height - y) / 3, quantity, y, quantity, x2, quantity, cx, boundary, cx, offset, cx, offset - (offset - start) / 3, cx, start + (offset - start) / 3, cx, start, cx, colNum, x2, j, y, j, y + (height - y) / 3, j, height - (height -
                        y) / 3, j, height, j, y0, j, sx, colNum, sx, start].join(",") + "z") : path = "M" + (cx + px) + "," + j + " v" + amount + " h" + -px + " v" + -amount + " h" + px + "z") : "circle" === undefined || "ellipse" === undefined ? ("circle" === undefined ? (x = i = +node.getAttribute("r") || 0, left = x * factor) : (x = +node.getAttribute("rx") || 0, i = +node.getAttribute("ry") || 0, left = i * factor), cx = +node.getAttribute("cx") || 0, j = +node.getAttribute("cy") || 0, r = x * factor, path =
                        "M" + (cx + x) + "," + j + " C" + [cx + x, j + left, cx + r, j + i, cx, j + i, cx - r, j + i, cx - x, j + left, cx - x, j, cx - x, j - left, cx - r, j - i, cx, j - i, cx + r, j - i, cx + x, j - left, cx + x, j].join(",") + "z") : "line" === undefined ? path = "M" + (node.getAttribute("x1") || 0) + "," + (node.getAttribute("y1") || 0) + " L" + (node.getAttribute("x2") || 0) + "," + (node.getAttribute("y2") || 0) : "polyline" !== undefined && "polygon" !== undefined || (headersAndBody = (node.getAttribute("points") +
                        "").match(n) || [], cx = headersAndBody.shift(), j = headersAndBody.shift(), path = "M" + cx + "," + j + " L" + headersAndBody.join(","), "polygon" === undefined && (path = path + ("," + cx + "," + j + "z"))), result.setAttribute("d", path), parent && node.parentNode && (node.parentNode.insertBefore(result, node), node.parentNode.removeChild(node)), result) : node;
                };
                /**
                 * @param {!Object} target
                 * @param {string} content
                 * @param {string} item
                 * @return {?}
                 */
                var fn = function (target, content, item) {
                    var el;
                    var string;
                    /** @type {boolean} */
                    var after = "string" == typeof target;
                    return (!after || KEY_GETTER.test(target) || (target.match(n) || []).length < 3) && (el = after ? TweenLite.selector(target) : target && target[0] ? target : [target], el && el[0] ? (el = el[0], string = el.nodeName.toUpperCase(), content && "PATH" !== string && (el = draw(el, false), string = "PATH"), target = el.getAttribute("PATH" === string ? "d" : "points") || "", el === item && (target = el.getAttributeNS(null, "data-original") || target)) : (log(), target = false)), target;
                };
                var module = options._gsDefine.plugin({
                    propName: "morphSVG",
                    API: 2,
                    global: true,
                    version: "0.8.11",
                    init: function (target, options, tableId, name) {
                        var undefined;
                        var p;
                        var found;
                        var value;
                        var checkUpdateImmediately;
                        return "function" == typeof target.setAttribute && ("function" == typeof options && (options = options(name, target)), undefined = target.nodeName.toUpperCase(), checkUpdateImmediately = "POLYLINE" === undefined || "POLYGON" === undefined, "PATH" === undefined || checkUpdateImmediately ? (p = "PATH" === undefined ? "d" : "points", ("string" == typeof options || options.getBBox || options[0]) && (options = {
                            shape: options
                        }), value = fn(options.shape || options.d || options.points || "", "d" === p, target), checkUpdateImmediately && datetimeTest.test(value) ? (log(), false) : (value && (this._target = target, target.getAttributeNS(null, "data-original") || target.setAttributeNS(null, "data-original", target.getAttribute(p)), (found = this._addTween(target, "setAttribute", target.getAttribute(p) + "", value + "", "morphSVG", false, p, "object" === type(options.precompile) ? function (canCreateDiscussions) {
                            canCreateDiscussions[0] = options.precompile[0];
                            canCreateDiscussions[1] = options.precompile[1];
                        } : "d" === p ? calc(options.shapeIndex, options.map || module.defaultMap, options.precompile) : format(options.shapeIndex))) && (this._overwriteProps.push("morphSVG"), found.end = value, found.endProp = p)), true)) : (log(), false));
                    },
                    set: function (type) {
                        var node;
                        if (this._super.setRatio.call(this, type), 1 === type) {
                            node = this._firstPT;
                            for (; node;) {
                                if (node.end) {
                                    this._target.setAttribute(node.endProp, node.end);
                                }
                                node = node._next;
                            }
                        }
                    }
                });
                /** @type {function(!Object, string, string, !Object): undefined} */
                module.pathFilter = create;
                /** @type {function(!Object): undefined} */
                module.pointsFilter = debug;
                /** @type {function(!Object, number): ?} */
                module.subdivideRawBezier = d;
                /** @type {string} */
                module.defaultMap = "size";
                /**
                 * @param {!Object} href
                 * @return {?}
                 */
                module.pathDataToRawBezier = function (href) {
                    return update(fn(href, true));
                };
                /** @type {function(!Object, !Object, !Object, ?): ?} */
                module.equalizeSegmentQuantity = render;
                /**
                 * @param {!Object} target
                 * @param {!Object} elem
                 * @return {?}
                 */
                module.convertToPath = function (target, elem) {
                    if ("string" == typeof target) {
                        target = TweenLite.selector(target);
                    }
                    /** @type {!Array<?>} */
                    var fns = target && 0 !== target.length ? target.length && target[0] && target[0].nodeType ? Array.prototype.slice.call(target, 0) : [target] : [];
                    /** @type {number} */
                    var i = fns.length;
                    for (; --i > -1;) {
                        fns[i] = draw(fns[i], false !== elem);
                    }
                    return fns;
                };
                /**
                 * @param {!Object} href
                 * @param {!Object} options
                 * @return {?}
                 */
                module.pathDataToBezier = function (href, options) {
                    var statPointCoordinatesList;
                    var j;
                    var m;
                    var b;
                    var d;
                    var e;
                    var c;
                    var value;
                    var H = update(fn(href, true))[0] || [];
                    /** @type {number} */
                    var s = 0;
                    if (options = options || {}, value = options.align || options.relative, b = options.matrix || [1, 0, 0, 1, 0, 0], d = options.offsetX || 0, e = options.offsetY || 0, "relative" === value || true === value ? (d = d - (H[0] * b[0] + H[1] * b[2]), e = e - (H[0] * b[1] + H[1] * b[3]), s = "+=") : (d = d + b[4], e = e + b[5], value && (value = "string" == typeof value ? TweenLite.selector(value) : value && value[0] ? value : [value]) && value[0] && (c = value[0].getBBox() || {
                            x: 0,
                            y: 0
                        }, d = d - c.x, e = e - c.y)), statPointCoordinatesList = [], m = H.length, b && "1,0,0,1,0,0" !== b.join(",")) {
                        /** @type {number} */
                        j = 0;
                        for (; j < m; j = j + 2) {
                            statPointCoordinatesList.push({
                                x: s + (H[j] * b[0] + H[j + 1] * b[2] + d),
                                y: s + (H[j] * b[1] + H[j + 1] * b[3] + e)
                            });
                        }
                    } else {
                        /** @type {number} */
                        j = 0;
                        for (; j < m; j = j + 2) {
                            statPointCoordinatesList.push({
                                x: s + (H[j] + d),
                                y: s + (H[j + 1] + e)
                            });
                        }
                    }
                    return statPointCoordinatesList;
                };
            });
            if (options._gsDefine) {
                options._gsQueue.pop()();
            }
            (function (n) {
                /**
                 * @return {?}
                 */
                var m = function () {
                    return (options.GreenSockGlobals || options).MorphSVGPlugin;
                };
                if (void 0 !== module && module.exports) {
                    moment(9);
                    module.exports = m();
                } else {
                    /** @type {!Array} */
                    e = [moment(9)];
                    /** @type {function(): ?} */
                    o = m;
                    if (void 0 !== (msg = "function" == typeof o ? o.apply(s, e) : o)) {
                        module.exports = msg;
                    }
                }
            })();
        }).call(s, moment(4));
    },
    function (canCreateDiscussions, exports, $) {
        /**
         * @param {!Array} array
         * @return {?}
         */
        function makeArray(array) {
            if (Array.isArray(array)) {
                /** @type {number} */
                var i = 0;
                /** @type {!Array} */
                var ret = Array(array.length);
                for (; i < array.length; i++) {
                    ret[i] = array[i];
                }
                return ret;
            }
            return Array.from(array);
        }

        /**
         * @param {!AudioNode} instance
         * @param {!Function} Constructor
         * @return {undefined}
         */
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _createClass = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var $realtime = $(2);
        var root = $(1);
        var storageDriver = function () {
            /**
             * @param {!Object} elm
             * @return {undefined}
             */
            function View(elm) {
                _classCallCheck(this, View);
                /** @type {!Object} */
                this.$el = elm;
                this.$refs = {
                    inner: (0, root.qs)(".panel-end__content-inner", this.$el),
                    title: (0, root.qs)(".panel-end__title"),
                    items: [].concat(makeArray((0, root.qsa)('[type="radio"]', this.$el))),
                    go: (0, root.qs)('[type="button"]', this.$el),
                    email: (0, root.qs)('[type="email"]', this.$el),
                    submit: (0, root.qs)('[type="submit"]', this.$el)
                };
                this.onCheck = this.onCheck.bind(this);
                this.onGo = this.onGo.bind(this);
                this.onSubmit = this.onSubmit.bind(this);
                this.init();
            }

            return _createClass(View, [{
                key: "init",
                value: function () {
                    this.bind();
                }
            }, {
                key: "bind",
                value: function () {
                    var settings = this;
                    this.$refs.items.forEach(function (e) {
                        (0, root.$on)(e, "change", settings.onCheck);
                    });
                    (0, root.$on)(this.$refs.go, "click", this.onGo);
                    (0, root.$on)(this.$el, "submit", this.onSubmit);
                }
            }, {
                key: "onCheck",
                value: function () {
                    /** @type {boolean} */
                    this.$refs.go.disabled = false;
                }
            }, {
                key: "onGo",
                value: function () {
                    (new $realtime.TimelineLite).set(this.$refs.email, {
                        width: 180
                    }).set(this.$refs.submit, {
                        width: "auto"
                    }).add("shrink").to(this.$refs.go, .35, {
                        width: 0
                    }, "shrink").add("grow").from([this.$refs.email, this.$refs.submit], .5, {
                        width: 0
                    }, "grow");
                }
            }, {
                key: "onSubmit",
                value: function (type) {
                    type.preventDefault();
                    this.send();
                }
            }, {
                key: "send",
                value: function () {
                    var self = this;
                    /** @type {!FormData} */
                    var formData = new FormData(this.$el);
                    fetch("process.php", {
                        method: "POST",
                        body: formData
                    }).then(function (resp) {
                        return self.status = resp.status, resp.text();
                    }).then(function (context) {
                        self.displayMessage(self.status, context);
                    });
                }
            }, {
                key: "displayMessage",
                value: function (type, name) {
                    var applyViewModelsSpy = this;
                    /** @type {!Element} */
                    this.msg = document.createElement("div");
                    this.msg.classList.add("panel-end__content__message");
                    /** @type {string} */
                    this.msg.innerHTML = "<strong>" + (200 === type ? "Thank you!" : "Oups!") + "</strong>\n      " + name + '<br>\n      <button type="button">' + (200 === type ? "Got it" : "Try again") + "</button>";
                    (0, root.$insertAfter)(this.msg, this.$refs.inner);
                    (new $realtime.TimelineLite).to([this.$refs.title, this.$refs.inner], 1, {
                        autoAlpha: 0
                    }).to(this.msg, 1, {
                        autoAlpha: 1
                    });
                    var elAnalyze = (0, root.qs)("button", this.msg);
                    (0, root.$on)(elAnalyze, "click", function () {
                        if (200 === type) {
                            location.reload();
                        } else {
                            applyViewModelsSpy.reset();
                        }
                    });
                }
            }, {
                key: "reset",
                value: function () {
                    var layer = this;
                    (new $realtime.TimelineLite({
                        onComplete: function () {
                            layer.msg.remove();
                        }
                    })).to(this.msg, 1, {
                        autoAlpha: 0
                    }).to([this.$refs.title, this.$refs.inner], 1, {
                        autoAlpha: 1
                    });
                }
            }]), View;
        }();
        exports.default = storageDriver;
    },
    function (canCreateDiscussions, e, __webpack_require__) {
        /**
         * @param {!Object} obj
         * @return {?}
         */
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }

        /**
         * @param {!AudioNode} t
         * @param {!Function} m
         * @return {undefined}
         */
        function r(t, m) {
            if (!(t instanceof m)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        Object.defineProperty(e, "__esModule", {
            value: true
        });
        var i = function () {
            /**
             * @param {!Function} d
             * @param {string} props
             * @return {undefined}
             */
            function t(d, props) {
                /** @type {number} */
                var i = 0;
                for (; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    /** @type {boolean} */
                    descriptor.configurable = true;
                    if ("value" in descriptor) {
                        /** @type {boolean} */
                        descriptor.writable = true;
                    }
                    Object.defineProperty(d, descriptor.key, descriptor);
                }
            }

            return function (p, n, a) {
                return n && t(p.prototype, n), a && t(p, a), p;
            };
        }();
        var _prepareStyleProperties = __webpack_require__(61);
        var _prepareStyleProperties2 = _interopRequireDefault(_prepareStyleProperties);
        var _deepAssign = __webpack_require__(0);
        var _deepAssign2 = _interopRequireDefault(_deepAssign);
        var newOrg = function () {
            /**
             * @param {!Object} gotoEnd
             * @return {undefined}
             */
            function t(gotoEnd) {
                r(this, t);
                /** @type {!Array} */
                this.panels = [{
                    name: "home",
                    img: "assets/images/bg-home-b676bd0cc2.png",
                    imgSmall: "assets/images/bg-home-small-6ae8308343.png"
                }, {
                    name: "brain",
                    img: "assets/images/bg-brain-a8ff4f2868.png",
                    imgSmall: "assets/images/bg-brain-small-ae2481bbc2.png"
                }, {
                    name: "gloves",
                    img: "assets/images/bg-gloves-d54f82fbaa.png",
                    imgSmall: "assets/images/bg-gloves-small-3919cb79ee.png"
                }, {
                    name: "stadium",
                    img: "assets/images/bg-stadium-a34c07989d.png",
                    imgSmall: "assets/images/bg-stadium-small-8e1234d071.png"
                }, {
                    name: "lsm",
                    img: "assets/images/bg-lsm-1f5e1a1d35.png",
                    imgSmall: "assets/images/bg-lsm-small-9f95aff441.png"
                }, {
                    name: "end",
                    img: "assets/images/bg-end-65607c2cbe.png",
                    imgSmall: "assets/images/bg-end-small-5643f70c57.png"
                }];
                /** @type {!Object} */
                this.$el = gotoEnd;
                this.$refs = {
                    images: []
                };
                this.onChange = this.onChange.bind(this);
            }

            return i(t, [{
                key: "init",
                value: function () {
                    var _this = this;
                    return new Promise(function (e) {
                        _this.panels.forEach(function (result) {
                            /** @type {!Image} */
                            var self = new Image;
                            self.src = result.img;
                            self.setAttribute("srcset", result.imgSmall + " 768w, " + result.img + " 1440w");
                            self.setAttribute("sizes", "(max-width: 768px) 320px, 1440px");
                            self.dataset.image = result.name;
                            _this.$refs.images.push(self);
                            _this.$el.appendChild(self);
                        });
                        _this.$refs.images[0].classList.add("is-active");
                        _this.bind();
                        (0, _prepareStyleProperties2.default)(_this.$el, e);
                    });
                }
            }, {
                key: "bind",
                value: function () {
                    _deepAssign2.default.on(_deepAssign2.default.PANEL_CHANGE, this.onChange);
                }
            }, {
                key: "onChange",
                value: function (type, name) {
                    this.$refs.images[type].classList.remove("is-active");
                    this.$refs.images[name].classList.add("is-active");
                }
            }]), t;
        }();
        e.default = newOrg;
    },
    function (mixin, e, saveNotifs) {
        var word;
        var m;
        !function (n, fn) {
            /** @type {!Array} */
            word = [saveNotifs(62)];
            if (void 0 !== (m = function (previousAnimation) {
                    return fn(n, previousAnimation);
                }.apply(e, word))) {
                mixin.exports = m;
            }
        }("undefined" != typeof window ? window : this, function (window, listener) {
            /**
             * @param {!Object} source
             * @param {!Object} target
             * @return {?}
             */
            function extend(source, target) {
                var key;
                for (key in target) {
                    source[key] = target[key];
                }
                return source;
            }

            /**
             * @param {string} a
             * @return {?}
             */
            function makeArray(a) {
                return Array.isArray(a) ? a : "object" == typeof a && "number" == typeof a.length ? pSlice.call(a) : [a];
            }

            /**
             * @param {string} elem
             * @param {!Object} options
             * @param {!Object} callback
             * @return {?}
             */
            function ImagesLoaded(elem, options, callback) {
                if (!(this instanceof ImagesLoaded)) {
                    return new ImagesLoaded(elem, options, callback);
                }
                /** @type {string} */
                var target = elem;
                if ("string" == typeof elem && (target = document.querySelectorAll(elem)), !target) {
                    return void console.error("Bad element for imagesLoaded " + (target || elem));
                }
                this.elements = makeArray(target);
                this.options = extend({}, this.options);
                if ("function" == typeof options) {
                    /** @type {!Object} */
                    callback = options;
                } else {
                    extend(this.options, options);
                }
                if (callback) {
                    this.on("always", callback);
                }
                this.getImages();
                if ($) {
                    this.jqDeferred = new $.Deferred;
                }
                setTimeout(this.check.bind(this));
            }

            /**
             * @param {string} img
             * @return {undefined}
             */
            function LoadingImage(img) {
                /** @type {string} */
                this.img = img;
            }

            /**
             * @param {!Object} url
             * @param {!Node} description
             * @return {undefined}
             */
            function Background(url, description) {
                /** @type {!Object} */
                this.url = url;
                /** @type {!Node} */
                this.element = description;
                /** @type {!Image} */
                this.img = new Image;
            }

            var $ = window.jQuery;
            var console = window.console;
            /** @type {function(this:(IArrayLike<T>|string), *=, *=): !Array<T>} */
            var pSlice = Array.prototype.slice;
            /** @type {!Object} */
            ImagesLoaded.prototype = Object.create(listener.prototype);
            ImagesLoaded.prototype.options = {};
            /**
             * @return {undefined}
             */
            ImagesLoaded.prototype.getImages = function () {
                /** @type {!Array} */
                this.images = [];
                this.elements.forEach(this.addElementImages, this);
            };
            /**
             * @param {!Node} elem
             * @return {undefined}
             */
            ImagesLoaded.prototype.addElementImages = function (elem) {
                if ("IMG" == elem.nodeName) {
                    this.addImage(elem);
                }
                if (true === this.options.background) {
                    this.addElementBackgroundImages(elem);
                }
                var k = elem.nodeType;
                if (k && offs[k]) {
                    var elems = elem.querySelectorAll("img");
                    /** @type {number} */
                    var i = 0;
                    for (; i < elems.length; i++) {
                        var elem = elems[i];
                        this.addImage(elem);
                    }
                    if ("string" == typeof this.options.background) {
                        var hoverElems = elem.querySelectorAll(this.options.background);
                        /** @type {number} */
                        i = 0;
                        for (; i < hoverElems.length; i++) {
                            var elem = hoverElems[i];
                            this.addElementBackgroundImages(elem);
                        }
                    }
                }
            };
            var offs = {
                1: true,
                9: true,
                11: true
            };
            return ImagesLoaded.prototype.addElementBackgroundImages = function (elem) {
                /** @type {(CSSStyleDeclaration|null)} */
                var style = getComputedStyle(elem);
                if (style) {
                    /** @type {!RegExp} */
                    var reURL = /url\((['"])?(.*?)\1\)/gi;
                    /** @type {(Array<string>|null)} */
                    var contentUrls = reURL.exec(style.backgroundImage);
                    for (; null !== contentUrls;) {
                        /** @type {string} */
                        var url = contentUrls && contentUrls[2];
                        if (url) {
                            this.addBackground(url, elem);
                        }
                        /** @type {(Array<string>|null)} */
                        contentUrls = reURL.exec(style.backgroundImage);
                    }
                }
            }, ImagesLoaded.prototype.addImage = function (img) {
                var i = new LoadingImage(img);
                this.images.push(i);
            }, ImagesLoaded.prototype.addBackground = function (url, elem) {
                var b = new Background(url, elem);
                this.images.push(b);
            }, ImagesLoaded.prototype.check = function () {
                /**
                 * @param {undefined} image
                 * @param {string} p
                 * @param {string} area
                 * @return {undefined}
                 */
                function update(image, p, area) {
                    setTimeout(function () {
                        path.progress(image, p, area);
                    });
                }

                var path = this;
                if (this.progressedCount = 0, this.hasAnyBroken = false, !this.images.length) {
                    return void this.complete();
                }
                this.images.forEach(function (properties) {
                    properties.once("progress", update);
                    properties.check();
                });
            }, ImagesLoaded.prototype.progress = function (image, elem, name) {
                this.progressedCount++;
                this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
                this.emitEvent("progress", [this, image, elem]);
                if (this.jqDeferred && this.jqDeferred.notify) {
                    this.jqDeferred.notify(this, image);
                }
                if (this.progressedCount == this.images.length) {
                    this.complete();
                }
                if (this.options.debug && console) {
                    console.log("progress: " + name, image, elem);
                }
            }, ImagesLoaded.prototype.complete = function () {
                /** @type {string} */
                var eventName = this.hasAnyBroken ? "fail" : "done";
                if (this.isComplete = true, this.emitEvent(eventName, [this]), this.emitEvent("always", [this]), this.jqDeferred) {
                    /** @type {string} */
                    var jqMethod = this.hasAnyBroken ? "reject" : "resolve";
                    this.jqDeferred[jqMethod](this);
                }
            }, LoadingImage.prototype = Object.create(listener.prototype), LoadingImage.prototype.check = function () {
                if (this.getIsImageComplete()) {
                    return void this.confirm(0 !== this.img.naturalWidth, "naturalWidth");
                }
                /** @type {!Image} */
                this.proxyImage = new Image;
                this.proxyImage.addEventListener("load", this);
                this.proxyImage.addEventListener("error", this);
                this.img.addEventListener("load", this);
                this.img.addEventListener("error", this);
                this.proxyImage.src = this.img.src;
            }, LoadingImage.prototype.getIsImageComplete = function () {
                return this.img.complete && this.img.naturalWidth;
            }, LoadingImage.prototype.confirm = function (isLoaded, message) {
                /** @type {boolean} */
                this.isLoaded = isLoaded;
                this.emitEvent("progress", [this, this.img, message]);
            }, LoadingImage.prototype.handleEvent = function (event) {
                /** @type {string} */
                var method = "on" + event.type;
                if (this[method]) {
                    this[method](event);
                }
            }, LoadingImage.prototype.onload = function () {
                this.confirm(true, "onload");
                this.unbindEvents();
            }, LoadingImage.prototype.onerror = function () {
                this.confirm(false, "onerror");
                this.unbindEvents();
            }, LoadingImage.prototype.unbindEvents = function () {
                this.proxyImage.removeEventListener("load", this);
                this.proxyImage.removeEventListener("error", this);
                this.img.removeEventListener("load", this);
                this.img.removeEventListener("error", this);
            }, Background.prototype = Object.create(LoadingImage.prototype), Background.prototype.check = function () {
                this.img.addEventListener("load", this);
                this.img.addEventListener("error", this);
                this.img.src = this.url;
                if (this.getIsImageComplete()) {
                    this.confirm(0 !== this.img.naturalWidth, "naturalWidth");
                    this.unbindEvents();
                }
            }, Background.prototype.unbindEvents = function () {
                this.img.removeEventListener("load", this);
                this.img.removeEventListener("error", this);
            }, Background.prototype.confirm = function (isLoaded, message) {
                /** @type {boolean} */
                this.isLoaded = isLoaded;
                this.emitEvent("progress", [this, this.element, message]);
            }, ImagesLoaded.makeJQueryPlugin = function (jQuery) {
                if (jQuery = jQuery || window.jQuery) {
                    /** @type {!Function} */
                    $ = jQuery;
                    /**
                     * @param {(!Function|RegExp|string)} options
                     * @param {(!Function|RegExp|string)} callback
                     * @return {?}
                     */
                    $.fn.imagesLoaded = function (options, callback) {
                        return (new ImagesLoaded(this, options, callback)).jqDeferred.promise($(this));
                    };
                }
            }, ImagesLoaded.makeJQueryPlugin(), ImagesLoaded;
        });
    },
    function (obj, i, e) {
        var arg;
        var proto;
        !function (canCreateDiscussions, _arg) {
            /** @type {function(): ?} */
            arg = _arg;
            if (void 0 !== (proto = "function" == typeof arg ? arg.call(i, e, i, obj) : arg)) {
                obj.exports = proto;
            }
        }("undefined" != typeof window && window, function () {
            /**
             * @return {undefined}
             */
            function StopAutoplay() {
            }

            var proto = StopAutoplay.prototype;
            return proto.on = function (value, name) {
                if (value && name) {
                    var events = this._events = this._events || {};
                    var n = events[value] = events[value] || [];
                    return -1 == n.indexOf(name) && n.push(name), this;
                }
            }, proto.once = function (type, name) {
                if (type && name) {
                    this.on(type, name);
                    var onceEvents = this._onceEvents = this._onceEvents || {};
                    return (onceEvents[type] = onceEvents[type] || {})[name] = true, this;
                }
            }, proto.off = function (name, type) {
                var listeners = this._events && this._events[name];
                if (listeners && listeners.length) {
                    var p = listeners.indexOf(type);
                    return -1 != p && listeners.splice(p, 1), this;
                }
            }, proto.emitEvent = function (eventName, data) {
                var array = this._events && this._events[eventName];
                if (array && array.length) {
                    array = array.slice(0);
                    data = data || [];
                    var _strings = this._onceEvents && this._onceEvents[eventName];
                    /** @type {number} */
                    var i = 0;
                    for (; i < array.length; i++) {
                        var o = array[i];
                        if (_strings && _strings[o]) {
                            this.off(eventName, o);
                            delete _strings[o];
                        }
                        o.apply(this, data);
                    }
                    return this;
                }
            }, proto.allOff = function () {
                delete this._events;
                delete this._onceEvents;
            }, StopAutoplay;
        });
    }
]);
