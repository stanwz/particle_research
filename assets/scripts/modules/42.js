function (t, e) {
    t.exports = "#define GLSLIFY 1\nuniform float color;\nuniform float timer;\nuniform float transition;\nuniform vec2 mousePosition;\nvarying vec2 vUv;\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n  if (hue < 0.0) {\n    hue += 1.0;\n  } else if (hue > 1.0) {\n    hue -= 1.0;\n  }\n\n  float res;\n  if ((6.0 * hue) < 1.0) {\n    res = f1 + (f2 - f1) * 6.0 * hue;\n  } else if ((2.0 * hue) < 1.0) {\n    res = f2;\n  } else if ((3.0 * hue) < 2.0) {\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n  } else {\n    res = f1;\n  }\n\n  return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n  vec3 rgb;\n\n  if (hsl.y == 0.0) {\n    rgb = vec3(hsl.z); // Luminance\n  } else {\n    float f2;\n\n    if (hsl.z < 0.5) {\n        f2 = hsl.z * (1.0 + hsl.y);\n    } else {\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n    }\n\n    float f1 = 2.0 * hsl.z - f2;\n\n    rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n    rgb.g = hue2rgb(f1, f2, hsl.x);\n    rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n  }\n\n  return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  return hsl2rgb(vec3(h, s, l));\n}\n\nfloat fbm(vec2 pos, float t){\n  float r;\n        r \t= \tnoise( vec3( pos, t ) * 01.0 ) * 01.0000;\n        r \t+= \tnoise( vec3( pos, t ) * 02.0 ) * 00.5000;\n        r \t+= \tnoise( vec3( pos, t ) * 04.0 ) * 00.2500;\n        //r \t+= \tnoise( vec3( pos, t ) * 08.0 ) * 00.1250;\n        //r \t+= \tnoise( vec3( pos, t ) * 16.0 ) * 00.0625;\n  return r / 1.75;\n}\n\n\nvoid main() {\n\n  vec2 pos = vUv;\n  float p = fbm( pos * 1.0, timer * .001);\n\tvec2 pos2 = pos + vec2(p);\n  float q = fbm( pos2 * 2.0, timer * .002);\n\tvec2 pos3 = pos + vec2(q);\n\n  float hue = color - .05 + length(pos3) * .1;//color  -.05 + pos3.x * .1;\n  float saturation = 1.0;//1.0 - sin(transition * 3.14) * .3;\n\n\n  // Light\n  float normX = vUv.x * 2.0 -1.0;\n  float normY = vUv.y * 2.0 -1.0;\n  float dist = length(vec2(normX, normY));\n  float vignette = 1.0 - dist * .5;\n  float highlightClouds = pos3.x * 0.02;\n  float baseLight = .15;\n  float transitionLight = sin(transition * 3.14 * 2.0) * .2;\n  float mouseDistance = length( mousePosition - vUv );\n  float radiusBase = 0.1;\n  float mouseShadow = 1.0 - smoothstep( 0.0, radiusBase, mouseDistance )  ;\n\n  float light = baseLight + highlightClouds;\n  light *= vignette + transitionLight;\n  light += mouseShadow * 0.05;\n  hue += mouseShadow * .01;\n\n  vec3 col = hsl2rgb(hue, saturation, light);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n"
}